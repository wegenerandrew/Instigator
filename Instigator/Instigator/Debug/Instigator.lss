
Instigator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002244  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00802000  00002244  000022d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a9  0080202c  0080202c  00002304  2**0
                  ALLOC
  3 .stab         00001d10  00000000  00000000  00002304  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000008e0  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000268  00000000  00000000  000048f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000047c  00000000  00000000  00004b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004938  00000000  00000000  00004fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001912  00000000  00000000  00009910  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00003530  00000000  00000000  0000b222  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004c0  00000000  00000000  0000e754  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000015a5  00000000  00000000  0000ec14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a3d  00000000  00000000  000101b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 0000077c  00000000  00000000  00011bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000278  00000000  00000000  00012372  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 02 	jmp	0x474	; 0x474 <__ctors_end>
       4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
       8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
       c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      10:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      14:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      18:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      1c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      20:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      24:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      28:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      2c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      30:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      34:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      38:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      3c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      40:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      44:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      48:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      4c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      50:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      54:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      58:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      5c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      60:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      64:	0c 94 ea 07 	jmp	0xfd4	; 0xfd4 <__vector_25>
      68:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_26>
      6c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      70:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      74:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      78:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      7c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      80:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      84:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      88:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      8c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      90:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      94:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      98:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      9c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      a0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      a4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      a8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      ac:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      b0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      b4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      b8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      bc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      c0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      c4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      c8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      cc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      d0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      d4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      d8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      dc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      e0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      e4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      e8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      ec:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      f0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
      f4:	0c 94 96 08 	jmp	0x112c	; 0x112c <__vector_61>
      f8:	0c 94 43 08 	jmp	0x1086	; 0x1086 <__vector_62>
      fc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     100:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     104:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     108:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     10c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     110:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     114:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     118:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     11c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     120:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     124:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     128:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     12c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     130:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     134:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     138:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     13c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     140:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     144:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     148:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     14c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     150:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     154:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     158:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     15c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     160:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     164:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     168:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     16c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     170:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     174:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     178:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     17c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     180:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     184:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     188:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     18c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     190:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     194:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     198:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     19c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1a0:	0c 94 58 05 	jmp	0xab0	; 0xab0 <__vector_104>
     1a4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1a8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1ac:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1b0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1b4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1b8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1bc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1c0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1c4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1c8:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <__vector_114>
     1cc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1d0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1d4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1d8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1dc:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1e0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1e4:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1e8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1ec:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1f0:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__bad_interrupt>
     1f4:	16 03       	mulsu	r17, r22
     1f6:	18 04       	cpc	r1, r8
     1f8:	18 04       	cpc	r1, r8
     1fa:	18 04       	cpc	r1, r8
     1fc:	18 04       	cpc	r1, r8
     1fe:	18 04       	cpc	r1, r8
     200:	18 04       	cpc	r1, r8
     202:	18 04       	cpc	r1, r8
     204:	18 04       	cpc	r1, r8
     206:	18 04       	cpc	r1, r8
     208:	18 04       	cpc	r1, r8
     20a:	76 03       	mulsu	r23, r22
     20c:	18 04       	cpc	r1, r8
     20e:	4f 03       	fmul	r20, r23
     210:	18 04       	cpc	r1, r8
     212:	18 04       	cpc	r1, r8
     214:	18 04       	cpc	r1, r8
     216:	18 04       	cpc	r1, r8
     218:	18 04       	cpc	r1, r8
     21a:	18 04       	cpc	r1, r8
     21c:	18 04       	cpc	r1, r8
     21e:	18 04       	cpc	r1, r8
     220:	18 04       	cpc	r1, r8
     222:	18 04       	cpc	r1, r8
     224:	18 04       	cpc	r1, r8
     226:	18 04       	cpc	r1, r8
     228:	18 04       	cpc	r1, r8
     22a:	18 04       	cpc	r1, r8
     22c:	18 04       	cpc	r1, r8
     22e:	28 03       	fmul	r18, r16
     230:	18 04       	cpc	r1, r8
     232:	1d 04       	cpc	r1, r13
     234:	18 04       	cpc	r1, r8
     236:	16 03       	mulsu	r17, r22
     238:	18 04       	cpc	r1, r8
     23a:	18 04       	cpc	r1, r8
     23c:	16 03       	mulsu	r17, r22
     23e:	18 04       	cpc	r1, r8
     240:	18 04       	cpc	r1, r8
     242:	18 04       	cpc	r1, r8
     244:	18 04       	cpc	r1, r8
     246:	18 04       	cpc	r1, r8
     248:	18 04       	cpc	r1, r8
     24a:	18 04       	cpc	r1, r8
     24c:	18 04       	cpc	r1, r8
     24e:	18 04       	cpc	r1, r8
     250:	18 04       	cpc	r1, r8
     252:	18 04       	cpc	r1, r8
     254:	16 03       	mulsu	r17, r22
     256:	18 04       	cpc	r1, r8
     258:	18 04       	cpc	r1, r8
     25a:	16 03       	mulsu	r17, r22
     25c:	18 04       	cpc	r1, r8
     25e:	18 04       	cpc	r1, r8
     260:	18 04       	cpc	r1, r8
     262:	16 03       	mulsu	r17, r22
     264:	18 04       	cpc	r1, r8
     266:	18 04       	cpc	r1, r8
     268:	f7 03       	fmuls	r23, r23
     26a:	18 04       	cpc	r1, r8
     26c:	18 04       	cpc	r1, r8
     26e:	18 04       	cpc	r1, r8
     270:	18 04       	cpc	r1, r8
     272:	9b 03       	fmulsu	r17, r19
     274:	18 04       	cpc	r1, r8
     276:	16 03       	mulsu	r17, r22
     278:	18 04       	cpc	r1, r8
     27a:	cb 03       	fmulsu	r20, r19
     27c:	16 03       	mulsu	r17, r22
     27e:	18 04       	cpc	r1, r8
     280:	18 04       	cpc	r1, r8
     282:	18 04       	cpc	r1, r8
     284:	18 04       	cpc	r1, r8
     286:	18 04       	cpc	r1, r8
     288:	18 04       	cpc	r1, r8
     28a:	18 04       	cpc	r1, r8
     28c:	18 04       	cpc	r1, r8
     28e:	16 03       	mulsu	r17, r22
     290:	18 04       	cpc	r1, r8
     292:	18 04       	cpc	r1, r8
     294:	c0 03       	fmuls	r20, r16
     296:	21 04       	cpc	r2, r1
     298:	18 04       	cpc	r1, r8
     29a:	16 03       	mulsu	r17, r22
     29c:	18 04       	cpc	r1, r8
     29e:	18 04       	cpc	r1, r8
     2a0:	18 04       	cpc	r1, r8
     2a2:	16 03       	mulsu	r17, r22
     2a4:	16 03       	mulsu	r17, r22
     2a6:	18 04       	cpc	r1, r8
     2a8:	d6 03       	fmuls	r21, r22

000002aa <_ZZ23controlpanel_promptCharPKcE3__c>:
     2aa:	25 73 3e 20 00                                      %s> .

000002af <_ZZ19controlpanel_promptPKcS0_zE3__c>:
     2af:	25 73 23 20 00                                      %s# .

000002b4 <_ZL11unknown_str>:
     2b4:	55 6e 6b 6e 6f 77 6e 2e 20 3f 20 66 6f 72 20 68     Unknown. ? for h
     2c4:	65 6c 70 2e 00                                      elp..

000002c9 <_ZZ18controlpanel_drivevE3__c_4>:
     2c9:	4d 6f 74 6f 72 20 63 6f 6e 74 72 6f 6c 20 64 69     Motor control di
     2d9:	73 61 62 6c 65 64 0a 00                             sabled..

000002e1 <_ZZ18controlpanel_drivevE3__c_3>:
     2e1:	44 65 62 75 67 20 64 69 73 61 62 6c 65 64 0a 00     Debug disabled..

000002f1 <_ZZ18controlpanel_drivevE3__c_2>:
     2f1:	53 70 65 65 64 3a 20 25 66 0a 00                    Speed: %f..

000002fc <_ZZ18controlpanel_drivevE3__c_1>:
     2fc:	53 70 65 65 64 3a 20 25 66 0a 00                    Speed: %f..

00000307 <_ZZ18controlpanel_drivevE3__c_0>:
     307:	53 70 65 65 64 3a 20 25 66 0a 00                    Speed: %f..

00000312 <_ZZ18controlpanel_drivevE3__c>:
     312:	53 70 65 65 64 3a 20 25 66 0a 00                    Speed: %f..

0000031d <_ZZ18controlpanel_drivevE3msg>:
     31d:	44 72 69 76 65 20 63 6f 6d 6d 61 6e 64 73 3a 0a     Drive commands:.
     32d:	20 20 77 61 73 64 20 20 2d 20 43 6f 6e 74 72 6f       wasd  - Contro
     33d:	6c 20 72 6f 62 6f 74 0a 20 20 73 70 61 63 65 20     l robot.  space 
     34d:	2d 20 53 74 6f 70 0a 20 20 2d 3d 5f 2b 20 20 2d     - Stop.  -=_+  -
     35d:	20 41 64 6a 75 73 74 20 73 70 65 65 64 0a 20 20      Adjust speed.  
     36d:	57 41 53 44 20 20 2d 20 45 78 65 63 75 74 65 20     WASD  - Execute 
     37d:	64 69 73 74 61 6e 63 65 20 6d 6f 76 65 73 0a 20     distance moves. 
     38d:	20 63 09 20 2d 20 44 69 73 61 62 6c 65 20 6d 6f      c. - Disable mo
     39d:	74 6f 72 20 63 6f 6e 74 72 6f 6c 0a 20 20 50 70     tor control.  Pp
     3ad:	09 20 2d 20 45 6e 61 62 6c 65 2f 44 69 73 61 62     . - Enable/Disab
     3bd:	6c 65 20 6d 6f 74 6f 72 20 63 6f 6e 74 72 6f 6c     le motor control
     3cd:	20 64 65 62 75 67 0a 20 20 7a 5a 09 20 2d 20 4d      debug.  zZ. - M
     3dd:	6f 6f 6e 77 61 6c 6b 20 28 57 49 50 29 0a 20 20     oonwalk (WIP).  
     3ed:	71 09 20 2d 20 42 61 63 6b 00                       q. - Back.

000003f7 <_ZZ12controlpanelvE3msg>:
     3f7:	43 6f 6e 74 72 6f 6c 20 50 61 6e 65 6c 73 3a 0a     Control Panels:.
     407:	20 20 64 20 2d 20 44 72 69 76 65 0a 20 20 44 20       d - Drive.  D 
     417:	2d 20 44 65 70 6c 6f 79 0a 20 20 67 20 2d 20 47     - Deploy.  g - G
     427:	61 69 6e 73 0a 20 20 6d 20 2d 20 4d 6f 74 6f 72     ains.  m - Motor
     437:	0a 20 20 73 20 2d 20 53 65 6e 73 6f 72 0a 20 20     .  s - Sensor.  
     447:	6e 20 2d 20 4e 61 76 0a 20 20 74 20 2d 20 54 65     n - Nav.  t - Te
     457:	73 74 73 00                                         sts.

0000045b <_ZZ17controlpanel_initvE3__c>:
     45b:	53 74 61 72 74 69 6e 67 20 75 70 0a 00              Starting up..

00000468 <__c.2050>:
     468:	63 64 69 6e 6f 70 73 75 78 58 5b 00                 cdinopsuxX[.

00000474 <__ctors_end>:
     474:	11 24       	eor	r1, r1
     476:	1f be       	out	0x3f, r1	; 63
     478:	cf ef       	ldi	r28, 0xFF	; 255
     47a:	df e3       	ldi	r29, 0x3F	; 63
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	cd bf       	out	0x3d, r28	; 61
     480:	00 e0       	ldi	r16, 0x00	; 0
     482:	0c bf       	out	0x3c, r16	; 60
     484:	18 be       	out	0x38, r1	; 56
     486:	19 be       	out	0x39, r1	; 57
     488:	1a be       	out	0x3a, r1	; 58
     48a:	1b be       	out	0x3b, r1	; 59

0000048c <__do_copy_data>:
     48c:	10 e2       	ldi	r17, 0x20	; 32
     48e:	a0 e0       	ldi	r26, 0x00	; 0
     490:	b0 e2       	ldi	r27, 0x20	; 32
     492:	e4 e4       	ldi	r30, 0x44	; 68
     494:	f2 e2       	ldi	r31, 0x22	; 34
     496:	00 e0       	ldi	r16, 0x00	; 0
     498:	0b bf       	out	0x3b, r16	; 59
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <__do_copy_data+0x14>
     49c:	07 90       	elpm	r0, Z+
     49e:	0d 92       	st	X+, r0
     4a0:	ac 32       	cpi	r26, 0x2C	; 44
     4a2:	b1 07       	cpc	r27, r17
     4a4:	d9 f7       	brne	.-10     	; 0x49c <__do_copy_data+0x10>

000004a6 <__do_clear_bss>:
     4a6:	10 e2       	ldi	r17, 0x20	; 32
     4a8:	ac e2       	ldi	r26, 0x2C	; 44
     4aa:	b0 e2       	ldi	r27, 0x20	; 32
     4ac:	01 c0       	rjmp	.+2      	; 0x4b0 <.do_clear_bss_start>

000004ae <.do_clear_bss_loop>:
     4ae:	1d 92       	st	X+, r1

000004b0 <.do_clear_bss_start>:
     4b0:	a5 3d       	cpi	r26, 0xD5	; 213
     4b2:	b1 07       	cpc	r27, r17
     4b4:	e1 f7       	brne	.-8      	; 0x4ae <.do_clear_bss_loop>
     4b6:	0e 94 a4 05 	call	0xb48	; 0xb48 <main>
     4ba:	0c 94 20 11 	jmp	0x2240	; 0x2240 <_exit>

000004be <__bad_interrupt>:
     4be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004c2 <_Z17controlpanel_initv>:
#include <stdio.h>

static const char unknown_str[] PROGMEM = "Unknown. ? for help.";

void controlpanel_init() {
	printf_P(PSTR("Starting up\n"));
     4c2:	0f 92       	push	r0
     4c4:	0f 92       	push	r0
     4c6:	8b e5       	ldi	r24, 0x5B	; 91
     4c8:	94 e0       	ldi	r25, 0x04	; 4
     4ca:	ed b7       	in	r30, 0x3d	; 61
     4cc:	fe b7       	in	r31, 0x3e	; 62
     4ce:	81 83       	std	Z+1, r24	; 0x01
     4d0:	92 83       	std	Z+2, r25	; 0x02
     4d2:	0e 94 06 0b 	call	0x160c	; 0x160c <printf_P>
     4d6:	0f 90       	pop	r0
     4d8:	0f 90       	pop	r0
}
     4da:	08 95       	ret

000004dc <_Z19controlpanel_promptPKcS0_z>:
				break;
		}
	}
}

int controlpanel_prompt(const char *prompt, const char *fmt, ...) {
     4dc:	ef 92       	push	r14
     4de:	ff 92       	push	r15
     4e0:	0f 93       	push	r16
     4e2:	1f 93       	push	r17
     4e4:	df 93       	push	r29
     4e6:	cf 93       	push	r28
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	a0 97       	sbiw	r28, 0x20	; 32
     4ee:	cd bf       	out	0x3d, r28	; 61
     4f0:	de bf       	out	0x3e, r29	; 62
	va_list argp;
	va_start(argp, fmt);
     4f2:	0f 2e       	mov	r0, r31
     4f4:	fe e2       	ldi	r31, 0x2E	; 46
     4f6:	ef 2e       	mov	r14, r31
     4f8:	ff 24       	eor	r15, r15
     4fa:	f0 2d       	mov	r31, r0
     4fc:	ec 0e       	add	r14, r28
     4fe:	fd 1e       	adc	r15, r29

	printf_P(PSTR("%s# "), prompt);
     500:	00 d0       	rcall	.+0      	; 0x502 <_Z19controlpanel_promptPKcS0_z+0x26>
     502:	0f 92       	push	r0
     504:	8f ea       	ldi	r24, 0xAF	; 175
     506:	92 e0       	ldi	r25, 0x02	; 2
     508:	ed b7       	in	r30, 0x3d	; 61
     50a:	fe b7       	in	r31, 0x3e	; 62
     50c:	81 83       	std	Z+1, r24	; 0x01
     50e:	92 83       	std	Z+2, r25	; 0x02
     510:	8a a5       	ldd	r24, Y+42	; 0x2a
     512:	9b a5       	ldd	r25, Y+43	; 0x2b
     514:	83 83       	std	Z+3, r24	; 0x03
     516:	94 83       	std	Z+4, r25	; 0x04
     518:	0e 94 06 0b 	call	0x160c	; 0x160c <printf_P>

	char buf[32];
	fgets(buf, sizeof(buf), stdin);
     51c:	0f 90       	pop	r0
     51e:	0f 90       	pop	r0
     520:	0f 90       	pop	r0
     522:	0f 90       	pop	r0
     524:	40 91 cf 20 	lds	r20, 0x20CF
     528:	50 91 d0 20 	lds	r21, 0x20D0
     52c:	8e 01       	movw	r16, r28
     52e:	0f 5f       	subi	r16, 0xFF	; 255
     530:	1f 4f       	sbci	r17, 0xFF	; 255
     532:	c8 01       	movw	r24, r16
     534:	60 e2       	ldi	r22, 0x20	; 32
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	0e 94 a1 0a 	call	0x1542	; 0x1542 <fgets>
	return vsscanf(buf, fmt, argp);
     53c:	c8 01       	movw	r24, r16
     53e:	6c a5       	ldd	r22, Y+44	; 0x2c
     540:	7d a5       	ldd	r23, Y+45	; 0x2d
     542:	4e 2d       	mov	r20, r14
     544:	5f 2d       	mov	r21, r15
     546:	0e 94 14 09 	call	0x1228	; 0x1228 <_Z7vsscanfPKcS0_Pv>
}
     54a:	a0 96       	adiw	r28, 0x20	; 32
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	de bf       	out	0x3e, r29	; 62
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	08 95       	ret

0000055e <_Z23controlpanel_promptCharPKc>:

char controlpanel_promptChar(const char *prompt) {
     55e:	1f 93       	push	r17
	printf_P(PSTR("%s> "), prompt);
     560:	00 d0       	rcall	.+0      	; 0x562 <_Z23controlpanel_promptCharPKc+0x4>
     562:	0f 92       	push	r0
     564:	2a ea       	ldi	r18, 0xAA	; 170
     566:	32 e0       	ldi	r19, 0x02	; 2
     568:	ed b7       	in	r30, 0x3d	; 61
     56a:	fe b7       	in	r31, 0x3e	; 62
     56c:	21 83       	std	Z+1, r18	; 0x01
     56e:	32 83       	std	Z+2, r19	; 0x02
     570:	83 83       	std	Z+3, r24	; 0x03
     572:	94 83       	std	Z+4, r25	; 0x04
     574:	0e 94 06 0b 	call	0x160c	; 0x160c <printf_P>

	char ch = getchar();
     578:	0f 90       	pop	r0
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	80 91 cf 20 	lds	r24, 0x20CF
     584:	90 91 d0 20 	lds	r25, 0x20D0
     588:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
     58c:	18 2f       	mov	r17, r24
	putchar('\n');
     58e:	60 91 d1 20 	lds	r22, 0x20D1
     592:	70 91 d2 20 	lds	r23, 0x20D2
     596:	8a e0       	ldi	r24, 0x0A	; 10
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <fputc>
	return ch;
     59e:	81 2f       	mov	r24, r17
     5a0:	1f 91       	pop	r17
     5a2:	08 95       	ret

000005a4 <_Z18controlpanel_drivev>:
				break;
		}
	}
}

void controlpanel_drive() {
     5a4:	2f 92       	push	r2
     5a6:	3f 92       	push	r3
     5a8:	4f 92       	push	r4
     5aa:	5f 92       	push	r5
     5ac:	6f 92       	push	r6
     5ae:	7f 92       	push	r7
     5b0:	8f 92       	push	r8
     5b2:	9f 92       	push	r9
     5b4:	af 92       	push	r10
     5b6:	bf 92       	push	r11
     5b8:	cf 92       	push	r12
     5ba:	df 92       	push	r13
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
	float speed=20;
     5c8:	00 e0       	ldi	r16, 0x00	; 0
     5ca:	10 e0       	ldi	r17, 0x00	; 0
     5cc:	0f 2e       	mov	r0, r31
     5ce:	f0 ea       	ldi	r31, 0xA0	; 160
     5d0:	ff 2e       	mov	r15, r31
     5d2:	f0 2d       	mov	r31, r0
     5d4:	0f 2e       	mov	r0, r31
     5d6:	f1 e4       	ldi	r31, 0x41	; 65
     5d8:	ef 2e       	mov	r14, r31
     5da:	f0 2d       	mov	r31, r0
	while (true) {
		char ch=controlpanel_promptChar("Drive");
     5dc:	c0 e0       	ldi	r28, 0x00	; 0
     5de:	d0 e2       	ldi	r29, 0x20	; 32
					"  WASD  - Execute distance moves\n"
					"  c	 - Disable motor control\n"
					"  Pp	 - Enable/Disable motor control debug\n"
					"  zZ	 - Moonwalk (WIP)\n"
					"  q	 - Back";
				puts_P(msg);
     5e0:	0f 2e       	mov	r0, r31
     5e2:	fd e1       	ldi	r31, 0x1D	; 29
     5e4:	af 2e       	mov	r10, r31
     5e6:	f3 e0       	ldi	r31, 0x03	; 3
     5e8:	bf 2e       	mov	r11, r31
     5ea:	f0 2d       	mov	r31, r0
					//drive_bk(speed);
					_delay_ms(25);
					//drive_lturn(speed);
					_delay_ms(50);
				}
				speed = 20;
     5ec:	0f 2e       	mov	r0, r31
     5ee:	f0 ea       	ldi	r31, 0xA0	; 160
     5f0:	df 2e       	mov	r13, r31
     5f2:	f0 2d       	mov	r31, r0
     5f4:	0f 2e       	mov	r0, r31
     5f6:	f1 e4       	ldi	r31, 0x41	; 65
     5f8:	cf 2e       	mov	r12, r31
     5fa:	f0 2d       	mov	r31, r0
				printf_P(PSTR("Debug disabled\n"));
				break;

			case 'c':
				//motorcontrol_setEnabled(false);
				printf_P(PSTR("Motor control disabled\n"));
     5fc:	0f 2e       	mov	r0, r31
     5fe:	f9 ec       	ldi	r31, 0xC9	; 201
     600:	8f 2e       	mov	r8, r31
     602:	f2 e0       	ldi	r31, 0x02	; 2
     604:	9f 2e       	mov	r9, r31
     606:	f0 2d       	mov	r31, r0
				printf_P(PSTR("Speed: %f\n"), speed);
				break;

			case 'p':
				//motorcontrol_setDebug(false);
				printf_P(PSTR("Debug disabled\n"));
     608:	0f 2e       	mov	r0, r31
     60a:	f1 ee       	ldi	r31, 0xE1	; 225
     60c:	6f 2e       	mov	r6, r31
     60e:	f2 e0       	ldi	r31, 0x02	; 2
     610:	7f 2e       	mov	r7, r31
     612:	f0 2d       	mov	r31, r0
				speed += 10;
				printf_P(PSTR("Speed: %f\n"), speed);
				break;
			case '_':
				speed -= 10;
				printf_P(PSTR("Speed: %f\n"), speed);
     614:	0f 2e       	mov	r0, r31
     616:	f1 ef       	ldi	r31, 0xF1	; 241
     618:	4f 2e       	mov	r4, r31
     61a:	f2 e0       	ldi	r31, 0x02	; 2
     61c:	5f 2e       	mov	r5, r31
     61e:	f0 2d       	mov	r31, r0
				speed -= 2;
				printf_P(PSTR("Speed: %f\n"), speed);
				break;
			case '+':
				speed += 10;
				printf_P(PSTR("Speed: %f\n"), speed);
     620:	0f 2e       	mov	r0, r31
     622:	fc ef       	ldi	r31, 0xFC	; 252
     624:	2f 2e       	mov	r2, r31
     626:	f2 e0       	ldi	r31, 0x02	; 2
     628:	3f 2e       	mov	r3, r31
     62a:	f0 2d       	mov	r31, r0
}

void controlpanel_drive() {
	float speed=20;
	while (true) {
		char ch=controlpanel_promptChar("Drive");
     62c:	ce 01       	movw	r24, r28
     62e:	0e 94 af 02 	call	0x55e	; 0x55e <_Z23controlpanel_promptCharPKc>

		switch (ch) {
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	fc 01       	movw	r30, r24
     636:	b0 97       	sbiw	r30, 0x20	; 32
     638:	eb 35       	cpi	r30, 0x5B	; 91
     63a:	f1 05       	cpc	r31, r1
     63c:	08 f0       	brcs	.+2      	; 0x640 <_Z18controlpanel_drivev+0x9c>
     63e:	f8 c0       	rjmp	.+496    	; 0x830 <_Z18controlpanel_drivev+0x28c>
     640:	e6 50       	subi	r30, 0x06	; 6
     642:	ff 4f       	sbci	r31, 0xFF	; 255
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	05 90       	lpm	r0, Z+
     64a:	f4 91       	lpm	r31, Z+
     64c:	e0 2d       	mov	r30, r0
     64e:	19 94       	eijmp
				break;
			case 'D':
				//drive_rturnDeg(speed, 90);
				break;	
			case '=':
				speed += 2;
     650:	60 2f       	mov	r22, r16
     652:	71 2f       	mov	r23, r17
     654:	8f 2d       	mov	r24, r15
     656:	9e 2d       	mov	r25, r14
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	50 e4       	ldi	r21, 0x40	; 64
     660:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__addsf3>
     664:	06 2f       	mov	r16, r22
     666:	17 2f       	mov	r17, r23
     668:	f8 2e       	mov	r15, r24
     66a:	e9 2e       	mov	r14, r25
				printf_P(PSTR("Speed: %f\n"), speed);
     66c:	00 d0       	rcall	.+0      	; 0x66e <_Z18controlpanel_drivev+0xca>
     66e:	00 d0       	rcall	.+0      	; 0x670 <_Z18controlpanel_drivev+0xcc>
     670:	22 e1       	ldi	r18, 0x12	; 18
     672:	33 e0       	ldi	r19, 0x03	; 3
     674:	ed b7       	in	r30, 0x3d	; 61
     676:	fe b7       	in	r31, 0x3e	; 62
     678:	21 83       	std	Z+1, r18	; 0x01
     67a:	32 83       	std	Z+2, r19	; 0x02
     67c:	86 2f       	mov	r24, r22
     67e:	91 2f       	mov	r25, r17
     680:	af 2d       	mov	r26, r15
     682:	be 2d       	mov	r27, r14
     684:	83 83       	std	Z+3, r24	; 0x03
     686:	94 83       	std	Z+4, r25	; 0x04
     688:	a5 83       	std	Z+5, r26	; 0x05
     68a:	b6 83       	std	Z+6, r27	; 0x06
     68c:	0e 94 06 0b 	call	0x160c	; 0x160c <printf_P>
				break;
     690:	2d b7       	in	r18, 0x3d	; 61
     692:	3e b7       	in	r19, 0x3e	; 62
     694:	2a 5f       	subi	r18, 0xFA	; 250
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	2d bf       	out	0x3d, r18	; 61
     69a:	3e bf       	out	0x3e, r19	; 62
     69c:	c7 cf       	rjmp	.-114    	; 0x62c <_Z18controlpanel_drivev+0x88>
			case '-':
				speed -= 2;
     69e:	60 2f       	mov	r22, r16
     6a0:	71 2f       	mov	r23, r17
     6a2:	8f 2d       	mov	r24, r15
     6a4:	9e 2d       	mov	r25, r14
     6a6:	20 e0       	ldi	r18, 0x00	; 0
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	40 e0       	ldi	r20, 0x00	; 0
     6ac:	50 e4       	ldi	r21, 0x40	; 64
     6ae:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__subsf3>
     6b2:	06 2f       	mov	r16, r22
     6b4:	17 2f       	mov	r17, r23
     6b6:	f8 2e       	mov	r15, r24
     6b8:	e9 2e       	mov	r14, r25
				printf_P(PSTR("Speed: %f\n"), speed);
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <_Z18controlpanel_drivev+0x118>
     6bc:	00 d0       	rcall	.+0      	; 0x6be <_Z18controlpanel_drivev+0x11a>
     6be:	27 e0       	ldi	r18, 0x07	; 7
     6c0:	33 e0       	ldi	r19, 0x03	; 3
     6c2:	ed b7       	in	r30, 0x3d	; 61
     6c4:	fe b7       	in	r31, 0x3e	; 62
     6c6:	21 83       	std	Z+1, r18	; 0x01
     6c8:	32 83       	std	Z+2, r19	; 0x02
     6ca:	86 2f       	mov	r24, r22
     6cc:	91 2f       	mov	r25, r17
     6ce:	af 2d       	mov	r26, r15
     6d0:	be 2d       	mov	r27, r14
     6d2:	83 83       	std	Z+3, r24	; 0x03
     6d4:	94 83       	std	Z+4, r25	; 0x04
     6d6:	a5 83       	std	Z+5, r26	; 0x05
     6d8:	b6 83       	std	Z+6, r27	; 0x06
     6da:	0e 94 06 0b 	call	0x160c	; 0x160c <printf_P>
				break;
     6de:	2d b7       	in	r18, 0x3d	; 61
     6e0:	3e b7       	in	r19, 0x3e	; 62
     6e2:	2a 5f       	subi	r18, 0xFA	; 250
     6e4:	3f 4f       	sbci	r19, 0xFF	; 255
     6e6:	2d bf       	out	0x3d, r18	; 61
     6e8:	3e bf       	out	0x3e, r19	; 62
     6ea:	a0 cf       	rjmp	.-192    	; 0x62c <_Z18controlpanel_drivev+0x88>
			case '+':
				speed += 10;
     6ec:	60 2f       	mov	r22, r16
     6ee:	71 2f       	mov	r23, r17
     6f0:	8f 2d       	mov	r24, r15
     6f2:	9e 2d       	mov	r25, r14
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	40 e2       	ldi	r20, 0x20	; 32
     6fa:	51 e4       	ldi	r21, 0x41	; 65
     6fc:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__addsf3>
     700:	06 2f       	mov	r16, r22
     702:	17 2f       	mov	r17, r23
     704:	f8 2e       	mov	r15, r24
     706:	e9 2e       	mov	r14, r25
				printf_P(PSTR("Speed: %f\n"), speed);
     708:	00 d0       	rcall	.+0      	; 0x70a <_Z18controlpanel_drivev+0x166>
     70a:	00 d0       	rcall	.+0      	; 0x70c <_Z18controlpanel_drivev+0x168>
     70c:	ed b7       	in	r30, 0x3d	; 61
     70e:	fe b7       	in	r31, 0x3e	; 62
     710:	21 82       	std	Z+1, r2	; 0x01
     712:	32 82       	std	Z+2, r3	; 0x02
     714:	86 2f       	mov	r24, r22
     716:	91 2f       	mov	r25, r17
     718:	af 2d       	mov	r26, r15
     71a:	be 2d       	mov	r27, r14
     71c:	83 83       	std	Z+3, r24	; 0x03
     71e:	94 83       	std	Z+4, r25	; 0x04
     720:	a5 83       	std	Z+5, r26	; 0x05
     722:	b6 83       	std	Z+6, r27	; 0x06
     724:	0e 94 06 0b 	call	0x160c	; 0x160c <printf_P>
				break;
     728:	2d b7       	in	r18, 0x3d	; 61
     72a:	3e b7       	in	r19, 0x3e	; 62
     72c:	2a 5f       	subi	r18, 0xFA	; 250
     72e:	3f 4f       	sbci	r19, 0xFF	; 255
     730:	2d bf       	out	0x3d, r18	; 61
     732:	3e bf       	out	0x3e, r19	; 62
     734:	7b cf       	rjmp	.-266    	; 0x62c <_Z18controlpanel_drivev+0x88>
			case '_':
				speed -= 10;
     736:	60 2f       	mov	r22, r16
     738:	71 2f       	mov	r23, r17
     73a:	8f 2d       	mov	r24, r15
     73c:	9e 2d       	mov	r25, r14
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	40 e2       	ldi	r20, 0x20	; 32
     744:	51 e4       	ldi	r21, 0x41	; 65
     746:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__subsf3>
     74a:	06 2f       	mov	r16, r22
     74c:	17 2f       	mov	r17, r23
     74e:	f8 2e       	mov	r15, r24
     750:	e9 2e       	mov	r14, r25
				printf_P(PSTR("Speed: %f\n"), speed);
     752:	00 d0       	rcall	.+0      	; 0x754 <_Z18controlpanel_drivev+0x1b0>
     754:	00 d0       	rcall	.+0      	; 0x756 <_Z18controlpanel_drivev+0x1b2>
     756:	ed b7       	in	r30, 0x3d	; 61
     758:	fe b7       	in	r31, 0x3e	; 62
     75a:	41 82       	std	Z+1, r4	; 0x01
     75c:	52 82       	std	Z+2, r5	; 0x02
     75e:	86 2f       	mov	r24, r22
     760:	91 2f       	mov	r25, r17
     762:	af 2d       	mov	r26, r15
     764:	be 2d       	mov	r27, r14
     766:	83 83       	std	Z+3, r24	; 0x03
     768:	94 83       	std	Z+4, r25	; 0x04
     76a:	a5 83       	std	Z+5, r26	; 0x05
     76c:	b6 83       	std	Z+6, r27	; 0x06
     76e:	0e 94 06 0b 	call	0x160c	; 0x160c <printf_P>
				break;
     772:	2d b7       	in	r18, 0x3d	; 61
     774:	3e b7       	in	r19, 0x3e	; 62
     776:	2a 5f       	subi	r18, 0xFA	; 250
     778:	3f 4f       	sbci	r19, 0xFF	; 255
     77a:	2d bf       	out	0x3d, r18	; 61
     77c:	3e bf       	out	0x3e, r19	; 62
     77e:	56 cf       	rjmp	.-340    	; 0x62c <_Z18controlpanel_drivev+0x88>

			case 'p':
				//motorcontrol_setDebug(false);
				printf_P(PSTR("Debug disabled\n"));
     780:	0f 92       	push	r0
     782:	0f 92       	push	r0
     784:	ed b7       	in	r30, 0x3d	; 61
     786:	fe b7       	in	r31, 0x3e	; 62
     788:	61 82       	std	Z+1, r6	; 0x01
     78a:	72 82       	std	Z+2, r7	; 0x02
     78c:	0e 94 06 0b 	call	0x160c	; 0x160c <printf_P>
				break;
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	4b cf       	rjmp	.-362    	; 0x62c <_Z18controlpanel_drivev+0x88>

			case 'c':
				//motorcontrol_setEnabled(false);
				printf_P(PSTR("Motor control disabled\n"));
     796:	0f 92       	push	r0
     798:	0f 92       	push	r0
     79a:	ed b7       	in	r30, 0x3d	; 61
     79c:	fe b7       	in	r31, 0x3e	; 62
     79e:	81 82       	std	Z+1, r8	; 0x01
     7a0:	92 82       	std	Z+2, r9	; 0x02
     7a2:	0e 94 06 0b 	call	0x160c	; 0x160c <printf_P>
				break;
     7a6:	0f 90       	pop	r0
     7a8:	0f 90       	pop	r0
     7aa:	40 cf       	rjmp	.-384    	; 0x62c <_Z18controlpanel_drivev+0x88>
void controlpanel_drive() {
	float speed=20;
	while (true) {
		char ch=controlpanel_promptChar("Drive");

		switch (ch) {
     7ac:	84 e1       	ldi	r24, 0x14	; 20
     7ae:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7b0:	e9 e6       	ldi	r30, 0x69	; 105
     7b2:	f8 e1       	ldi	r31, 0x18	; 24
     7b4:	31 97       	sbiw	r30, 0x01	; 1
     7b6:	f1 f7       	brne	.-4      	; 0x7b4 <_Z18controlpanel_drivev+0x210>
     7b8:	00 c0       	rjmp	.+0      	; 0x7ba <_Z18controlpanel_drivev+0x216>
     7ba:	00 00       	nop
     7bc:	e3 ed       	ldi	r30, 0xD3	; 211
     7be:	f0 e3       	ldi	r31, 0x30	; 48
     7c0:	31 97       	sbiw	r30, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <_Z18controlpanel_drivev+0x21c>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <_Z18controlpanel_drivev+0x222>
     7c6:	00 00       	nop
     7c8:	e9 e6       	ldi	r30, 0x69	; 105
     7ca:	f8 e1       	ldi	r31, 0x18	; 24
     7cc:	31 97       	sbiw	r30, 0x01	; 1
     7ce:	f1 f7       	brne	.-4      	; 0x7cc <_Z18controlpanel_drivev+0x228>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <_Z18controlpanel_drivev+0x22e>
     7d2:	00 00       	nop
     7d4:	e3 ed       	ldi	r30, 0xD3	; 211
     7d6:	f0 e3       	ldi	r31, 0x30	; 48
     7d8:	31 97       	sbiw	r30, 0x01	; 1
     7da:	f1 f7       	brne	.-4      	; 0x7d8 <_Z18controlpanel_drivev+0x234>
     7dc:	00 c0       	rjmp	.+0      	; 0x7de <_Z18controlpanel_drivev+0x23a>
     7de:	00 00       	nop
     7e0:	01 97       	sbiw	r24, 0x01	; 1
				//motorcontrol_setEnabled(false);
				return;

			case 'z':			// Does moonwalk forwards
				speed = 40;
				for (int i = 0; i < 20; i++) {
     7e2:	31 f7       	brne	.-52     	; 0x7b0 <_Z18controlpanel_drivev+0x20c>
					_delay_ms(25);
					//drive_lturn(speed);
					_delay_ms(50);
				}
				//drive_stop();
				speed = 20;
     7e4:	00 e0       	ldi	r16, 0x00	; 0
     7e6:	10 e0       	ldi	r17, 0x00	; 0
     7e8:	fd 2c       	mov	r15, r13
     7ea:	ec 2c       	mov	r14, r12
     7ec:	1f cf       	rjmp	.-450    	; 0x62c <_Z18controlpanel_drivev+0x88>
void controlpanel_drive() {
	float speed=20;
	while (true) {
		char ch=controlpanel_promptChar("Drive");

		switch (ch) {
     7ee:	84 e1       	ldi	r24, 0x14	; 20
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	e9 e6       	ldi	r30, 0x69	; 105
     7f4:	f8 e1       	ldi	r31, 0x18	; 24
     7f6:	31 97       	sbiw	r30, 0x01	; 1
     7f8:	f1 f7       	brne	.-4      	; 0x7f6 <_Z18controlpanel_drivev+0x252>
     7fa:	00 c0       	rjmp	.+0      	; 0x7fc <_Z18controlpanel_drivev+0x258>
     7fc:	00 00       	nop
     7fe:	e3 ed       	ldi	r30, 0xD3	; 211
     800:	f0 e3       	ldi	r31, 0x30	; 48
     802:	31 97       	sbiw	r30, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <_Z18controlpanel_drivev+0x25e>
     806:	00 c0       	rjmp	.+0      	; 0x808 <_Z18controlpanel_drivev+0x264>
     808:	00 00       	nop
     80a:	e9 e6       	ldi	r30, 0x69	; 105
     80c:	f8 e1       	ldi	r31, 0x18	; 24
     80e:	31 97       	sbiw	r30, 0x01	; 1
     810:	f1 f7       	brne	.-4      	; 0x80e <_Z18controlpanel_drivev+0x26a>
     812:	00 c0       	rjmp	.+0      	; 0x814 <_Z18controlpanel_drivev+0x270>
     814:	00 00       	nop
     816:	e3 ed       	ldi	r30, 0xD3	; 211
     818:	f0 e3       	ldi	r31, 0x30	; 48
     81a:	31 97       	sbiw	r30, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <_Z18controlpanel_drivev+0x276>
     81e:	00 c0       	rjmp	.+0      	; 0x820 <_Z18controlpanel_drivev+0x27c>
     820:	00 00       	nop
     822:	01 97       	sbiw	r24, 0x01	; 1
				speed = 20;
				break;

			case 'Z':			// Does moonwalk backwards
				speed = 100;
				for (int i = 0; i < 20; i++) {
     824:	31 f7       	brne	.-52     	; 0x7f2 <_Z18controlpanel_drivev+0x24e>
					//drive_bk(speed);
					_delay_ms(25);
					//drive_lturn(speed);
					_delay_ms(50);
				}
				speed = 20;
     826:	00 e0       	ldi	r16, 0x00	; 0
     828:	10 e0       	ldi	r17, 0x00	; 0
     82a:	fd 2c       	mov	r15, r13
     82c:	ec 2c       	mov	r14, r12
     82e:	fe ce       	rjmp	.-516    	; 0x62c <_Z18controlpanel_drivev+0x88>
				printf_P(PSTR("Amax set to: %.2f\n"), amax);*/
				break;
			}

			default:
				puts_P(unknown_str);
     830:	84 eb       	ldi	r24, 0xB4	; 180
     832:	92 e0       	ldi	r25, 0x02	; 2
     834:	0e 94 26 0b 	call	0x164c	; 0x164c <puts_P>
				//drive_stop();
				break;
     838:	f9 ce       	rjmp	.-526    	; 0x62c <_Z18controlpanel_drivev+0x88>
					"  WASD  - Execute distance moves\n"
					"  c	 - Disable motor control\n"
					"  Pp	 - Enable/Disable motor control debug\n"
					"  zZ	 - Moonwalk (WIP)\n"
					"  q	 - Back";
				puts_P(msg);
     83a:	c5 01       	movw	r24, r10
     83c:	0e 94 26 0b 	call	0x164c	; 0x164c <puts_P>
     840:	f5 ce       	rjmp	.-534    	; 0x62c <_Z18controlpanel_drivev+0x88>
				break;
		}
	}
}
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	1f 91       	pop	r17
     848:	0f 91       	pop	r16
     84a:	ff 90       	pop	r15
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	9f 90       	pop	r9
     858:	8f 90       	pop	r8
     85a:	7f 90       	pop	r7
     85c:	6f 90       	pop	r6
     85e:	5f 90       	pop	r5
     860:	4f 90       	pop	r4
     862:	3f 90       	pop	r3
     864:	2f 90       	pop	r2
     866:	08 95       	ret

00000868 <_Z12controlpanelv>:

void controlpanel_init() {
	printf_P(PSTR("Starting up\n"));
}

bool controlpanel() {
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
	while (true) {
		switch (controlpanel_promptChar("Main")) {
     874:	c6 e0       	ldi	r28, 0x06	; 6
     876:	d0 e2       	ldi	r29, 0x20	; 32
					"  g - Gains\n"
					"  m - Motor\n"
					"  s - Sensor\n"
					"  n - Nav\n"
					"  t - Tests";
				puts_P(msg);
     878:	07 ef       	ldi	r16, 0xF7	; 247
     87a:	13 e0       	ldi	r17, 0x03	; 3
				controlpanel_drive();
				break;
			case 'G': // go
				return true;
			default:
				puts_P(unknown_str);
     87c:	0f 2e       	mov	r0, r31
     87e:	f4 eb       	ldi	r31, 0xB4	; 180
     880:	ef 2e       	mov	r14, r31
     882:	f2 e0       	ldi	r31, 0x02	; 2
     884:	ff 2e       	mov	r15, r31
     886:	f0 2d       	mov	r31, r0
	printf_P(PSTR("Starting up\n"));
}

bool controlpanel() {
	while (true) {
		switch (controlpanel_promptChar("Main")) {
     888:	ce 01       	movw	r24, r28
     88a:	0e 94 af 02 	call	0x55e	; 0x55e <_Z23controlpanel_promptCharPKc>
     88e:	87 34       	cpi	r24, 0x47	; 71
     890:	41 f0       	breq	.+16     	; 0x8a2 <_Z12controlpanelv+0x3a>
     892:	84 36       	cpi	r24, 0x64	; 100
     894:	19 f0       	breq	.+6      	; 0x89c <_Z12controlpanelv+0x34>
     896:	8f 33       	cpi	r24, 0x3F	; 63
     898:	61 f4       	brne	.+24     	; 0x8b2 <_Z12controlpanelv+0x4a>
     89a:	0f c0       	rjmp	.+30     	; 0x8ba <_Z12controlpanelv+0x52>
			case 'd':
				controlpanel_drive();
     89c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <_Z18controlpanel_drivev>
				break;
     8a0:	f3 cf       	rjmp	.-26     	; 0x888 <_Z12controlpanelv+0x20>
					"  t - Tests";
				puts_P(msg);
				break;
		}
	}
}
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	ff 90       	pop	r15
     8ae:	ef 90       	pop	r14
     8b0:	08 95       	ret
				controlpanel_drive();
				break;
			case 'G': // go
				return true;
			default:
				puts_P(unknown_str);
     8b2:	c7 01       	movw	r24, r14
     8b4:	0e 94 26 0b 	call	0x164c	; 0x164c <puts_P>
				break;
     8b8:	e7 cf       	rjmp	.-50     	; 0x888 <_Z12controlpanelv+0x20>
					"  g - Gains\n"
					"  m - Motor\n"
					"  s - Sensor\n"
					"  n - Nav\n"
					"  t - Tests";
				puts_P(msg);
     8ba:	c8 01       	movw	r24, r16
     8bc:	0e 94 26 0b 	call	0x164c	; 0x164c <puts_P>
     8c0:	e3 cf       	rjmp	.-58     	; 0x888 <_Z12controlpanelv+0x20>

000008c2 <_ZL3putcP6__file>:
//	} else {
//		batterycnt = 0;
//	}
}

static int put(char ch, FILE* file) {
     8c2:	1f 93       	push	r17
     8c4:	18 2f       	mov	r17, r24
	if(ch == '\n')
     8c6:	8a 30       	cpi	r24, 0x0A	; 10
     8c8:	19 f4       	brne	.+6      	; 0x8d0 <_ZL3putcP6__file+0xe>
		put('\r', file);
     8ca:	8d e0       	ldi	r24, 0x0D	; 13
     8cc:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZL3putcP6__file>

	while (!uart_put(UART_USB, ch)) { }
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	61 2f       	mov	r22, r17
     8d4:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z8uart_put7UARTNumc>
     8d8:	88 23       	and	r24, r24
     8da:	d1 f3       	breq	.-12     	; 0x8d0 <_ZL3putcP6__file+0xe>
	while (!uart_put(UART_XBEE, ch)) { }
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	61 2f       	mov	r22, r17
     8e0:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z8uart_put7UARTNumc>
     8e4:	88 23       	and	r24, r24
     8e6:	d1 f3       	breq	.-12     	; 0x8dc <_ZL3putcP6__file+0x1a>

	return 1;
}
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	1f 91       	pop	r17
     8ee:	08 95       	ret

000008f0 <_ZL3getP6__file>:

static int get(FILE* file) {
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
	int ch;
	do {
		ch = uart_get(UART_USB);
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	0e 94 26 07 	call	0xe4c	; 0xe4c <_Z8uart_get7UARTNum>
     8fe:	ec 01       	movw	r28, r24
		if (ch == -1)
     900:	2f ef       	ldi	r18, 0xFF	; 255
     902:	8f 3f       	cpi	r24, 0xFF	; 255
     904:	92 07       	cpc	r25, r18
     906:	41 f4       	brne	.+16     	; 0x918 <_ZL3getP6__file+0x28>
			ch = uart_get(UART_XBEE);
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	0e 94 26 07 	call	0xe4c	; 0xe4c <_Z8uart_get7UARTNum>
     90e:	ec 01       	movw	r28, r24
	return 1;
}

static int get(FILE* file) {
	int ch;
	do {
     910:	3f ef       	ldi	r19, 0xFF	; 255
     912:	8f 3f       	cpi	r24, 0xFF	; 255
     914:	93 07       	cpc	r25, r19
     916:	81 f3       	breq	.-32     	; 0x8f8 <_ZL3getP6__file+0x8>
		ch = uart_get(UART_USB);
		if (ch == -1)
			ch = uart_get(UART_XBEE);
	} while (ch == -1);

	if (ch == '\r')
     918:	cd 30       	cpi	r28, 0x0D	; 13
     91a:	d1 05       	cpc	r29, r1
     91c:	11 f4       	brne	.+4      	; 0x922 <_ZL3getP6__file+0x32>
		ch = '\n';
     91e:	ca e0       	ldi	r28, 0x0A	; 10
     920:	d0 e0       	ldi	r29, 0x00	; 0

	if (echo_enabled)
     922:	80 91 23 20 	lds	r24, 0x2023
     926:	88 23       	and	r24, r24
     928:	29 f0       	breq	.+10     	; 0x934 <_ZL3getP6__file+0x44>
		put(ch, NULL); // echo character
     92a:	8c 2f       	mov	r24, r28
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	0e 94 61 04 	call	0x8c2	; 0x8c2 <_ZL3putcP6__file>

	return ch;
}
     934:	9e 01       	movw	r18, r28
     936:	8c 2f       	mov	r24, r28
     938:	93 2f       	mov	r25, r19
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	ff 90       	pop	r15
     940:	ef 90       	pop	r14
     942:	08 95       	ret

00000944 <_Z10debug_initv>:
static int put(char ch, FILE* file);
static int get(FILE* file);
static FILE stdinout;

void debug_init() {
	PORTR.DIRSET = errorled_mask;
     944:	e0 ee       	ldi	r30, 0xE0	; 224
     946:	f7 e0       	ldi	r31, 0x07	; 7
     948:	82 e0       	ldi	r24, 0x02	; 2
     94a:	81 83       	std	Z+1, r24	; 0x01
	PORTR.OUTSET = errorled_mask;
     94c:	85 83       	std	Z+5, r24	; 0x05
	
	tim.CTRLA = TC_CLKSEL_DIV64_gc; // 32Mhz / 64 = .5 Mhz timer
     94e:	e0 e4       	ldi	r30, 0x40	; 64
     950:	f8 e0       	ldi	r31, 0x08	; 8
     952:	85 e0       	ldi	r24, 0x05	; 5
     954:	80 83       	st	Z, r24
	tim.PER = 0xFFFF; // 1Mhz / 65536 = 65ms
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	9f ef       	ldi	r25, 0xFF	; 255
     95a:	86 a3       	std	Z+38, r24	; 0x26
     95c:	97 a3       	std	Z+39, r25	; 0x27

	fdev_setup_stream(&stdinout, put, get, _FDEV_SETUP_RW);
     95e:	81 e6       	ldi	r24, 0x61	; 97
     960:	94 e0       	ldi	r25, 0x04	; 4
     962:	80 93 34 20 	sts	0x2034, r24
     966:	90 93 35 20 	sts	0x2035, r25
     96a:	88 e7       	ldi	r24, 0x78	; 120
     96c:	94 e0       	ldi	r25, 0x04	; 4
     96e:	80 93 36 20 	sts	0x2036, r24
     972:	90 93 37 20 	sts	0x2037, r25
     976:	83 e0       	ldi	r24, 0x03	; 3
     978:	80 93 2f 20 	sts	0x202F, r24
     97c:	10 92 38 20 	sts	0x2038, r1
     980:	10 92 39 20 	sts	0x2039, r1
	stdin = &stdinout;
     984:	8c e2       	ldi	r24, 0x2C	; 44
     986:	90 e2       	ldi	r25, 0x20	; 32
     988:	80 93 cf 20 	sts	0x20CF, r24
     98c:	90 93 d0 20 	sts	0x20D0, r25
	stdout = &stdinout;
     990:	80 93 d1 20 	sts	0x20D1, r24
     994:	90 93 d2 20 	sts	0x20D2, r25
}
     998:	08 95       	ret

0000099a <_Z17debug_setErrorLEDv>:

void debug_setErrorLED() {
	PORTR.OUTCLR = errorled_mask;
     99a:	82 e0       	ldi	r24, 0x02	; 2
     99c:	e0 ee       	ldi	r30, 0xE0	; 224
     99e:	f7 e0       	ldi	r31, 0x07	; 7
     9a0:	86 83       	std	Z+6, r24	; 0x06
}
     9a2:	08 95       	ret

000009a4 <_Z10debug_tickv>:
//		if (++batterycnt >= 100)
//			debug_halt("STOP USING THE ROBOT CHARGE ME BRO");
//	} else {
//		batterycnt = 0;
//	}
}
     9a4:	08 95       	ret

000009a6 <_Z16debug_resetTimerv>:

	return ch;
}

void debug_resetTimer() {
	tim.CNT = 0;
     9a6:	e0 e4       	ldi	r30, 0x40	; 64
     9a8:	f8 e0       	ldi	r31, 0x08	; 8
     9aa:	10 a2       	std	Z+32, r1	; 0x20
     9ac:	11 a2       	std	Z+33, r1	; 0x21
}
     9ae:	08 95       	ret

000009b0 <_Z14debug_getTimerv>:

uint16_t debug_getTimer() {
	return tim.CNT * 2;
     9b0:	e0 e4       	ldi	r30, 0x40	; 64
     9b2:	f8 e0       	ldi	r31, 0x08	; 8
     9b4:	20 a1       	ldd	r18, Z+32	; 0x20
     9b6:	31 a1       	ldd	r19, Z+33	; 0x21
     9b8:	22 0f       	add	r18, r18
     9ba:	33 1f       	adc	r19, r19
}
     9bc:	82 2f       	mov	r24, r18
     9be:	93 2f       	mov	r25, r19
     9c0:	08 95       	ret

000009c2 <_Z13debug_printlnPKcz>:

void debug_println(const char *fmt, ...) {
     9c2:	df 93       	push	r29
     9c4:	cf 93       	push	r28
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	c0 54       	subi	r28, 0x40	; 64
     9cc:	d0 40       	sbci	r29, 0x00	; 0
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	fe 01       	movw	r30, r28
     9d4:	ea 5b       	subi	r30, 0xBA	; 186
     9d6:	ff 4f       	sbci	r31, 0xFF	; 255
     9d8:	41 91       	ld	r20, Z+
     9da:	51 91       	ld	r21, Z+
	va_list ap;
	va_start(ap, fmt);

	char buf[64];
	unsigned int amt = vsnprintf(buf, sizeof(buf), fmt, ap);
     9dc:	ce 01       	movw	r24, r28
     9de:	01 96       	adiw	r24, 0x01	; 1
     9e0:	60 e4       	ldi	r22, 0x40	; 64
     9e2:	70 e0       	ldi	r23, 0x00	; 0
     9e4:	2e 2f       	mov	r18, r30
     9e6:	3f 2f       	mov	r19, r31
     9e8:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <vsnprintf>
     9ec:	28 2f       	mov	r18, r24
     9ee:	39 2f       	mov	r19, r25
     9f0:	c9 01       	movw	r24, r18
     9f2:	8d 33       	cpi	r24, 0x3D	; 61
     9f4:	91 05       	cpc	r25, r1
     9f6:	10 f0       	brcs	.+4      	; 0x9fc <_Z13debug_printlnPKcz+0x3a>
     9f8:	8c e3       	ldi	r24, 0x3C	; 60
     9fa:	90 e0       	ldi	r25, 0x00	; 0
	if (amt > sizeof(buf)-4)
		amt = sizeof(buf)-4;
	buf[amt++] = '\r';
     9fc:	be 01       	movw	r22, r28
     9fe:	6f 5f       	subi	r22, 0xFF	; 255
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	fb 01       	movw	r30, r22
     a04:	e8 0f       	add	r30, r24
     a06:	f9 1f       	adc	r31, r25
     a08:	2d e0       	ldi	r18, 0x0D	; 13
     a0a:	20 83       	st	Z, r18
     a0c:	01 96       	adiw	r24, 0x01	; 1
	buf[amt++] = '\n';
     a0e:	fb 01       	movw	r30, r22
     a10:	e8 0f       	add	r30, r24
     a12:	f9 1f       	adc	r31, r25
     a14:	2a e0       	ldi	r18, 0x0A	; 10
     a16:	20 83       	st	Z, r18
	buf[amt++] = 0;
     a18:	8c 0f       	add	r24, r28
     a1a:	9d 1f       	adc	r25, r29
     a1c:	fc 01       	movw	r30, r24
     a1e:	12 82       	std	Z+2, r1	; 0x02

	uart_puts(UART_USB, buf); // no resending logic, we drop bytes if buffer fills up
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 fe 06 	call	0xdfc	; 0xdfc <_Z9uart_puts7UARTNumPKc>

	va_end(ap);
}
     a26:	c0 5c       	subi	r28, 0xC0	; 192
     a28:	df 4f       	sbci	r29, 0xFF	; 255
     a2a:	cd bf       	out	0x3d, r28	; 61
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	cf 91       	pop	r28
     a30:	df 91       	pop	r29
     a32:	08 95       	ret

00000a34 <_Z20debug_setEchoEnabledb>:

void debug_setEchoEnabled(bool enabled) {
	echo_enabled = enabled;
     a34:	80 93 23 20 	sts	0x2023, r24
}
     a38:	08 95       	ret

00000a3a <_Z10debug_haltPKc>:

void debug_halt(const char *reason) {
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	ec 01       	movw	r28, r24
	tick_suspend();
     a44:	0e 94 65 06 	call	0xcca	; 0xcca <_Z12tick_suspendv>
	motor_allOff();
     a48:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z12motor_allOffv>

//	bool led=false;
	while (true) {
		printf_P("Halted like a boss. %s\n", reason);
     a4c:	0b e0       	ldi	r16, 0x0B	; 11
     a4e:	10 e2       	ldi	r17, 0x20	; 32
     a50:	00 d0       	rcall	.+0      	; 0xa52 <_Z10debug_haltPKc+0x18>
     a52:	0f 92       	push	r0
     a54:	ad b7       	in	r26, 0x3d	; 61
     a56:	be b7       	in	r27, 0x3e	; 62
     a58:	11 96       	adiw	r26, 0x01	; 1
     a5a:	0d 93       	st	X+, r16
     a5c:	1c 93       	st	X, r17
     a5e:	12 97       	sbiw	r26, 0x02	; 2
     a60:	13 96       	adiw	r26, 0x03	; 3
     a62:	cd 93       	st	X+, r28
     a64:	dc 93       	st	X, r29
     a66:	14 97       	sbiw	r26, 0x04	; 4
     a68:	0e 94 06 0b 	call	0x160c	; 0x160c <printf_P>
     a6c:	8f e3       	ldi	r24, 0x3F	; 63
     a6e:	9d e0       	ldi	r25, 0x0D	; 13
     a70:	a3 e0       	ldi	r26, 0x03	; 3
     a72:	81 50       	subi	r24, 0x01	; 1
     a74:	90 40       	sbci	r25, 0x00	; 0
     a76:	a0 40       	sbci	r26, 0x00	; 0
     a78:	e1 f7       	brne	.-8      	; 0xa72 <_Z10debug_haltPKc+0x38>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <_Z10debug_haltPKc+0x42>
     a7c:	00 00       	nop
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	e4 cf       	rjmp	.-56     	; 0xa50 <_Z10debug_haltPKc+0x16>

00000a88 <_Z10estop_initv>:
#define SIGINT0VECT PORTF_INT0_vect

static volatile bool estop = false;

void estop_init(){
	PORTF.DIRSET &=  0x0F;		 //Set pin 7 as input leave pwm pins alone
     a88:	e0 ea       	ldi	r30, 0xA0	; 160
     a8a:	f6 e0       	ldi	r31, 0x06	; 6
     a8c:	81 81       	ldd	r24, Z+1	; 0x01
     a8e:	8f 70       	andi	r24, 0x0F	; 15
     a90:	81 83       	std	Z+1, r24	; 0x01
	PORTF.INTCTRL	=TC_OVFINTLVL_HI_gc;		// EStop set to High Priority
     a92:	83 e0       	ldi	r24, 0x03	; 3
     a94:	81 87       	std	Z+9, r24	; 0x09
	PORTF.PIN7CTRL = PORT_ISC_FALLING_gc | PORT_OPC_PULLUP_gc;		//Set pin 7 to be pulled up and interupt to occur on the falling edge
     a96:	8a e1       	ldi	r24, 0x1A	; 26
     a98:	87 8b       	std	Z+23, r24	; 0x17
	PORTF.INT0MASK = 0x80;  //Set pin 7 in port F to be part of an interrupt
     a9a:	80 e8       	ldi	r24, 0x80	; 128
     a9c:	82 87       	std	Z+10, r24	; 0x0a
}
     a9e:	08 95       	ret

00000aa0 <_Z11estop_checkv>:

_Bool estop_check() {
	return estop;
     aa0:	80 91 3a 20 	lds	r24, 0x203A
}
     aa4:	08 95       	ret

00000aa6 <_Z13estop_killallv>:

void estop_killall() {
	motor_estop();
     aa6:	0e 94 47 06 	call	0xc8e	; 0xc8e <_Z11motor_estopv>
	debug_setErrorLED();
     aaa:	0e 94 cd 04 	call	0x99a	; 0x99a <_Z17debug_setErrorLEDv>
}
     aae:	08 95       	ret

00000ab0 <__vector_104>:

ISR(SIGINT0VECT){
     ab0:	1f 92       	push	r1
     ab2:	0f 92       	push	r0
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	0f 92       	push	r0
     ab8:	08 b6       	in	r0, 0x38	; 56
     aba:	0f 92       	push	r0
     abc:	09 b6       	in	r0, 0x39	; 57
     abe:	0f 92       	push	r0
     ac0:	0b b6       	in	r0, 0x3b	; 59
     ac2:	0f 92       	push	r0
     ac4:	11 24       	eor	r1, r1
     ac6:	18 be       	out	0x38, r1	; 56
     ac8:	19 be       	out	0x39, r1	; 57
     aca:	1b be       	out	0x3b, r1	; 59
     acc:	2f 93       	push	r18
     ace:	3f 93       	push	r19
     ad0:	4f 93       	push	r20
     ad2:	5f 93       	push	r21
     ad4:	6f 93       	push	r22
     ad6:	7f 93       	push	r23
     ad8:	8f 93       	push	r24
     ada:	9f 93       	push	r25
     adc:	af 93       	push	r26
     ade:	bf 93       	push	r27
     ae0:	ef 93       	push	r30
     ae2:	ff 93       	push	r31
	estop = true;
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	80 93 3a 20 	sts	0x203A, r24
	PORTF.INTFLAGS= 0x01; //Clear the flag by writing a one to it 
     aea:	e0 ea       	ldi	r30, 0xA0	; 160
     aec:	f6 e0       	ldi	r31, 0x06	; 6
     aee:	84 87       	std	Z+12, r24	; 0x0c
	estop_killall();
     af0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <_Z13estop_killallv>
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	bf 91       	pop	r27
     afa:	af 91       	pop	r26
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	7f 91       	pop	r23
     b02:	6f 91       	pop	r22
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	09 be       	out	0x39, r0	; 57
     b14:	0f 90       	pop	r0
     b16:	08 be       	out	0x38, r0	; 56
     b18:	0f 90       	pop	r0
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	0f 90       	pop	r0
     b1e:	1f 90       	pop	r1
     b20:	18 95       	reti

00000b22 <_Z4initv>:
#include "motor.h"
#include "estop.h"
#include "debug.h"

void init(){
	PMIC.CTRL = PMIC_HILVLEN_bm;	//Enable High level interrupts
     b22:	e0 ea       	ldi	r30, 0xA0	; 160
     b24:	f0 e0       	ldi	r31, 0x00	; 0
     b26:	84 e0       	ldi	r24, 0x04	; 4
     b28:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	//Enable Medium level interrupts
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	82 60       	ori	r24, 0x02	; 2
     b2e:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	//Enable Low level interrupts
     b30:	82 81       	ldd	r24, Z+2	; 0x02
     b32:	81 60       	ori	r24, 0x01	; 1
     b34:	82 83       	std	Z+2, r24	; 0x02
	
	sei();							//Clears global mask
     b36:	78 94       	sei
}
     b38:	08 95       	ret

00000b3a <_Z8init_allv>:

void init_all() {
	estop_init();
     b3a:	0e 94 44 05 	call	0xa88	; 0xa88 <_Z10estop_initv>
	debug_init();
     b3e:	0e 94 a2 04 	call	0x944	; 0x944 <_Z10debug_initv>
	motor_init();
     b42:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <_Z10motor_initv>
     b46:	08 95       	ret

00000b48 <main>:
#include "estop.h"


int main(void)
{
	init();
     b48:	0e 94 91 05 	call	0xb22	; 0xb22 <_Z4initv>
	init_all();
     b4c:	0e 94 9d 05 	call	0xb3a	; 0xb3a <_Z8init_allv>
     b50:	8f e3       	ldi	r24, 0x3F	; 63
     b52:	9d e0       	ldi	r25, 0x0D	; 13
     b54:	a3 e0       	ldi	r26, 0x03	; 3
     b56:	81 50       	subi	r24, 0x01	; 1
     b58:	90 40       	sbci	r25, 0x00	; 0
     b5a:	a0 40       	sbci	r26, 0x00	; 0
     b5c:	e1 f7       	brne	.-8      	; 0xb56 <main+0xe>
     b5e:	00 c0       	rjmp	.+0      	; 0xb60 <main+0x18>
     b60:	00 00       	nop
     b62:	ff cf       	rjmp	.-2      	; 0xb62 <main+0x1a>

00000b64 <_Z12motor_setPWMhi>:
	motor_setPWM(MOTOR_RIGHT, 512);
	motor_setPWM(MOTOR_LEFT, 512);
}

void motor_setPWM(uint8_t mot, int16_t PWM) {
	uint8_t in1pin_mask = _BV(2*port[mot]);
     b64:	e8 2f       	mov	r30, r24
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	ec 5d       	subi	r30, 0xDC	; 220
     b6a:	ff 4d       	sbci	r31, 0xDF	; 223
     b6c:	20 81       	ld	r18, Z
     b6e:	32 2f       	mov	r19, r18
     b70:	33 0f       	add	r19, r19
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <_Z12motor_setPWMhi+0x18>
     b78:	88 0f       	add	r24, r24
     b7a:	99 1f       	adc	r25, r25
     b7c:	3a 95       	dec	r19
     b7e:	e2 f7       	brpl	.-8      	; 0xb78 <_Z12motor_setPWMhi+0x14>
	uint8_t in2pin_mask = in1pin_mask << 1;
     b80:	98 2f       	mov	r25, r24
     b82:	99 0f       	add	r25, r25
	


	if (PWM == 0) {
     b84:	61 15       	cp	r22, r1
     b86:	71 05       	cpc	r23, r1
     b88:	79 f4       	brne	.+30     	; 0xba8 <_Z12motor_setPWMhi+0x44>
		PORTK.OUTCLR = in1pin_mask | in2pin_mask;
     b8a:	89 2b       	or	r24, r25
     b8c:	a0 e2       	ldi	r26, 0x20	; 32
     b8e:	b7 e0       	ldi	r27, 0x07	; 7
     b90:	16 96       	adiw	r26, 0x06	; 6
     b92:	8c 93       	st	X, r24
     b94:	16 97       	sbiw	r26, 0x06	; 6
		(&TCF0.CCABUF)[port[mot]] = 0;
     b96:	e2 2f       	mov	r30, r18
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	e8 5c       	subi	r30, 0xC8	; 200
     ba0:	f4 4f       	sbci	r31, 0xF4	; 244
     ba2:	10 82       	st	Z, r1
     ba4:	11 82       	std	Z+1, r1	; 0x01
     ba6:	08 95       	ret
	} else if (PWM > 0) {
     ba8:	16 16       	cp	r1, r22
     baa:	17 06       	cpc	r1, r23
     bac:	6c f4       	brge	.+26     	; 0xbc8 <_Z12motor_setPWMhi+0x64>
		PORTK.OUTCLR = in2pin_mask;
     bae:	e0 e2       	ldi	r30, 0x20	; 32
     bb0:	f7 e0       	ldi	r31, 0x07	; 7
     bb2:	96 83       	std	Z+6, r25	; 0x06
		PORTK.OUTSET = in1pin_mask;
     bb4:	85 83       	std	Z+5, r24	; 0x05
		(&TCF0.CCABUF)[port[mot]] = PWM;
     bb6:	e2 2f       	mov	r30, r18
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	ee 0f       	add	r30, r30
     bbc:	ff 1f       	adc	r31, r31
     bbe:	e8 5c       	subi	r30, 0xC8	; 200
     bc0:	f4 4f       	sbci	r31, 0xF4	; 244
     bc2:	60 83       	st	Z, r22
     bc4:	71 83       	std	Z+1, r23	; 0x01
     bc6:	08 95       	ret
	} else {
		PORTK.OUTCLR = in1pin_mask;
     bc8:	a0 e2       	ldi	r26, 0x20	; 32
     bca:	b7 e0       	ldi	r27, 0x07	; 7
     bcc:	16 96       	adiw	r26, 0x06	; 6
     bce:	8c 93       	st	X, r24
     bd0:	16 97       	sbiw	r26, 0x06	; 6
		PORTK.OUTSET = in2pin_mask;
     bd2:	15 96       	adiw	r26, 0x05	; 5
     bd4:	9c 93       	st	X, r25
     bd6:	15 97       	sbiw	r26, 0x05	; 5
		(&TCF0.CCABUF)[port[mot]] = -PWM;
     bd8:	e2 2f       	mov	r30, r18
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	ee 0f       	add	r30, r30
     bde:	ff 1f       	adc	r31, r31
     be0:	e8 5c       	subi	r30, 0xC8	; 200
     be2:	f4 4f       	sbci	r31, 0xF4	; 244
     be4:	70 95       	com	r23
     be6:	61 95       	neg	r22
     be8:	7f 4f       	sbci	r23, 0xFF	; 255
     bea:	60 83       	st	Z, r22
     bec:	71 83       	std	Z+1, r23	; 0x01
     bee:	08 95       	ret

00000bf0 <_Z10motor_initv>:


static const uint8_t port[4] = {2, 3, 1, 0}; // LRDF

void motor_init() {
	PORTK.DIRSET = ctrlpins_mask;
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	e0 e2       	ldi	r30, 0x20	; 32
     bf4:	f7 e0       	ldi	r31, 0x07	; 7
     bf6:	81 83       	std	Z+1, r24	; 0x01
	PORTF.DIRSET = PWMpins_mask;
     bf8:	8f e0       	ldi	r24, 0x0F	; 15
     bfa:	e0 ea       	ldi	r30, 0xA0	; 160
     bfc:	f6 e0       	ldi	r31, 0x06	; 6
     bfe:	81 83       	std	Z+1, r24	; 0x01

	TCF0.CTRLA = TC_CLKSEL_DIV1_gc; // no divider means timer runs at 32Mhz
     c00:	e0 e0       	ldi	r30, 0x00	; 0
     c02:	fb e0       	ldi	r31, 0x0B	; 11
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 83       	st	Z, r24
	TCF0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm | TC_WGMODE_SS_gc; // enable all capture compares, single slope PWM
     c08:	83 ef       	ldi	r24, 0xF3	; 243
     c0a:	81 83       	std	Z+1, r24	; 0x01
	TCF0.PER = 1023; // 32Mhz / ~1024 = 31.25 khz PWM freq
     c0c:	8f ef       	ldi	r24, 0xFF	; 255
     c0e:	93 e0       	ldi	r25, 0x03	; 3
     c10:	86 a3       	std	Z+38, r24	; 0x26
     c12:	97 a3       	std	Z+39, r25	; 0x27

	//motor_setPWM(MOTOR_FAN, motor_maxPWM);
	motor_setPWM(MOTOR_RIGHT, 512);
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	60 e0       	ldi	r22, 0x00	; 0
     c18:	72 e0       	ldi	r23, 0x02	; 2
     c1a:	0e 94 b2 05 	call	0xb64	; 0xb64 <_Z12motor_setPWMhi>
	motor_setPWM(MOTOR_LEFT, 512);
     c1e:	80 e0       	ldi	r24, 0x00	; 0
     c20:	60 e0       	ldi	r22, 0x00	; 0
     c22:	72 e0       	ldi	r23, 0x02	; 2
     c24:	0e 94 b2 05 	call	0xb64	; 0xb64 <_Z12motor_setPWMhi>
}
     c28:	08 95       	ret

00000c2a <_Z12motor_allOffv>:
	}
}

void motor_allOff() {
	for (int i=0; i<motor_count; i++) {
		(&TCF0.CCABUF)[i] = 0;
     c2a:	e0 e0       	ldi	r30, 0x00	; 0
     c2c:	fb e0       	ldi	r31, 0x0B	; 11
     c2e:	10 ae       	std	Z+56, r1	; 0x38
     c30:	11 ae       	std	Z+57, r1	; 0x39
     c32:	10 92 3a 0b 	sts	0x0B3A, r1
     c36:	10 92 3b 0b 	sts	0x0B3B, r1
     c3a:	10 92 3c 0b 	sts	0x0B3C, r1
     c3e:	10 92 3d 0b 	sts	0x0B3D, r1
     c42:	10 92 3e 0b 	sts	0x0B3E, r1
     c46:	10 92 3f 0b 	sts	0x0B3F, r1
	}
}
     c4a:	08 95       	ret

00000c4c <_Z12motor_getPWMh>:

int16_t motor_getPWM(uint8_t mot) {
	int16_t PWM = (&TCF0.CCA)[port[mot]]; // CCx registers are also adjacent
     c4c:	e8 2f       	mov	r30, r24
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	ec 5d       	subi	r30, 0xDC	; 220
     c52:	ff 4d       	sbci	r31, 0xDF	; 223
     c54:	80 81       	ld	r24, Z
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	fc 01       	movw	r30, r24
     c5e:	e8 5d       	subi	r30, 0xD8	; 216
     c60:	f4 4f       	sbci	r31, 0xF4	; 244
     c62:	20 81       	ld	r18, Z
     c64:	31 81       	ldd	r19, Z+1	; 0x01

	uint8_t in1pin_mask = _BV(2*port[mot]);
	if (!(PORTK.IN & in1pin_mask))
     c66:	e0 e2       	ldi	r30, 0x20	; 32
     c68:	f7 e0       	ldi	r31, 0x07	; 7
     c6a:	60 85       	ldd	r22, Z+8	; 0x08
}

int16_t motor_getPWM(uint8_t mot) {
	int16_t PWM = (&TCF0.CCA)[port[mot]]; // CCx registers are also adjacent

	uint8_t in1pin_mask = _BV(2*port[mot]);
     c6c:	41 e0       	ldi	r20, 0x01	; 1
     c6e:	50 e0       	ldi	r21, 0x00	; 0
     c70:	fa 01       	movw	r30, r20
     c72:	02 c0       	rjmp	.+4      	; 0xc78 <_Z12motor_getPWMh+0x2c>
     c74:	ee 0f       	add	r30, r30
     c76:	ff 1f       	adc	r31, r31
     c78:	8a 95       	dec	r24
     c7a:	e2 f7       	brpl	.-8      	; 0xc74 <_Z12motor_getPWMh+0x28>
     c7c:	cf 01       	movw	r24, r30
	if (!(PORTK.IN & in1pin_mask))
     c7e:	86 23       	and	r24, r22
     c80:	19 f4       	brne	.+6      	; 0xc88 <_Z12motor_getPWMh+0x3c>
		PWM = -PWM;
     c82:	30 95       	com	r19
     c84:	21 95       	neg	r18
     c86:	3f 4f       	sbci	r19, 0xFF	; 255

	return PWM;
}
     c88:	82 2f       	mov	r24, r18
     c8a:	93 2f       	mov	r25, r19
     c8c:	08 95       	ret

00000c8e <_Z11motor_estopv>:

void motor_estop() {
	motor_allOff();
     c8e:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z12motor_allOffv>
}
     c92:	08 95       	ret

00000c94 <_Z10motor_tickv>:

void motor_tick() {
	motor_setPWM(MOTOR_LEFT, 500);
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	64 ef       	ldi	r22, 0xF4	; 244
     c98:	71 e0       	ldi	r23, 0x01	; 1
     c9a:	0e 94 b2 05 	call	0xb64	; 0xb64 <_Z12motor_setPWMhi>
	motor_setPWM(MOTOR_RIGHT, 500);
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	64 ef       	ldi	r22, 0xF4	; 244
     ca2:	71 e0       	ldi	r23, 0x01	; 1
     ca4:	0e 94 b2 05 	call	0xb64	; 0xb64 <_Z12motor_setPWMhi>
     ca8:	08 95       	ret

00000caa <_Z11tick_resumev>:
	TCF1.PER = TICK_TIMMAX;			// TICK_TIMHZ / (TICK_TIMHZ / TICK_HZ) = TICK_HZ timer
	tick_resume();
}

void tick_resume() {
	TCF1.INTCTRLA = TC_OVFINTLVL_LO_gc; // overflow interrupt enabled at low priority, for running the ticks
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	e0 e4       	ldi	r30, 0x40	; 64
     cae:	fb e0       	ldi	r31, 0x0B	; 11
     cb0:	86 83       	std	Z+6, r24	; 0x06
}
     cb2:	08 95       	ret

00000cb4 <_Z9tick_initv>:
#include <avr/interrupt.h>

#define TIMOVFVEC TCF1_OVF_vect

void tick_init() {
	TCF1.CTRLA = TC_CLKSEL_DIV8_gc;	// 32 MHz clock / 8 = 4 MHz timer
     cb4:	e0 e4       	ldi	r30, 0x40	; 64
     cb6:	fb e0       	ldi	r31, 0x0B	; 11
     cb8:	84 e0       	ldi	r24, 0x04	; 4
     cba:	80 83       	st	Z, r24
	TCF1.PER = TICK_TIMMAX;			// TICK_TIMHZ / (TICK_TIMHZ / TICK_HZ) = TICK_HZ timer
     cbc:	80 e2       	ldi	r24, 0x20	; 32
     cbe:	9e e4       	ldi	r25, 0x4E	; 78
     cc0:	86 a3       	std	Z+38, r24	; 0x26
     cc2:	97 a3       	std	Z+39, r25	; 0x27
	tick_resume();
     cc4:	0e 94 55 06 	call	0xcaa	; 0xcaa <_Z11tick_resumev>
}
     cc8:	08 95       	ret

00000cca <_Z12tick_suspendv>:
void tick_resume() {
	TCF1.INTCTRLA = TC_OVFINTLVL_LO_gc; // overflow interrupt enabled at low priority, for running the ticks
}

void tick_suspend() {
	TCF1.INTCTRLA = 0;
     cca:	e0 e4       	ldi	r30, 0x40	; 64
     ccc:	fb e0       	ldi	r31, 0x0B	; 11
     cce:	16 82       	std	Z+6, r1	; 0x06
}
     cd0:	08 95       	ret

00000cd2 <__vector_114>:

ISR(TIMOVFVEC) {
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	08 b6       	in	r0, 0x38	; 56
     cdc:	0f 92       	push	r0
     cde:	09 b6       	in	r0, 0x39	; 57
     ce0:	0f 92       	push	r0
     ce2:	0b b6       	in	r0, 0x3b	; 59
     ce4:	0f 92       	push	r0
     ce6:	11 24       	eor	r1, r1
     ce8:	18 be       	out	0x38, r1	; 56
     cea:	19 be       	out	0x39, r1	; 57
     cec:	1b be       	out	0x3b, r1	; 59
     cee:	2f 93       	push	r18
     cf0:	3f 93       	push	r19
     cf2:	4f 93       	push	r20
     cf4:	5f 93       	push	r21
     cf6:	6f 93       	push	r22
     cf8:	7f 93       	push	r23
     cfa:	8f 93       	push	r24
     cfc:	9f 93       	push	r25
     cfe:	af 93       	push	r26
     d00:	bf 93       	push	r27
     d02:	ef 93       	push	r30
     d04:	ff 93       	push	r31
	if (estop_check()) {		// If estopped, run estops
     d06:	0e 94 50 05 	call	0xaa0	; 0xaa0 <_Z11estop_checkv>
     d0a:	88 23       	and	r24, r24
     d0c:	19 f0       	breq	.+6      	; 0xd14 <__vector_114+0x42>
		motor_estop();
     d0e:	0e 94 47 06 	call	0xc8e	; 0xc8e <_Z11motor_estopv>
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <__vector_114+0x46>
	} else {					// Else, run normal ticks
		motor_tick();
     d14:	0e 94 4a 06 	call	0xc94	; 0xc94 <_Z10motor_tickv>
	}	
     d18:	ff 91       	pop	r31
     d1a:	ef 91       	pop	r30
     d1c:	bf 91       	pop	r27
     d1e:	af 91       	pop	r26
     d20:	9f 91       	pop	r25
     d22:	8f 91       	pop	r24
     d24:	7f 91       	pop	r23
     d26:	6f 91       	pop	r22
     d28:	5f 91       	pop	r21
     d2a:	4f 91       	pop	r20
     d2c:	3f 91       	pop	r19
     d2e:	2f 91       	pop	r18
     d30:	0f 90       	pop	r0
     d32:	0b be       	out	0x3b, r0	; 59
     d34:	0f 90       	pop	r0
     d36:	09 be       	out	0x39, r0	; 57
     d38:	0f 90       	pop	r0
     d3a:	08 be       	out	0x38, r0	; 56
     d3c:	0f 90       	pop	r0
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	0f 90       	pop	r0
     d42:	1f 90       	pop	r1
     d44:	18 95       	reti

00000d46 <_Z9uart_initv>:

static UARTData uartdata[2];
static USART_t *const uarts[2] = { &USARTC0, &USARTE1 };

void uart_init() {
	uartport_usb.OUTSET = _BV(txpin_usb); // make pin high to avoid transmitting a false start bit on startup
     d46:	e0 e4       	ldi	r30, 0x40	; 64
     d48:	f6 e0       	ldi	r31, 0x06	; 6
     d4a:	88 e0       	ldi	r24, 0x08	; 8
     d4c:	85 83       	std	Z+5, r24	; 0x05
	uartport_usb.DIRSET = _BV(txpin_usb);
     d4e:	81 83       	std	Z+1, r24	; 0x01

	uart_usb.CTRLA = USART_RXCINTLVL_LO_gc;
     d50:	e0 ea       	ldi	r30, 0xA0	; 160
     d52:	f8 e0       	ldi	r31, 0x08	; 8
     d54:	90 e1       	ldi	r25, 0x10	; 16
     d56:	93 83       	std	Z+3, r25	; 0x03
	uart_usb.CTRLB = USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm;
     d58:	8c e1       	ldi	r24, 0x1C	; 28
     d5a:	84 83       	std	Z+4, r24	; 0x04
	uart_usb.CTRLC = USART_CHSIZE_8BIT_gc;
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	85 83       	std	Z+5, r24	; 0x05
	uart_usb.BAUDCTRLA = bsel_usb & 0xFF;
     d60:	2e e6       	ldi	r18, 0x6E	; 110
     d62:	26 83       	std	Z+6, r18	; 0x06
	uart_usb.BAUDCTRLB = (bscale_usb << USART_BSCALE_gp) | (bsel_usb >> 8);
     d64:	28 ea       	ldi	r18, 0xA8	; 168
     d66:	27 83       	std	Z+7, r18	; 0x07

	uartport_xbee.OUTSET = _BV(txpin_xbee);
     d68:	e0 e8       	ldi	r30, 0x80	; 128
     d6a:	f6 e0       	ldi	r31, 0x06	; 6
     d6c:	20 e8       	ldi	r18, 0x80	; 128
     d6e:	25 83       	std	Z+5, r18	; 0x05
	uartport_xbee.DIRSET = _BV(txpin_xbee);
     d70:	21 83       	std	Z+1, r18	; 0x01

	uart_xbee.CTRLA = USART_RXCINTLVL_LO_gc;
     d72:	e0 eb       	ldi	r30, 0xB0	; 176
     d74:	fa e0       	ldi	r31, 0x0A	; 10
     d76:	93 83       	std	Z+3, r25	; 0x03
	uart_xbee.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     d78:	98 e1       	ldi	r25, 0x18	; 24
     d7a:	94 83       	std	Z+4, r25	; 0x04
	uart_xbee.CTRLC = USART_CHSIZE_8BIT_gc;
     d7c:	85 83       	std	Z+5, r24	; 0x05
	uart_xbee.BAUDCTRLA = bsel_xbee & 0xFF;
     d7e:	85 e0       	ldi	r24, 0x05	; 5
     d80:	86 83       	std	Z+6, r24	; 0x06
	uart_xbee.BAUDCTRLB = (bscale_xbee << USART_BSCALE_gp) | (bsel_xbee >> 8);
     d82:	8d ec       	ldi	r24, 0xCD	; 205
     d84:	87 83       	std	Z+7, r24	; 0x07

}
     d86:	08 95       	ret

00000d88 <_Z8uart_put7UARTNumc>:

bool uart_put(UARTNum num, char ch) {
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
	UARTData &data = uartdata[num];
     d8c:	90 e0       	ldi	r25, 0x00	; 0
	USART_t &usart = *uarts[num];
     d8e:	fc 01       	movw	r30, r24
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	e8 5d       	subi	r30, 0xD8	; 216
     d96:	ff 4d       	sbci	r31, 0xDF	; 223
     d98:	01 90       	ld	r0, Z+
     d9a:	f0 81       	ld	r31, Z
     d9c:	e0 2d       	mov	r30, r0

	if (data.outbuf_pos >= sizeof(data.outbuf))
     d9e:	2a e4       	ldi	r18, 0x4A	; 74
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	82 9f       	mul	r24, r18
     da4:	d0 01       	movw	r26, r0
     da6:	83 9f       	mul	r24, r19
     da8:	b0 0d       	add	r27, r0
     daa:	92 9f       	mul	r25, r18
     dac:	b0 0d       	add	r27, r0
     dae:	11 24       	eor	r1, r1
     db0:	a5 58       	subi	r26, 0x85	; 133
     db2:	bf 4d       	sbci	r27, 0xDF	; 223
     db4:	2c 91       	ld	r18, X
     db6:	20 34       	cpi	r18, 0x40	; 64
     db8:	e8 f4       	brcc	.+58     	; 0xdf4 <_Z8uart_put7UARTNumc+0x6c>
		return false;

	usart.CTRLA &= ~USART_DREINTLVL_gm;
     dba:	23 81       	ldd	r18, Z+3	; 0x03
     dbc:	2c 7f       	andi	r18, 0xFC	; 252
     dbe:	23 83       	std	Z+3, r18	; 0x03
	data.outbuf[data.outbuf_pos++] = ch;
     dc0:	4a e4       	ldi	r20, 0x4A	; 74
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	84 9f       	mul	r24, r20
     dc6:	90 01       	movw	r18, r0
     dc8:	85 9f       	mul	r24, r21
     dca:	30 0d       	add	r19, r0
     dcc:	94 9f       	mul	r25, r20
     dce:	30 0d       	add	r19, r0
     dd0:	11 24       	eor	r1, r1
     dd2:	d9 01       	movw	r26, r18
     dd4:	a5 58       	subi	r26, 0x85	; 133
     dd6:	bf 4d       	sbci	r27, 0xDF	; 223
     dd8:	8c 91       	ld	r24, X
     dda:	28 0f       	add	r18, r24
     ddc:	31 1d       	adc	r19, r1
     dde:	e9 01       	movw	r28, r18
     de0:	c5 5c       	subi	r28, 0xC5	; 197
     de2:	df 4d       	sbci	r29, 0xDF	; 223
     de4:	68 83       	st	Y, r22
     de6:	8f 5f       	subi	r24, 0xFF	; 255
     de8:	8c 93       	st	X, r24
	usart.CTRLA |= USART_DREINTLVL_LO_gc; // enable transmit interrupt
     dea:	83 81       	ldd	r24, Z+3	; 0x03
     dec:	81 60       	ori	r24, 0x01	; 1
     dee:	83 83       	std	Z+3, r24	; 0x03
	return true;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <_Z8uart_put7UARTNumc+0x6e>
bool uart_put(UARTNum num, char ch) {
	UARTData &data = uartdata[num];
	USART_t &usart = *uarts[num];

	if (data.outbuf_pos >= sizeof(data.outbuf))
		return false;
     df4:	80 e0       	ldi	r24, 0x00	; 0

	usart.CTRLA &= ~USART_DREINTLVL_gm;
	data.outbuf[data.outbuf_pos++] = ch;
	usart.CTRLA |= USART_DREINTLVL_LO_gc; // enable transmit interrupt
	return true;
}
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <_Z9uart_puts7UARTNumPKc>:

int uart_puts(UARTNum num, const char *buf) {
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	f8 2e       	mov	r15, r24
     e0a:	fb 01       	movw	r30, r22
	int ctr=0;
	while (*buf) {
     e0c:	60 81       	ld	r22, Z
     e0e:	66 23       	and	r22, r22
     e10:	89 f0       	breq	.+34     	; 0xe34 <_Z9uart_puts7UARTNumPKc+0x38>
	data.outbuf[data.outbuf_pos++] = ch;
	usart.CTRLA |= USART_DREINTLVL_LO_gc; // enable transmit interrupt
	return true;
}

int uart_puts(UARTNum num, const char *buf) {
     e12:	8f 01       	movw	r16, r30
     e14:	0f 5f       	subi	r16, 0xFF	; 255
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
	int ctr=0;
     e18:	c0 e0       	ldi	r28, 0x00	; 0
     e1a:	d0 e0       	ldi	r29, 0x00	; 0
	while (*buf) {
		if (!uart_put(num, *buf++))
     e1c:	8f 2d       	mov	r24, r15
     e1e:	0e 94 c4 06 	call	0xd88	; 0xd88 <_Z8uart_put7UARTNumc>
     e22:	88 23       	and	r24, r24
     e24:	49 f0       	breq	.+18     	; 0xe38 <_Z9uart_puts7UARTNumPKc+0x3c>
			break;
		ctr++;
     e26:	21 96       	adiw	r28, 0x01	; 1
	return true;
}

int uart_puts(UARTNum num, const char *buf) {
	int ctr=0;
	while (*buf) {
     e28:	f8 01       	movw	r30, r16
     e2a:	61 91       	ld	r22, Z+
     e2c:	8f 01       	movw	r16, r30
     e2e:	66 23       	and	r22, r22
     e30:	a9 f7       	brne	.-22     	; 0xe1c <_Z9uart_puts7UARTNumPKc+0x20>
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <_Z9uart_puts7UARTNumPKc+0x3c>
	usart.CTRLA |= USART_DREINTLVL_LO_gc; // enable transmit interrupt
	return true;
}

int uart_puts(UARTNum num, const char *buf) {
	int ctr=0;
     e34:	c0 e0       	ldi	r28, 0x00	; 0
     e36:	d0 e0       	ldi	r29, 0x00	; 0
		if (!uart_put(num, *buf++))
			break;
		ctr++;
	}
	return ctr;
}
     e38:	7e 01       	movw	r14, r28
     e3a:	8c 2f       	mov	r24, r28
     e3c:	9f 2d       	mov	r25, r15
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	08 95       	ret

00000e4c <_Z8uart_get7UARTNum>:

int uart_get(UARTNum num) {
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
     e50:	df 93       	push	r29
	UARTData &data = uartdata[num];
     e52:	90 e0       	ldi	r25, 0x00	; 0
	USART_t &usart = *uarts[num];
     e54:	fc 01       	movw	r30, r24
     e56:	ee 0f       	add	r30, r30
     e58:	ff 1f       	adc	r31, r31
     e5a:	e8 5d       	subi	r30, 0xD8	; 216
     e5c:	ff 4d       	sbci	r31, 0xDF	; 223
     e5e:	c0 81       	ld	r28, Z
     e60:	d1 81       	ldd	r29, Z+1	; 0x01

	if (data.inbuf_pos == 0)
     e62:	2a e4       	ldi	r18, 0x4A	; 74
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	82 9f       	mul	r24, r18
     e68:	f0 01       	movw	r30, r0
     e6a:	83 9f       	mul	r24, r19
     e6c:	f0 0d       	add	r31, r0
     e6e:	92 9f       	mul	r25, r18
     e70:	f0 0d       	add	r31, r0
     e72:	11 24       	eor	r1, r1
     e74:	ec 57       	subi	r30, 0x7C	; 124
     e76:	ff 4d       	sbci	r31, 0xDF	; 223
     e78:	20 81       	ld	r18, Z
     e7a:	22 23       	and	r18, r18
     e7c:	41 f1       	breq	.+80     	; 0xece <_Z8uart_get7UARTNum+0x82>
		return -1;

	usart.CTRLA &= ~USART_RXCINTLVL_gm;
     e7e:	2b 81       	ldd	r18, Y+3	; 0x03
     e80:	2f 7c       	andi	r18, 0xCF	; 207
     e82:	2b 83       	std	Y+3, r18	; 0x03
	char ch = data.inbuf[0];
     e84:	4a e4       	ldi	r20, 0x4A	; 74
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	84 9f       	mul	r24, r20
     e8a:	90 01       	movw	r18, r0
     e8c:	85 9f       	mul	r24, r21
     e8e:	30 0d       	add	r19, r0
     e90:	94 9f       	mul	r25, r20
     e92:	30 0d       	add	r19, r0
     e94:	11 24       	eor	r1, r1
     e96:	f9 01       	movw	r30, r18
     e98:	e5 5c       	subi	r30, 0xC5	; 197
     e9a:	ff 4d       	sbci	r31, 0xDF	; 223
     e9c:	df 01       	movw	r26, r30
     e9e:	af 5b       	subi	r26, 0xBF	; 191
     ea0:	bf 4f       	sbci	r27, 0xFF	; 255
     ea2:	1c 91       	ld	r17, X
	data.inbuf_pos--;
     ea4:	e7 5b       	subi	r30, 0xB7	; 183
     ea6:	ff 4f       	sbci	r31, 0xFF	; 255
     ea8:	80 81       	ld	r24, Z
     eaa:	81 50       	subi	r24, 0x01	; 1
     eac:	80 83       	st	Z, r24
	memmove(data.inbuf, data.inbuf+1, data.inbuf_pos);
     eae:	40 81       	ld	r20, Z
     eb0:	c9 01       	movw	r24, r18
     eb2:	84 58       	subi	r24, 0x84	; 132
     eb4:	9f 4d       	sbci	r25, 0xDF	; 223
     eb6:	bc 01       	movw	r22, r24
     eb8:	6f 5f       	subi	r22, 0xFF	; 255
     eba:	7f 4f       	sbci	r23, 0xFF	; 255
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	0e 94 4d 0a 	call	0x149a	; 0x149a <memmove>
	usart.CTRLA |= USART_RXCINTLVL_gm;
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	80 63       	ori	r24, 0x30	; 48
     ec6:	8b 83       	std	Y+3, r24	; 0x03

	return ch;
     ec8:	21 2f       	mov	r18, r17
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <_Z8uart_get7UARTNum+0x86>
int uart_get(UARTNum num) {
	UARTData &data = uartdata[num];
	USART_t &usart = *uarts[num];

	if (data.inbuf_pos == 0)
		return -1;
     ece:	2f ef       	ldi	r18, 0xFF	; 255
     ed0:	3f ef       	ldi	r19, 0xFF	; 255
	data.inbuf_pos--;
	memmove(data.inbuf, data.inbuf+1, data.inbuf_pos);
	usart.CTRLA |= USART_RXCINTLVL_gm;

	return ch;
}
     ed2:	82 2f       	mov	r24, r18
     ed4:	93 2f       	mov	r25, r19
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	08 95       	ret

00000ede <_Z10uart_putch7UARTNumc>:

void uart_putch(UARTNum num, char ch) {
	UARTData &data = uartdata[num];
     ede:	90 e0       	ldi	r25, 0x00	; 0

	if (data.inbuf_pos >= sizeof(data.inbuf))
     ee0:	2a e4       	ldi	r18, 0x4A	; 74
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	82 9f       	mul	r24, r18
     ee6:	f0 01       	movw	r30, r0
     ee8:	83 9f       	mul	r24, r19
     eea:	f0 0d       	add	r31, r0
     eec:	92 9f       	mul	r25, r18
     eee:	f0 0d       	add	r31, r0
     ef0:	11 24       	eor	r1, r1
     ef2:	ec 57       	subi	r30, 0x7C	; 124
     ef4:	ff 4d       	sbci	r31, 0xDF	; 223
     ef6:	20 81       	ld	r18, Z
     ef8:	28 30       	cpi	r18, 0x08	; 8
     efa:	c0 f4       	brcc	.+48     	; 0xf2c <_Z10uart_putch7UARTNumc+0x4e>
		return;

	data.inbuf[data.inbuf_pos++] = ch;	
     efc:	4a e4       	ldi	r20, 0x4A	; 74
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	84 9f       	mul	r24, r20
     f02:	90 01       	movw	r18, r0
     f04:	85 9f       	mul	r24, r21
     f06:	30 0d       	add	r19, r0
     f08:	94 9f       	mul	r25, r20
     f0a:	30 0d       	add	r19, r0
     f0c:	11 24       	eor	r1, r1
     f0e:	c9 01       	movw	r24, r18
     f10:	85 5c       	subi	r24, 0xC5	; 197
     f12:	9f 4d       	sbci	r25, 0xDF	; 223
     f14:	fc 01       	movw	r30, r24
     f16:	e7 5b       	subi	r30, 0xB7	; 183
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	20 81       	ld	r18, Z
     f1c:	82 0f       	add	r24, r18
     f1e:	91 1d       	adc	r25, r1
     f20:	dc 01       	movw	r26, r24
     f22:	af 5b       	subi	r26, 0xBF	; 191
     f24:	bf 4f       	sbci	r27, 0xFF	; 255
     f26:	6c 93       	st	X, r22
     f28:	2f 5f       	subi	r18, 0xFF	; 255
     f2a:	20 83       	st	Z, r18
     f2c:	08 95       	ret

00000f2e <__vector_26>:
	} else {
		uarts[num]->CTRLA &= ~USART_DREINTLVL_gm; // disable transmit interrupt
	}
}

ISR(TXVEC_USB) {
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	08 b6       	in	r0, 0x38	; 56
     f38:	0f 92       	push	r0
     f3a:	09 b6       	in	r0, 0x39	; 57
     f3c:	0f 92       	push	r0
     f3e:	0b b6       	in	r0, 0x3b	; 59
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	18 be       	out	0x38, r1	; 56
     f46:	19 be       	out	0x39, r1	; 57
     f48:	1b be       	out	0x3b, r1	; 59
     f4a:	2f 93       	push	r18
     f4c:	3f 93       	push	r19
     f4e:	4f 93       	push	r20
     f50:	5f 93       	push	r21
     f52:	6f 93       	push	r22
     f54:	7f 93       	push	r23
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	af 93       	push	r26
     f5c:	bf 93       	push	r27
     f5e:	ef 93       	push	r30
     f60:	ff 93       	push	r31
}

static void transmit(UARTNum num) {
	UARTData &data = uartdata[num];

	if (data.outbuf_pos > 0) {
     f62:	80 91 7b 20 	lds	r24, 0x207B
     f66:	88 23       	and	r24, r24
     f68:	21 f1       	breq	.+72     	; 0xfb2 <__vector_26+0x84>
		uarts[num]->DATA = data.outbuf[0];
     f6a:	80 91 3b 20 	lds	r24, 0x203B
     f6e:	80 93 a0 08 	sts	0x08A0, r24
		data.outbuf_pos--;
     f72:	80 91 7b 20 	lds	r24, 0x207B
     f76:	81 50       	subi	r24, 0x01	; 1
     f78:	80 93 7b 20 	sts	0x207B, r24

		if (data.outbuf_pos > 0)
     f7c:	80 91 7b 20 	lds	r24, 0x207B
     f80:	88 23       	and	r24, r24
     f82:	f1 f4       	brne	.+60     	; 0xfc0 <__vector_26+0x92>
	}
}

ISR(TXVEC_USB) {
	transmit(UART_USB);
}
     f84:	ff 91       	pop	r31
     f86:	ef 91       	pop	r30
     f88:	bf 91       	pop	r27
     f8a:	af 91       	pop	r26
     f8c:	9f 91       	pop	r25
     f8e:	8f 91       	pop	r24
     f90:	7f 91       	pop	r23
     f92:	6f 91       	pop	r22
     f94:	5f 91       	pop	r21
     f96:	4f 91       	pop	r20
     f98:	3f 91       	pop	r19
     f9a:	2f 91       	pop	r18
     f9c:	0f 90       	pop	r0
     f9e:	0b be       	out	0x3b, r0	; 59
     fa0:	0f 90       	pop	r0
     fa2:	09 be       	out	0x39, r0	; 57
     fa4:	0f 90       	pop	r0
     fa6:	08 be       	out	0x38, r0	; 56
     fa8:	0f 90       	pop	r0
     faa:	0f be       	out	0x3f, r0	; 63
     fac:	0f 90       	pop	r0
     fae:	1f 90       	pop	r1
     fb0:	18 95       	reti
		data.outbuf_pos--;

		if (data.outbuf_pos > 0)
			memmove(data.outbuf, data.outbuf+1, data.outbuf_pos);
	} else {
		uarts[num]->CTRLA &= ~USART_DREINTLVL_gm; // disable transmit interrupt
     fb2:	80 91 a3 08 	lds	r24, 0x08A3
     fb6:	8c 7f       	andi	r24, 0xFC	; 252
     fb8:	e0 ea       	ldi	r30, 0xA0	; 160
     fba:	f8 e0       	ldi	r31, 0x08	; 8
     fbc:	83 83       	std	Z+3, r24	; 0x03
     fbe:	e2 cf       	rjmp	.-60     	; 0xf84 <__vector_26+0x56>
	if (data.outbuf_pos > 0) {
		uarts[num]->DATA = data.outbuf[0];
		data.outbuf_pos--;

		if (data.outbuf_pos > 0)
			memmove(data.outbuf, data.outbuf+1, data.outbuf_pos);
     fc0:	40 91 7b 20 	lds	r20, 0x207B
     fc4:	8b e3       	ldi	r24, 0x3B	; 59
     fc6:	90 e2       	ldi	r25, 0x20	; 32
     fc8:	6c e3       	ldi	r22, 0x3C	; 60
     fca:	70 e2       	ldi	r23, 0x20	; 32
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	0e 94 4d 0a 	call	0x149a	; 0x149a <memmove>
     fd2:	d8 cf       	rjmp	.-80     	; 0xf84 <__vector_26+0x56>

00000fd4 <__vector_25>:

ISR(TXVEC_USB) {
	transmit(UART_USB);
}

ISR(RXVEC_USB) {
     fd4:	1f 92       	push	r1
     fd6:	0f 92       	push	r0
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	0f 92       	push	r0
     fdc:	08 b6       	in	r0, 0x38	; 56
     fde:	0f 92       	push	r0
     fe0:	09 b6       	in	r0, 0x39	; 57
     fe2:	0f 92       	push	r0
     fe4:	0b b6       	in	r0, 0x3b	; 59
     fe6:	0f 92       	push	r0
     fe8:	11 24       	eor	r1, r1
     fea:	18 be       	out	0x38, r1	; 56
     fec:	19 be       	out	0x39, r1	; 57
     fee:	1b be       	out	0x3b, r1	; 59
     ff0:	1f 93       	push	r17
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
static void receive(UARTNum num) __attribute__((always_inline));
static void transmit(UARTNum num) __attribute__((always_inline));

static void receive(UARTNum num) {
	UARTData &data = uartdata[num];
	uint8_t byte = uarts[num]->DATA;
    100a:	10 91 a0 08 	lds	r17, 0x08A0

	if (byte == 27 || byte == '!' || byte == '`') {		// E-Stop is ESC key, !, or `
    100e:	1b 31       	cpi	r17, 0x1B	; 27
    1010:	51 f1       	breq	.+84     	; 0x1066 <__vector_25+0x92>
    1012:	11 32       	cpi	r17, 0x21	; 33
    1014:	41 f1       	breq	.+80     	; 0x1066 <__vector_25+0x92>
    1016:	10 36       	cpi	r17, 0x60	; 96
    1018:	31 f1       	breq	.+76     	; 0x1066 <__vector_25+0x92>
		CPU_CCP = CCP_IOREG_gc;
		RST.CTRL = RST_SWRST_bm;
//		debug_setLED(ERROR_LED, true);
	}

	if (data.inbuf_pos >= sizeof(data.inbuf))
    101a:	80 91 84 20 	lds	r24, 0x2084
    101e:	88 30       	cpi	r24, 0x08	; 8
    1020:	50 f4       	brcc	.+20     	; 0x1036 <__vector_25+0x62>
		return;

	data.inbuf[data.inbuf_pos++] = byte;
    1022:	80 91 84 20 	lds	r24, 0x2084
    1026:	e8 2f       	mov	r30, r24
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	e4 58       	subi	r30, 0x84	; 132
    102c:	ff 4d       	sbci	r31, 0xDF	; 223
    102e:	10 83       	st	Z, r17
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	80 93 84 20 	sts	0x2084, r24
	transmit(UART_USB);
}

ISR(RXVEC_USB) {
	receive(UART_USB);
}
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	1f 91       	pop	r17
    1050:	0f 90       	pop	r0
    1052:	0b be       	out	0x3b, r0	; 59
    1054:	0f 90       	pop	r0
    1056:	09 be       	out	0x39, r0	; 57
    1058:	0f 90       	pop	r0
    105a:	08 be       	out	0x38, r0	; 56
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti
static void receive(UARTNum num) {
	UARTData &data = uartdata[num];
	uint8_t byte = uarts[num]->DATA;

	if (byte == 27 || byte == '!' || byte == '`') {		// E-Stop is ESC key, !, or `
		cli();
    1066:	f8 94       	cli
		motor_allOff();
    1068:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z12motor_allOffv>
    106c:	87 ea       	ldi	r24, 0xA7	; 167
    106e:	91 e6       	ldi	r25, 0x61	; 97
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	f1 f7       	brne	.-4      	; 0x1070 <__vector_25+0x9c>
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <__vector_25+0xa2>
    1076:	00 00       	nop
		_delay_ms(100);
		CPU_CCP = CCP_IOREG_gc;
    1078:	88 ed       	ldi	r24, 0xD8	; 216
    107a:	84 bf       	out	0x34, r24	; 52
		RST.CTRL = RST_SWRST_bm;
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	e8 e7       	ldi	r30, 0x78	; 120
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	81 83       	std	Z+1, r24	; 0x01
    1084:	ca cf       	rjmp	.-108    	; 0x101a <__vector_25+0x46>

00001086 <__vector_62>:

ISR(RXVEC_USB) {
	receive(UART_USB);
}

ISR(TXVEC_XBEE) {
    1086:	1f 92       	push	r1
    1088:	0f 92       	push	r0
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	0f 92       	push	r0
    108e:	08 b6       	in	r0, 0x38	; 56
    1090:	0f 92       	push	r0
    1092:	09 b6       	in	r0, 0x39	; 57
    1094:	0f 92       	push	r0
    1096:	0b b6       	in	r0, 0x3b	; 59
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	18 be       	out	0x38, r1	; 56
    109e:	19 be       	out	0x39, r1	; 57
    10a0:	1b be       	out	0x3b, r1	; 59
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	4f 93       	push	r20
    10a8:	5f 93       	push	r21
    10aa:	6f 93       	push	r22
    10ac:	7f 93       	push	r23
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	ef 93       	push	r30
    10b8:	ff 93       	push	r31
}

static void transmit(UARTNum num) {
	UARTData &data = uartdata[num];

	if (data.outbuf_pos > 0) {
    10ba:	80 91 c5 20 	lds	r24, 0x20C5
    10be:	88 23       	and	r24, r24
    10c0:	21 f1       	breq	.+72     	; 0x110a <__vector_62+0x84>
		uarts[num]->DATA = data.outbuf[0];
    10c2:	80 91 85 20 	lds	r24, 0x2085
    10c6:	80 93 b0 0a 	sts	0x0AB0, r24
		data.outbuf_pos--;
    10ca:	80 91 c5 20 	lds	r24, 0x20C5
    10ce:	81 50       	subi	r24, 0x01	; 1
    10d0:	80 93 c5 20 	sts	0x20C5, r24

		if (data.outbuf_pos > 0)
    10d4:	80 91 c5 20 	lds	r24, 0x20C5
    10d8:	88 23       	and	r24, r24
    10da:	f1 f4       	brne	.+60     	; 0x1118 <__vector_62+0x92>
	receive(UART_USB);
}

ISR(TXVEC_XBEE) {
	transmit(UART_XBEE);
}
    10dc:	ff 91       	pop	r31
    10de:	ef 91       	pop	r30
    10e0:	bf 91       	pop	r27
    10e2:	af 91       	pop	r26
    10e4:	9f 91       	pop	r25
    10e6:	8f 91       	pop	r24
    10e8:	7f 91       	pop	r23
    10ea:	6f 91       	pop	r22
    10ec:	5f 91       	pop	r21
    10ee:	4f 91       	pop	r20
    10f0:	3f 91       	pop	r19
    10f2:	2f 91       	pop	r18
    10f4:	0f 90       	pop	r0
    10f6:	0b be       	out	0x3b, r0	; 59
    10f8:	0f 90       	pop	r0
    10fa:	09 be       	out	0x39, r0	; 57
    10fc:	0f 90       	pop	r0
    10fe:	08 be       	out	0x38, r0	; 56
    1100:	0f 90       	pop	r0
    1102:	0f be       	out	0x3f, r0	; 63
    1104:	0f 90       	pop	r0
    1106:	1f 90       	pop	r1
    1108:	18 95       	reti
		data.outbuf_pos--;

		if (data.outbuf_pos > 0)
			memmove(data.outbuf, data.outbuf+1, data.outbuf_pos);
	} else {
		uarts[num]->CTRLA &= ~USART_DREINTLVL_gm; // disable transmit interrupt
    110a:	80 91 b3 0a 	lds	r24, 0x0AB3
    110e:	8c 7f       	andi	r24, 0xFC	; 252
    1110:	e0 eb       	ldi	r30, 0xB0	; 176
    1112:	fa e0       	ldi	r31, 0x0A	; 10
    1114:	83 83       	std	Z+3, r24	; 0x03
    1116:	e2 cf       	rjmp	.-60     	; 0x10dc <__vector_62+0x56>
	if (data.outbuf_pos > 0) {
		uarts[num]->DATA = data.outbuf[0];
		data.outbuf_pos--;

		if (data.outbuf_pos > 0)
			memmove(data.outbuf, data.outbuf+1, data.outbuf_pos);
    1118:	40 91 c5 20 	lds	r20, 0x20C5
    111c:	85 e8       	ldi	r24, 0x85	; 133
    111e:	90 e2       	ldi	r25, 0x20	; 32
    1120:	66 e8       	ldi	r22, 0x86	; 134
    1122:	70 e2       	ldi	r23, 0x20	; 32
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	0e 94 4d 0a 	call	0x149a	; 0x149a <memmove>
    112a:	d8 cf       	rjmp	.-80     	; 0x10dc <__vector_62+0x56>

0000112c <__vector_61>:

ISR(TXVEC_XBEE) {
	transmit(UART_XBEE);
}

ISR(RXVEC_XBEE) {
    112c:	1f 92       	push	r1
    112e:	0f 92       	push	r0
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	0f 92       	push	r0
    1134:	08 b6       	in	r0, 0x38	; 56
    1136:	0f 92       	push	r0
    1138:	09 b6       	in	r0, 0x39	; 57
    113a:	0f 92       	push	r0
    113c:	0b b6       	in	r0, 0x3b	; 59
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	18 be       	out	0x38, r1	; 56
    1144:	19 be       	out	0x39, r1	; 57
    1146:	1b be       	out	0x3b, r1	; 59
    1148:	1f 93       	push	r17
    114a:	2f 93       	push	r18
    114c:	3f 93       	push	r19
    114e:	4f 93       	push	r20
    1150:	5f 93       	push	r21
    1152:	6f 93       	push	r22
    1154:	7f 93       	push	r23
    1156:	8f 93       	push	r24
    1158:	9f 93       	push	r25
    115a:	af 93       	push	r26
    115c:	bf 93       	push	r27
    115e:	ef 93       	push	r30
    1160:	ff 93       	push	r31
static void receive(UARTNum num) __attribute__((always_inline));
static void transmit(UARTNum num) __attribute__((always_inline));

static void receive(UARTNum num) {
	UARTData &data = uartdata[num];
	uint8_t byte = uarts[num]->DATA;
    1162:	10 91 b0 0a 	lds	r17, 0x0AB0

	if (byte == 27 || byte == '!' || byte == '`') {		// E-Stop is ESC key, !, or `
    1166:	1b 31       	cpi	r17, 0x1B	; 27
    1168:	51 f1       	breq	.+84     	; 0x11be <__vector_61+0x92>
    116a:	11 32       	cpi	r17, 0x21	; 33
    116c:	41 f1       	breq	.+80     	; 0x11be <__vector_61+0x92>
    116e:	10 36       	cpi	r17, 0x60	; 96
    1170:	31 f1       	breq	.+76     	; 0x11be <__vector_61+0x92>
		CPU_CCP = CCP_IOREG_gc;
		RST.CTRL = RST_SWRST_bm;
//		debug_setLED(ERROR_LED, true);
	}

	if (data.inbuf_pos >= sizeof(data.inbuf))
    1172:	80 91 ce 20 	lds	r24, 0x20CE
    1176:	88 30       	cpi	r24, 0x08	; 8
    1178:	50 f4       	brcc	.+20     	; 0x118e <__vector_61+0x62>
		return;

	data.inbuf[data.inbuf_pos++] = byte;
    117a:	80 91 ce 20 	lds	r24, 0x20CE
    117e:	e8 2f       	mov	r30, r24
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	ea 53       	subi	r30, 0x3A	; 58
    1184:	ff 4d       	sbci	r31, 0xDF	; 223
    1186:	10 83       	st	Z, r17
    1188:	8f 5f       	subi	r24, 0xFF	; 255
    118a:	80 93 ce 20 	sts	0x20CE, r24
	transmit(UART_XBEE);
}

ISR(RXVEC_XBEE) {
	receive(UART_XBEE);
    118e:	ff 91       	pop	r31
    1190:	ef 91       	pop	r30
    1192:	bf 91       	pop	r27
    1194:	af 91       	pop	r26
    1196:	9f 91       	pop	r25
    1198:	8f 91       	pop	r24
    119a:	7f 91       	pop	r23
    119c:	6f 91       	pop	r22
    119e:	5f 91       	pop	r21
    11a0:	4f 91       	pop	r20
    11a2:	3f 91       	pop	r19
    11a4:	2f 91       	pop	r18
    11a6:	1f 91       	pop	r17
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	09 be       	out	0x39, r0	; 57
    11b0:	0f 90       	pop	r0
    11b2:	08 be       	out	0x38, r0	; 56
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti
static void receive(UARTNum num) {
	UARTData &data = uartdata[num];
	uint8_t byte = uarts[num]->DATA;

	if (byte == 27 || byte == '!' || byte == '`') {		// E-Stop is ESC key, !, or `
		cli();
    11be:	f8 94       	cli
		motor_allOff();
    11c0:	0e 94 15 06 	call	0xc2a	; 0xc2a <_Z12motor_allOffv>
    11c4:	87 ea       	ldi	r24, 0xA7	; 167
    11c6:	91 e6       	ldi	r25, 0x61	; 97
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <__vector_61+0x9c>
    11cc:	00 c0       	rjmp	.+0      	; 0x11ce <__vector_61+0xa2>
    11ce:	00 00       	nop
		_delay_ms(100);
		CPU_CCP = CCP_IOREG_gc;
    11d0:	88 ed       	ldi	r24, 0xD8	; 216
    11d2:	84 bf       	out	0x34, r24	; 52
		RST.CTRL = RST_SWRST_bm;
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	e8 e7       	ldi	r30, 0x78	; 120
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	81 83       	std	Z+1, r24	; 0x01
    11dc:	ca cf       	rjmp	.-108    	; 0x1172 <__vector_61+0x46>

000011de <_Z6msleepm>:
#include "util.h"
#include <stdio.h>
#include <util/delay.h>

void msleep(unsigned long ms) {
	while (ms >= 10) {
    11de:	6a 30       	cpi	r22, 0x0A	; 10
    11e0:	71 05       	cpc	r23, r1
    11e2:	81 05       	cpc	r24, r1
    11e4:	91 05       	cpc	r25, r1
    11e6:	78 f0       	brcs	.+30     	; 0x1206 <_Z6msleepm+0x28>
    11e8:	e3 ec       	ldi	r30, 0xC3	; 195
    11ea:	f9 e0       	ldi	r31, 0x09	; 9
    11ec:	31 97       	sbiw	r30, 0x01	; 1
    11ee:	f1 f7       	brne	.-4      	; 0x11ec <_Z6msleepm+0xe>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <_Z6msleepm+0x14>
    11f2:	00 00       	nop
		_delay_ms(10);
		ms -= 10;
    11f4:	6a 50       	subi	r22, 0x0A	; 10
    11f6:	70 40       	sbci	r23, 0x00	; 0
    11f8:	80 40       	sbci	r24, 0x00	; 0
    11fa:	90 40       	sbci	r25, 0x00	; 0
#include "util.h"
#include <stdio.h>
#include <util/delay.h>

void msleep(unsigned long ms) {
	while (ms >= 10) {
    11fc:	6a 30       	cpi	r22, 0x0A	; 10
    11fe:	71 05       	cpc	r23, r1
    1200:	81 05       	cpc	r24, r1
    1202:	91 05       	cpc	r25, r1
    1204:	88 f7       	brcc	.-30     	; 0x11e8 <_Z6msleepm+0xa>
		_delay_ms(10);
		ms -= 10;
	}

	while (ms-- > 0)
    1206:	61 15       	cp	r22, r1
    1208:	71 05       	cpc	r23, r1
    120a:	81 05       	cpc	r24, r1
    120c:	91 05       	cpc	r25, r1
    120e:	59 f0       	breq	.+22     	; 0x1226 <_Z6msleepm+0x48>
    1210:	e9 ef       	ldi	r30, 0xF9	; 249
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	31 97       	sbiw	r30, 0x01	; 1
    1216:	f1 f7       	brne	.-4      	; 0x1214 <_Z6msleepm+0x36>
    1218:	00 c0       	rjmp	.+0      	; 0x121a <_Z6msleepm+0x3c>
    121a:	00 00       	nop
    121c:	61 50       	subi	r22, 0x01	; 1
    121e:	70 40       	sbci	r23, 0x00	; 0
    1220:	80 40       	sbci	r24, 0x00	; 0
    1222:	90 40       	sbci	r25, 0x00	; 0
    1224:	a9 f7       	brne	.-22     	; 0x1210 <_Z6msleepm+0x32>
    1226:	08 95       	ret

00001228 <_Z7vsscanfPKcS0_Pv>:
		_delay_ms(1);
}

int vsscanf(const char *s, const char *fmt, va_list ap) {
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	2e 97       	sbiw	r28, 0x0e	; 14
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	de bf       	out	0x3e, r29	; 62
	FILE f;
	f.flags = __SRD | __SSTR;
    1236:	25 e0       	ldi	r18, 0x05	; 5
    1238:	2c 83       	std	Y+4, r18	; 0x04
	f.buf = (char *)s;
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	9a 83       	std	Y+2, r25	; 0x02
	return vfscanf(&f, fmt, ap);
    123e:	ce 01       	movw	r24, r28
    1240:	01 96       	adiw	r24, 0x01	; 1
    1242:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <vfscanf>
}
    1246:	2e 96       	adiw	r28, 0x0e	; 14
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	cf 91       	pop	r28
    124e:	df 91       	pop	r29
    1250:	08 95       	ret

00001252 <_Z9anglewrapf>:

float anglewrap(float rad) {
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	e6 2e       	mov	r14, r22
    125c:	f7 2e       	mov	r15, r23
    125e:	08 2f       	mov	r16, r24
    1260:	19 2f       	mov	r17, r25
	if (rad > M_PI) {
    1262:	2b ed       	ldi	r18, 0xDB	; 219
    1264:	3f e0       	ldi	r19, 0x0F	; 15
    1266:	49 e4       	ldi	r20, 0x49	; 73
    1268:	50 e4       	ldi	r21, 0x40	; 64
    126a:	0e 94 49 0a 	call	0x1492	; 0x1492 <__gesf2>
    126e:	18 16       	cp	r1, r24
    1270:	7c f4       	brge	.+30     	; 0x1290 <_Z9anglewrapf+0x3e>
		return rad - 2*M_PI;
    1272:	6e 2d       	mov	r22, r14
    1274:	7f 2d       	mov	r23, r15
    1276:	80 2f       	mov	r24, r16
    1278:	91 2f       	mov	r25, r17
    127a:	2b ed       	ldi	r18, 0xDB	; 219
    127c:	3f e0       	ldi	r19, 0x0F	; 15
    127e:	49 ec       	ldi	r20, 0xC9	; 201
    1280:	50 e4       	ldi	r21, 0x40	; 64
    1282:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <__subsf3>
    1286:	e6 2e       	mov	r14, r22
    1288:	f7 2e       	mov	r15, r23
    128a:	08 2f       	mov	r16, r24
    128c:	19 2f       	mov	r17, r25
    128e:	1a c0       	rjmp	.+52     	; 0x12c4 <_Z9anglewrapf+0x72>
	} else if (rad < -M_PI) {
    1290:	6e 2d       	mov	r22, r14
    1292:	7f 2d       	mov	r23, r15
    1294:	80 2f       	mov	r24, r16
    1296:	91 2f       	mov	r25, r17
    1298:	2b ed       	ldi	r18, 0xDB	; 219
    129a:	3f e0       	ldi	r19, 0x0F	; 15
    129c:	49 e4       	ldi	r20, 0x49	; 73
    129e:	50 ec       	ldi	r21, 0xC0	; 192
    12a0:	0e 94 d0 09 	call	0x13a0	; 0x13a0 <__cmpsf2>
    12a4:	88 23       	and	r24, r24
    12a6:	74 f4       	brge	.+28     	; 0x12c4 <_Z9anglewrapf+0x72>
		return rad + 2*M_PI;
    12a8:	6e 2d       	mov	r22, r14
    12aa:	7f 2d       	mov	r23, r15
    12ac:	80 2f       	mov	r24, r16
    12ae:	91 2f       	mov	r25, r17
    12b0:	2b ed       	ldi	r18, 0xDB	; 219
    12b2:	3f e0       	ldi	r19, 0x0F	; 15
    12b4:	49 ec       	ldi	r20, 0xC9	; 201
    12b6:	50 e4       	ldi	r21, 0x40	; 64
    12b8:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <__addsf3>
    12bc:	e6 2e       	mov	r14, r22
    12be:	f7 2e       	mov	r15, r23
    12c0:	08 2f       	mov	r16, r24
    12c2:	19 2f       	mov	r17, r25
	} else {
		return rad;
	}
    12c4:	6e 2d       	mov	r22, r14
    12c6:	7f 2d       	mov	r23, r15
    12c8:	80 2f       	mov	r24, r16
    12ca:	91 2f       	mov	r25, r17
    12cc:	1f 91       	pop	r17
    12ce:	0f 91       	pop	r16
    12d0:	ff 90       	pop	r15
    12d2:	ef 90       	pop	r14
    12d4:	08 95       	ret

000012d6 <__subsf3>:
    12d6:	50 58       	subi	r21, 0x80	; 128

000012d8 <__addsf3>:
    12d8:	bb 27       	eor	r27, r27
    12da:	aa 27       	eor	r26, r26
    12dc:	0e d0       	rcall	.+28     	; 0x12fa <__addsf3x>
    12de:	9f c0       	rjmp	.+318    	; 0x141e <__fp_round>
    12e0:	90 d0       	rcall	.+288    	; 0x1402 <__fp_pscA>
    12e2:	30 f0       	brcs	.+12     	; 0x12f0 <__addsf3+0x18>
    12e4:	95 d0       	rcall	.+298    	; 0x1410 <__fp_pscB>
    12e6:	20 f0       	brcs	.+8      	; 0x12f0 <__addsf3+0x18>
    12e8:	31 f4       	brne	.+12     	; 0x12f6 <__addsf3+0x1e>
    12ea:	9f 3f       	cpi	r25, 0xFF	; 255
    12ec:	11 f4       	brne	.+4      	; 0x12f2 <__addsf3+0x1a>
    12ee:	1e f4       	brtc	.+6      	; 0x12f6 <__addsf3+0x1e>
    12f0:	85 c0       	rjmp	.+266    	; 0x13fc <__fp_nan>
    12f2:	0e f4       	brtc	.+2      	; 0x12f6 <__addsf3+0x1e>
    12f4:	e0 95       	com	r30
    12f6:	e7 fb       	bst	r30, 7
    12f8:	7b c0       	rjmp	.+246    	; 0x13f0 <__fp_inf>

000012fa <__addsf3x>:
    12fa:	e9 2f       	mov	r30, r25
    12fc:	a1 d0       	rcall	.+322    	; 0x1440 <__fp_split3>
    12fe:	80 f3       	brcs	.-32     	; 0x12e0 <__addsf3+0x8>
    1300:	ba 17       	cp	r27, r26
    1302:	62 07       	cpc	r22, r18
    1304:	73 07       	cpc	r23, r19
    1306:	84 07       	cpc	r24, r20
    1308:	95 07       	cpc	r25, r21
    130a:	18 f0       	brcs	.+6      	; 0x1312 <__addsf3x+0x18>
    130c:	71 f4       	brne	.+28     	; 0x132a <__addsf3x+0x30>
    130e:	9e f5       	brtc	.+102    	; 0x1376 <__addsf3x+0x7c>
    1310:	b9 c0       	rjmp	.+370    	; 0x1484 <__fp_zero>
    1312:	0e f4       	brtc	.+2      	; 0x1316 <__addsf3x+0x1c>
    1314:	e0 95       	com	r30
    1316:	0b 2e       	mov	r0, r27
    1318:	ba 2f       	mov	r27, r26
    131a:	a0 2d       	mov	r26, r0
    131c:	0b 01       	movw	r0, r22
    131e:	b9 01       	movw	r22, r18
    1320:	90 01       	movw	r18, r0
    1322:	0c 01       	movw	r0, r24
    1324:	ca 01       	movw	r24, r20
    1326:	a0 01       	movw	r20, r0
    1328:	11 24       	eor	r1, r1
    132a:	ff 27       	eor	r31, r31
    132c:	59 1b       	sub	r21, r25
    132e:	99 f0       	breq	.+38     	; 0x1356 <__addsf3x+0x5c>
    1330:	59 3f       	cpi	r21, 0xF9	; 249
    1332:	50 f4       	brcc	.+20     	; 0x1348 <__addsf3x+0x4e>
    1334:	50 3e       	cpi	r21, 0xE0	; 224
    1336:	68 f1       	brcs	.+90     	; 0x1392 <__addsf3x+0x98>
    1338:	1a 16       	cp	r1, r26
    133a:	f0 40       	sbci	r31, 0x00	; 0
    133c:	a2 2f       	mov	r26, r18
    133e:	23 2f       	mov	r18, r19
    1340:	34 2f       	mov	r19, r20
    1342:	44 27       	eor	r20, r20
    1344:	58 5f       	subi	r21, 0xF8	; 248
    1346:	f3 cf       	rjmp	.-26     	; 0x132e <__addsf3x+0x34>
    1348:	46 95       	lsr	r20
    134a:	37 95       	ror	r19
    134c:	27 95       	ror	r18
    134e:	a7 95       	ror	r26
    1350:	f0 40       	sbci	r31, 0x00	; 0
    1352:	53 95       	inc	r21
    1354:	c9 f7       	brne	.-14     	; 0x1348 <__addsf3x+0x4e>
    1356:	7e f4       	brtc	.+30     	; 0x1376 <__addsf3x+0x7c>
    1358:	1f 16       	cp	r1, r31
    135a:	ba 0b       	sbc	r27, r26
    135c:	62 0b       	sbc	r22, r18
    135e:	73 0b       	sbc	r23, r19
    1360:	84 0b       	sbc	r24, r20
    1362:	ba f0       	brmi	.+46     	; 0x1392 <__addsf3x+0x98>
    1364:	91 50       	subi	r25, 0x01	; 1
    1366:	a1 f0       	breq	.+40     	; 0x1390 <__addsf3x+0x96>
    1368:	ff 0f       	add	r31, r31
    136a:	bb 1f       	adc	r27, r27
    136c:	66 1f       	adc	r22, r22
    136e:	77 1f       	adc	r23, r23
    1370:	88 1f       	adc	r24, r24
    1372:	c2 f7       	brpl	.-16     	; 0x1364 <__addsf3x+0x6a>
    1374:	0e c0       	rjmp	.+28     	; 0x1392 <__addsf3x+0x98>
    1376:	ba 0f       	add	r27, r26
    1378:	62 1f       	adc	r22, r18
    137a:	73 1f       	adc	r23, r19
    137c:	84 1f       	adc	r24, r20
    137e:	48 f4       	brcc	.+18     	; 0x1392 <__addsf3x+0x98>
    1380:	87 95       	ror	r24
    1382:	77 95       	ror	r23
    1384:	67 95       	ror	r22
    1386:	b7 95       	ror	r27
    1388:	f7 95       	ror	r31
    138a:	9e 3f       	cpi	r25, 0xFE	; 254
    138c:	08 f0       	brcs	.+2      	; 0x1390 <__addsf3x+0x96>
    138e:	b3 cf       	rjmp	.-154    	; 0x12f6 <__addsf3+0x1e>
    1390:	93 95       	inc	r25
    1392:	88 0f       	add	r24, r24
    1394:	08 f0       	brcs	.+2      	; 0x1398 <__addsf3x+0x9e>
    1396:	99 27       	eor	r25, r25
    1398:	ee 0f       	add	r30, r30
    139a:	97 95       	ror	r25
    139c:	87 95       	ror	r24
    139e:	08 95       	ret

000013a0 <__cmpsf2>:
    13a0:	03 d0       	rcall	.+6      	; 0x13a8 <__fp_cmp>
    13a2:	08 f4       	brcc	.+2      	; 0x13a6 <__cmpsf2+0x6>
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	08 95       	ret

000013a8 <__fp_cmp>:
    13a8:	99 0f       	add	r25, r25
    13aa:	00 08       	sbc	r0, r0
    13ac:	55 0f       	add	r21, r21
    13ae:	aa 0b       	sbc	r26, r26
    13b0:	e0 e8       	ldi	r30, 0x80	; 128
    13b2:	fe ef       	ldi	r31, 0xFE	; 254
    13b4:	16 16       	cp	r1, r22
    13b6:	17 06       	cpc	r1, r23
    13b8:	e8 07       	cpc	r30, r24
    13ba:	f9 07       	cpc	r31, r25
    13bc:	c0 f0       	brcs	.+48     	; 0x13ee <__fp_cmp+0x46>
    13be:	12 16       	cp	r1, r18
    13c0:	13 06       	cpc	r1, r19
    13c2:	e4 07       	cpc	r30, r20
    13c4:	f5 07       	cpc	r31, r21
    13c6:	98 f0       	brcs	.+38     	; 0x13ee <__fp_cmp+0x46>
    13c8:	62 1b       	sub	r22, r18
    13ca:	73 0b       	sbc	r23, r19
    13cc:	84 0b       	sbc	r24, r20
    13ce:	95 0b       	sbc	r25, r21
    13d0:	39 f4       	brne	.+14     	; 0x13e0 <__fp_cmp+0x38>
    13d2:	0a 26       	eor	r0, r26
    13d4:	61 f0       	breq	.+24     	; 0x13ee <__fp_cmp+0x46>
    13d6:	23 2b       	or	r18, r19
    13d8:	24 2b       	or	r18, r20
    13da:	25 2b       	or	r18, r21
    13dc:	21 f4       	brne	.+8      	; 0x13e6 <__fp_cmp+0x3e>
    13de:	08 95       	ret
    13e0:	0a 26       	eor	r0, r26
    13e2:	09 f4       	brne	.+2      	; 0x13e6 <__fp_cmp+0x3e>
    13e4:	a1 40       	sbci	r26, 0x01	; 1
    13e6:	a6 95       	lsr	r26
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	81 1d       	adc	r24, r1
    13ec:	81 1d       	adc	r24, r1
    13ee:	08 95       	ret

000013f0 <__fp_inf>:
    13f0:	97 f9       	bld	r25, 7
    13f2:	9f 67       	ori	r25, 0x7F	; 127
    13f4:	80 e8       	ldi	r24, 0x80	; 128
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	08 95       	ret

000013fc <__fp_nan>:
    13fc:	9f ef       	ldi	r25, 0xFF	; 255
    13fe:	80 ec       	ldi	r24, 0xC0	; 192
    1400:	08 95       	ret

00001402 <__fp_pscA>:
    1402:	00 24       	eor	r0, r0
    1404:	0a 94       	dec	r0
    1406:	16 16       	cp	r1, r22
    1408:	17 06       	cpc	r1, r23
    140a:	18 06       	cpc	r1, r24
    140c:	09 06       	cpc	r0, r25
    140e:	08 95       	ret

00001410 <__fp_pscB>:
    1410:	00 24       	eor	r0, r0
    1412:	0a 94       	dec	r0
    1414:	12 16       	cp	r1, r18
    1416:	13 06       	cpc	r1, r19
    1418:	14 06       	cpc	r1, r20
    141a:	05 06       	cpc	r0, r21
    141c:	08 95       	ret

0000141e <__fp_round>:
    141e:	09 2e       	mov	r0, r25
    1420:	03 94       	inc	r0
    1422:	00 0c       	add	r0, r0
    1424:	11 f4       	brne	.+4      	; 0x142a <__fp_round+0xc>
    1426:	88 23       	and	r24, r24
    1428:	52 f0       	brmi	.+20     	; 0x143e <__fp_round+0x20>
    142a:	bb 0f       	add	r27, r27
    142c:	40 f4       	brcc	.+16     	; 0x143e <__fp_round+0x20>
    142e:	bf 2b       	or	r27, r31
    1430:	11 f4       	brne	.+4      	; 0x1436 <__fp_round+0x18>
    1432:	60 ff       	sbrs	r22, 0
    1434:	04 c0       	rjmp	.+8      	; 0x143e <__fp_round+0x20>
    1436:	6f 5f       	subi	r22, 0xFF	; 255
    1438:	7f 4f       	sbci	r23, 0xFF	; 255
    143a:	8f 4f       	sbci	r24, 0xFF	; 255
    143c:	9f 4f       	sbci	r25, 0xFF	; 255
    143e:	08 95       	ret

00001440 <__fp_split3>:
    1440:	57 fd       	sbrc	r21, 7
    1442:	90 58       	subi	r25, 0x80	; 128
    1444:	44 0f       	add	r20, r20
    1446:	55 1f       	adc	r21, r21
    1448:	59 f0       	breq	.+22     	; 0x1460 <__fp_splitA+0x10>
    144a:	5f 3f       	cpi	r21, 0xFF	; 255
    144c:	71 f0       	breq	.+28     	; 0x146a <__fp_splitA+0x1a>
    144e:	47 95       	ror	r20

00001450 <__fp_splitA>:
    1450:	88 0f       	add	r24, r24
    1452:	97 fb       	bst	r25, 7
    1454:	99 1f       	adc	r25, r25
    1456:	61 f0       	breq	.+24     	; 0x1470 <__fp_splitA+0x20>
    1458:	9f 3f       	cpi	r25, 0xFF	; 255
    145a:	79 f0       	breq	.+30     	; 0x147a <__fp_splitA+0x2a>
    145c:	87 95       	ror	r24
    145e:	08 95       	ret
    1460:	12 16       	cp	r1, r18
    1462:	13 06       	cpc	r1, r19
    1464:	14 06       	cpc	r1, r20
    1466:	55 1f       	adc	r21, r21
    1468:	f2 cf       	rjmp	.-28     	; 0x144e <__fp_split3+0xe>
    146a:	46 95       	lsr	r20
    146c:	f1 df       	rcall	.-30     	; 0x1450 <__fp_splitA>
    146e:	08 c0       	rjmp	.+16     	; 0x1480 <__fp_splitA+0x30>
    1470:	16 16       	cp	r1, r22
    1472:	17 06       	cpc	r1, r23
    1474:	18 06       	cpc	r1, r24
    1476:	99 1f       	adc	r25, r25
    1478:	f1 cf       	rjmp	.-30     	; 0x145c <__fp_splitA+0xc>
    147a:	86 95       	lsr	r24
    147c:	71 05       	cpc	r23, r1
    147e:	61 05       	cpc	r22, r1
    1480:	08 94       	sec
    1482:	08 95       	ret

00001484 <__fp_zero>:
    1484:	e8 94       	clt

00001486 <__fp_szero>:
    1486:	bb 27       	eor	r27, r27
    1488:	66 27       	eor	r22, r22
    148a:	77 27       	eor	r23, r23
    148c:	cb 01       	movw	r24, r22
    148e:	97 f9       	bld	r25, 7
    1490:	08 95       	ret

00001492 <__gesf2>:
    1492:	8a df       	rcall	.-236    	; 0x13a8 <__fp_cmp>
    1494:	08 f4       	brcc	.+2      	; 0x1498 <__gesf2+0x6>
    1496:	8f ef       	ldi	r24, 0xFF	; 255
    1498:	08 95       	ret

0000149a <memmove>:
    149a:	68 17       	cp	r22, r24
    149c:	79 07       	cpc	r23, r25
    149e:	68 f4       	brcc	.+26     	; 0x14ba <memmove+0x20>
    14a0:	fb 01       	movw	r30, r22
    14a2:	dc 01       	movw	r26, r24
    14a4:	e4 0f       	add	r30, r20
    14a6:	f5 1f       	adc	r31, r21
    14a8:	a4 0f       	add	r26, r20
    14aa:	b5 1f       	adc	r27, r21
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <memmove+0x18>
    14ae:	02 90       	ld	r0, -Z
    14b0:	0e 92       	st	-X, r0
    14b2:	41 50       	subi	r20, 0x01	; 1
    14b4:	50 40       	sbci	r21, 0x00	; 0
    14b6:	d8 f7       	brcc	.-10     	; 0x14ae <memmove+0x14>
    14b8:	08 95       	ret
    14ba:	0c 94 90 10 	jmp	0x2120	; 0x2120 <memcpy>

000014be <fgetc>:
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
    14c4:	3b 81       	ldd	r19, Y+3	; 0x03
    14c6:	30 ff       	sbrs	r19, 0
    14c8:	36 c0       	rjmp	.+108    	; 0x1536 <fgetc+0x78>
    14ca:	36 ff       	sbrs	r19, 6
    14cc:	09 c0       	rjmp	.+18     	; 0x14e0 <fgetc+0x22>
    14ce:	3f 7b       	andi	r19, 0xBF	; 191
    14d0:	3b 83       	std	Y+3, r19	; 0x03
    14d2:	8e 81       	ldd	r24, Y+6	; 0x06
    14d4:	9f 81       	ldd	r25, Y+7	; 0x07
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	8e 83       	std	Y+6, r24	; 0x06
    14da:	9f 83       	std	Y+7, r25	; 0x07
    14dc:	2a 81       	ldd	r18, Y+2	; 0x02
    14de:	29 c0       	rjmp	.+82     	; 0x1532 <fgetc+0x74>
    14e0:	32 ff       	sbrs	r19, 2
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <fgetc+0x44>
    14e4:	e8 81       	ld	r30, Y
    14e6:	f9 81       	ldd	r31, Y+1	; 0x01
    14e8:	80 81       	ld	r24, Z
    14ea:	99 27       	eor	r25, r25
    14ec:	87 fd       	sbrc	r24, 7
    14ee:	90 95       	com	r25
    14f0:	00 97       	sbiw	r24, 0x00	; 0
    14f2:	19 f4       	brne	.+6      	; 0x14fa <fgetc+0x3c>
    14f4:	30 62       	ori	r19, 0x20	; 32
    14f6:	3b 83       	std	Y+3, r19	; 0x03
    14f8:	1e c0       	rjmp	.+60     	; 0x1536 <fgetc+0x78>
    14fa:	31 96       	adiw	r30, 0x01	; 1
    14fc:	e8 83       	st	Y, r30
    14fe:	f9 83       	std	Y+1, r31	; 0x01
    1500:	11 c0       	rjmp	.+34     	; 0x1524 <fgetc+0x66>
    1502:	ea 85       	ldd	r30, Y+10	; 0x0a
    1504:	fb 85       	ldd	r31, Y+11	; 0x0b
    1506:	ce 01       	movw	r24, r28
    1508:	19 95       	eicall
    150a:	97 ff       	sbrs	r25, 7
    150c:	0b c0       	rjmp	.+22     	; 0x1524 <fgetc+0x66>
    150e:	2b 81       	ldd	r18, Y+3	; 0x03
    1510:	3f ef       	ldi	r19, 0xFF	; 255
    1512:	8f 3f       	cpi	r24, 0xFF	; 255
    1514:	93 07       	cpc	r25, r19
    1516:	11 f4       	brne	.+4      	; 0x151c <fgetc+0x5e>
    1518:	80 e1       	ldi	r24, 0x10	; 16
    151a:	01 c0       	rjmp	.+2      	; 0x151e <fgetc+0x60>
    151c:	80 e2       	ldi	r24, 0x20	; 32
    151e:	82 2b       	or	r24, r18
    1520:	8b 83       	std	Y+3, r24	; 0x03
    1522:	09 c0       	rjmp	.+18     	; 0x1536 <fgetc+0x78>
    1524:	2e 81       	ldd	r18, Y+6	; 0x06
    1526:	3f 81       	ldd	r19, Y+7	; 0x07
    1528:	2f 5f       	subi	r18, 0xFF	; 255
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	2e 83       	std	Y+6, r18	; 0x06
    152e:	3f 83       	std	Y+7, r19	; 0x07
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	02 c0       	rjmp	.+4      	; 0x153a <fgetc+0x7c>
    1536:	2f ef       	ldi	r18, 0xFF	; 255
    1538:	3f ef       	ldi	r19, 0xFF	; 255
    153a:	c9 01       	movw	r24, r18
    153c:	df 91       	pop	r29
    153e:	cf 91       	pop	r28
    1540:	08 95       	ret

00001542 <fgets>:
    1542:	cf 92       	push	r12
    1544:	df 92       	push	r13
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	ec 01       	movw	r28, r24
    1554:	6a 01       	movw	r12, r20
    1556:	fa 01       	movw	r30, r20
    1558:	83 81       	ldd	r24, Z+3	; 0x03
    155a:	80 ff       	sbrs	r24, 0
    155c:	1f c0       	rjmp	.+62     	; 0x159c <fgets+0x5a>
    155e:	16 16       	cp	r1, r22
    1560:	17 06       	cpc	r1, r23
    1562:	e4 f4       	brge	.+56     	; 0x159c <fgets+0x5a>
    1564:	7b 01       	movw	r14, r22
    1566:	08 94       	sec
    1568:	e1 08       	sbc	r14, r1
    156a:	f1 08       	sbc	r15, r1
    156c:	8e 01       	movw	r16, r28
    156e:	10 c0       	rjmp	.+32     	; 0x1590 <fgets+0x4e>
    1570:	c6 01       	movw	r24, r12
    1572:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
    1576:	ff ef       	ldi	r31, 0xFF	; 255
    1578:	8f 3f       	cpi	r24, 0xFF	; 255
    157a:	9f 07       	cpc	r25, r31
    157c:	79 f0       	breq	.+30     	; 0x159c <fgets+0x5a>
    157e:	f8 01       	movw	r30, r16
    1580:	81 93       	st	Z+, r24
    1582:	8f 01       	movw	r16, r30
    1584:	8a 30       	cpi	r24, 0x0A	; 10
    1586:	91 05       	cpc	r25, r1
    1588:	31 f0       	breq	.+12     	; 0x1596 <fgets+0x54>
    158a:	08 94       	sec
    158c:	e1 08       	sbc	r14, r1
    158e:	f1 08       	sbc	r15, r1
    1590:	e1 14       	cp	r14, r1
    1592:	f1 04       	cpc	r15, r1
    1594:	69 f7       	brne	.-38     	; 0x1570 <fgets+0x2e>
    1596:	f8 01       	movw	r30, r16
    1598:	10 82       	st	Z, r1
    159a:	02 c0       	rjmp	.+4      	; 0x15a0 <fgets+0x5e>
    159c:	c0 e0       	ldi	r28, 0x00	; 0
    159e:	d0 e0       	ldi	r29, 0x00	; 0
    15a0:	ce 01       	movw	r24, r28
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	df 90       	pop	r13
    15b0:	cf 90       	pop	r12
    15b2:	08 95       	ret

000015b4 <fputc>:
    15b4:	0f 93       	push	r16
    15b6:	1f 93       	push	r17
    15b8:	cf 93       	push	r28
    15ba:	df 93       	push	r29
    15bc:	8c 01       	movw	r16, r24
    15be:	eb 01       	movw	r28, r22
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	81 ff       	sbrs	r24, 1
    15c4:	1b c0       	rjmp	.+54     	; 0x15fc <fputc+0x48>
    15c6:	82 ff       	sbrs	r24, 2
    15c8:	0d c0       	rjmp	.+26     	; 0x15e4 <fputc+0x30>
    15ca:	2e 81       	ldd	r18, Y+6	; 0x06
    15cc:	3f 81       	ldd	r19, Y+7	; 0x07
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	28 17       	cp	r18, r24
    15d4:	39 07       	cpc	r19, r25
    15d6:	64 f4       	brge	.+24     	; 0x15f0 <fputc+0x3c>
    15d8:	e8 81       	ld	r30, Y
    15da:	f9 81       	ldd	r31, Y+1	; 0x01
    15dc:	01 93       	st	Z+, r16
    15de:	e8 83       	st	Y, r30
    15e0:	f9 83       	std	Y+1, r31	; 0x01
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <fputc+0x3c>
    15e4:	e8 85       	ldd	r30, Y+8	; 0x08
    15e6:	f9 85       	ldd	r31, Y+9	; 0x09
    15e8:	80 2f       	mov	r24, r16
    15ea:	19 95       	eicall
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	31 f4       	brne	.+12     	; 0x15fc <fputc+0x48>
    15f0:	8e 81       	ldd	r24, Y+6	; 0x06
    15f2:	9f 81       	ldd	r25, Y+7	; 0x07
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	8e 83       	std	Y+6, r24	; 0x06
    15f8:	9f 83       	std	Y+7, r25	; 0x07
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <fputc+0x4c>
    15fc:	0f ef       	ldi	r16, 0xFF	; 255
    15fe:	1f ef       	ldi	r17, 0xFF	; 255
    1600:	c8 01       	movw	r24, r16
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	08 95       	ret

0000160c <printf_P>:
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	fe 01       	movw	r30, r28
    1616:	36 96       	adiw	r30, 0x06	; 6
    1618:	61 91       	ld	r22, Z+
    161a:	71 91       	ld	r23, Z+
    161c:	80 91 d1 20 	lds	r24, 0x20D1
    1620:	90 91 d2 20 	lds	r25, 0x20D2
    1624:	dc 01       	movw	r26, r24
    1626:	13 96       	adiw	r26, 0x03	; 3
    1628:	2c 91       	ld	r18, X
    162a:	13 97       	sbiw	r26, 0x03	; 3
    162c:	28 60       	ori	r18, 0x08	; 8
    162e:	13 96       	adiw	r26, 0x03	; 3
    1630:	2c 93       	st	X, r18
    1632:	af 01       	movw	r20, r30
    1634:	0e 94 90 0b 	call	0x1720	; 0x1720 <vfprintf>
    1638:	e0 91 d1 20 	lds	r30, 0x20D1
    163c:	f0 91 d2 20 	lds	r31, 0x20D2
    1640:	23 81       	ldd	r18, Z+3	; 0x03
    1642:	27 7f       	andi	r18, 0xF7	; 247
    1644:	23 83       	std	Z+3, r18	; 0x03
    1646:	cf 91       	pop	r28
    1648:	df 91       	pop	r29
    164a:	08 95       	ret

0000164c <puts_P>:
    164c:	ef 92       	push	r14
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	8c 01       	movw	r16, r24
    165a:	e0 91 d1 20 	lds	r30, 0x20D1
    165e:	f0 91 d2 20 	lds	r31, 0x20D2
    1662:	83 81       	ldd	r24, Z+3	; 0x03
    1664:	81 ff       	sbrs	r24, 1
    1666:	20 c0       	rjmp	.+64     	; 0x16a8 <puts_P+0x5c>
    1668:	c0 e0       	ldi	r28, 0x00	; 0
    166a:	d0 e0       	ldi	r29, 0x00	; 0
    166c:	0c c0       	rjmp	.+24     	; 0x1686 <puts_P+0x3a>
    166e:	db 01       	movw	r26, r22
    1670:	18 96       	adiw	r26, 0x08	; 8
    1672:	ed 91       	ld	r30, X+
    1674:	fc 91       	ld	r31, X
    1676:	19 97       	sbiw	r26, 0x09	; 9
    1678:	19 95       	eicall
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	11 f0       	breq	.+4      	; 0x1682 <puts_P+0x36>
    167e:	cf ef       	ldi	r28, 0xFF	; 255
    1680:	df ef       	ldi	r29, 0xFF	; 255
    1682:	0f 5f       	subi	r16, 0xFF	; 255
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	f8 01       	movw	r30, r16
    1688:	84 91       	lpm	r24, Z+
    168a:	60 91 d1 20 	lds	r22, 0x20D1
    168e:	70 91 d2 20 	lds	r23, 0x20D2
    1692:	88 23       	and	r24, r24
    1694:	61 f7       	brne	.-40     	; 0x166e <puts_P+0x22>
    1696:	db 01       	movw	r26, r22
    1698:	18 96       	adiw	r26, 0x08	; 8
    169a:	ed 91       	ld	r30, X+
    169c:	fc 91       	ld	r31, X
    169e:	19 97       	sbiw	r26, 0x09	; 9
    16a0:	8a e0       	ldi	r24, 0x0A	; 10
    16a2:	19 95       	eicall
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	11 f0       	breq	.+4      	; 0x16ac <puts_P+0x60>
    16a8:	cf ef       	ldi	r28, 0xFF	; 255
    16aa:	df ef       	ldi	r29, 0xFF	; 255
    16ac:	ce 01       	movw	r24, r28
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ff 90       	pop	r15
    16b8:	ef 90       	pop	r14
    16ba:	08 95       	ret

000016bc <vsnprintf>:
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	2e 97       	sbiw	r28, 0x0e	; 14
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	8c 01       	movw	r16, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	ba 01       	movw	r22, r20
    16d4:	46 e0       	ldi	r20, 0x06	; 6
    16d6:	4c 83       	std	Y+4, r20	; 0x04
    16d8:	09 83       	std	Y+1, r16	; 0x01
    16da:	1a 83       	std	Y+2, r17	; 0x02
    16dc:	97 ff       	sbrs	r25, 7
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <vsnprintf+0x28>
    16e0:	80 e0       	ldi	r24, 0x00	; 0
    16e2:	90 e8       	ldi	r25, 0x80	; 128
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	8d 83       	std	Y+5, r24	; 0x05
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	ce 01       	movw	r24, r28
    16ec:	01 96       	adiw	r24, 0x01	; 1
    16ee:	a9 01       	movw	r20, r18
    16f0:	0e 94 90 0b 	call	0x1720	; 0x1720 <vfprintf>
    16f4:	4d 81       	ldd	r20, Y+5	; 0x05
    16f6:	5e 81       	ldd	r21, Y+6	; 0x06
    16f8:	57 fd       	sbrc	r21, 7
    16fa:	0a c0       	rjmp	.+20     	; 0x1710 <vsnprintf+0x54>
    16fc:	2f 81       	ldd	r18, Y+7	; 0x07
    16fe:	38 85       	ldd	r19, Y+8	; 0x08
    1700:	42 17       	cp	r20, r18
    1702:	53 07       	cpc	r21, r19
    1704:	0c f4       	brge	.+2      	; 0x1708 <vsnprintf+0x4c>
    1706:	9a 01       	movw	r18, r20
    1708:	02 0f       	add	r16, r18
    170a:	13 1f       	adc	r17, r19
    170c:	f8 01       	movw	r30, r16
    170e:	10 82       	st	Z, r1
    1710:	2e 96       	adiw	r28, 0x0e	; 14
    1712:	cd bf       	out	0x3d, r28	; 61
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	08 95       	ret

00001720 <vfprintf>:
    1720:	2f 92       	push	r2
    1722:	3f 92       	push	r3
    1724:	4f 92       	push	r4
    1726:	5f 92       	push	r5
    1728:	6f 92       	push	r6
    172a:	7f 92       	push	r7
    172c:	8f 92       	push	r8
    172e:	9f 92       	push	r9
    1730:	af 92       	push	r10
    1732:	bf 92       	push	r11
    1734:	cf 92       	push	r12
    1736:	df 92       	push	r13
    1738:	ef 92       	push	r14
    173a:	ff 92       	push	r15
    173c:	0f 93       	push	r16
    173e:	1f 93       	push	r17
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	2c 97       	sbiw	r28, 0x0c	; 12
    174a:	cd bf       	out	0x3d, r28	; 61
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	6c 01       	movw	r12, r24
    1750:	1b 01       	movw	r2, r22
    1752:	8a 01       	movw	r16, r20
    1754:	fc 01       	movw	r30, r24
    1756:	16 82       	std	Z+6, r1	; 0x06
    1758:	17 82       	std	Z+7, r1	; 0x07
    175a:	83 81       	ldd	r24, Z+3	; 0x03
    175c:	81 ff       	sbrs	r24, 1
    175e:	d1 c1       	rjmp	.+930    	; 0x1b02 <vfprintf+0x3e2>
    1760:	2e 01       	movw	r4, r28
    1762:	08 94       	sec
    1764:	41 1c       	adc	r4, r1
    1766:	51 1c       	adc	r5, r1
    1768:	f6 01       	movw	r30, r12
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	f1 01       	movw	r30, r2
    176e:	93 fd       	sbrc	r25, 3
    1770:	85 91       	lpm	r24, Z+
    1772:	93 ff       	sbrs	r25, 3
    1774:	81 91       	ld	r24, Z+
    1776:	1f 01       	movw	r2, r30
    1778:	88 23       	and	r24, r24
    177a:	09 f4       	brne	.+2      	; 0x177e <vfprintf+0x5e>
    177c:	be c1       	rjmp	.+892    	; 0x1afa <vfprintf+0x3da>
    177e:	85 32       	cpi	r24, 0x25	; 37
    1780:	39 f4       	brne	.+14     	; 0x1790 <vfprintf+0x70>
    1782:	93 fd       	sbrc	r25, 3
    1784:	85 91       	lpm	r24, Z+
    1786:	93 ff       	sbrs	r25, 3
    1788:	81 91       	ld	r24, Z+
    178a:	1f 01       	movw	r2, r30
    178c:	85 32       	cpi	r24, 0x25	; 37
    178e:	29 f4       	brne	.+10     	; 0x179a <vfprintf+0x7a>
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	b6 01       	movw	r22, r12
    1794:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <fputc>
    1798:	e7 cf       	rjmp	.-50     	; 0x1768 <vfprintf+0x48>
    179a:	ee 24       	eor	r14, r14
    179c:	ff 24       	eor	r15, r15
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	20 32       	cpi	r18, 0x20	; 32
    17a2:	b0 f4       	brcc	.+44     	; 0x17d0 <vfprintf+0xb0>
    17a4:	8b 32       	cpi	r24, 0x2B	; 43
    17a6:	69 f0       	breq	.+26     	; 0x17c2 <vfprintf+0xa2>
    17a8:	8c 32       	cpi	r24, 0x2C	; 44
    17aa:	28 f4       	brcc	.+10     	; 0x17b6 <vfprintf+0x96>
    17ac:	80 32       	cpi	r24, 0x20	; 32
    17ae:	51 f0       	breq	.+20     	; 0x17c4 <vfprintf+0xa4>
    17b0:	83 32       	cpi	r24, 0x23	; 35
    17b2:	71 f4       	brne	.+28     	; 0x17d0 <vfprintf+0xb0>
    17b4:	0b c0       	rjmp	.+22     	; 0x17cc <vfprintf+0xac>
    17b6:	8d 32       	cpi	r24, 0x2D	; 45
    17b8:	39 f0       	breq	.+14     	; 0x17c8 <vfprintf+0xa8>
    17ba:	80 33       	cpi	r24, 0x30	; 48
    17bc:	49 f4       	brne	.+18     	; 0x17d0 <vfprintf+0xb0>
    17be:	21 60       	ori	r18, 0x01	; 1
    17c0:	2c c0       	rjmp	.+88     	; 0x181a <vfprintf+0xfa>
    17c2:	22 60       	ori	r18, 0x02	; 2
    17c4:	24 60       	ori	r18, 0x04	; 4
    17c6:	29 c0       	rjmp	.+82     	; 0x181a <vfprintf+0xfa>
    17c8:	28 60       	ori	r18, 0x08	; 8
    17ca:	27 c0       	rjmp	.+78     	; 0x181a <vfprintf+0xfa>
    17cc:	20 61       	ori	r18, 0x10	; 16
    17ce:	25 c0       	rjmp	.+74     	; 0x181a <vfprintf+0xfa>
    17d0:	27 fd       	sbrc	r18, 7
    17d2:	2c c0       	rjmp	.+88     	; 0x182c <vfprintf+0x10c>
    17d4:	38 2f       	mov	r19, r24
    17d6:	30 53       	subi	r19, 0x30	; 48
    17d8:	3a 30       	cpi	r19, 0x0A	; 10
    17da:	98 f4       	brcc	.+38     	; 0x1802 <vfprintf+0xe2>
    17dc:	26 ff       	sbrs	r18, 6
    17de:	08 c0       	rjmp	.+16     	; 0x17f0 <vfprintf+0xd0>
    17e0:	8e 2d       	mov	r24, r14
    17e2:	88 0f       	add	r24, r24
    17e4:	e8 2e       	mov	r14, r24
    17e6:	ee 0c       	add	r14, r14
    17e8:	ee 0c       	add	r14, r14
    17ea:	e8 0e       	add	r14, r24
    17ec:	e3 0e       	add	r14, r19
    17ee:	15 c0       	rjmp	.+42     	; 0x181a <vfprintf+0xfa>
    17f0:	8f 2d       	mov	r24, r15
    17f2:	88 0f       	add	r24, r24
    17f4:	f8 2e       	mov	r15, r24
    17f6:	ff 0c       	add	r15, r15
    17f8:	ff 0c       	add	r15, r15
    17fa:	f8 0e       	add	r15, r24
    17fc:	f3 0e       	add	r15, r19
    17fe:	20 62       	ori	r18, 0x20	; 32
    1800:	0c c0       	rjmp	.+24     	; 0x181a <vfprintf+0xfa>
    1802:	8e 32       	cpi	r24, 0x2E	; 46
    1804:	21 f4       	brne	.+8      	; 0x180e <vfprintf+0xee>
    1806:	26 fd       	sbrc	r18, 6
    1808:	78 c1       	rjmp	.+752    	; 0x1afa <vfprintf+0x3da>
    180a:	20 64       	ori	r18, 0x40	; 64
    180c:	06 c0       	rjmp	.+12     	; 0x181a <vfprintf+0xfa>
    180e:	8c 36       	cpi	r24, 0x6C	; 108
    1810:	11 f4       	brne	.+4      	; 0x1816 <vfprintf+0xf6>
    1812:	20 68       	ori	r18, 0x80	; 128
    1814:	02 c0       	rjmp	.+4      	; 0x181a <vfprintf+0xfa>
    1816:	88 36       	cpi	r24, 0x68	; 104
    1818:	49 f4       	brne	.+18     	; 0x182c <vfprintf+0x10c>
    181a:	f1 01       	movw	r30, r2
    181c:	93 fd       	sbrc	r25, 3
    181e:	85 91       	lpm	r24, Z+
    1820:	93 ff       	sbrs	r25, 3
    1822:	81 91       	ld	r24, Z+
    1824:	1f 01       	movw	r2, r30
    1826:	88 23       	and	r24, r24
    1828:	09 f0       	breq	.+2      	; 0x182c <vfprintf+0x10c>
    182a:	ba cf       	rjmp	.-140    	; 0x17a0 <vfprintf+0x80>
    182c:	98 2f       	mov	r25, r24
    182e:	95 54       	subi	r25, 0x45	; 69
    1830:	93 30       	cpi	r25, 0x03	; 3
    1832:	18 f0       	brcs	.+6      	; 0x183a <vfprintf+0x11a>
    1834:	90 52       	subi	r25, 0x20	; 32
    1836:	93 30       	cpi	r25, 0x03	; 3
    1838:	28 f4       	brcc	.+10     	; 0x1844 <vfprintf+0x124>
    183a:	0c 5f       	subi	r16, 0xFC	; 252
    183c:	1f 4f       	sbci	r17, 0xFF	; 255
    183e:	ff e3       	ldi	r31, 0x3F	; 63
    1840:	f9 83       	std	Y+1, r31	; 0x01
    1842:	0d c0       	rjmp	.+26     	; 0x185e <vfprintf+0x13e>
    1844:	83 36       	cpi	r24, 0x63	; 99
    1846:	31 f0       	breq	.+12     	; 0x1854 <vfprintf+0x134>
    1848:	83 37       	cpi	r24, 0x73	; 115
    184a:	71 f0       	breq	.+28     	; 0x1868 <vfprintf+0x148>
    184c:	83 35       	cpi	r24, 0x53	; 83
    184e:	09 f0       	breq	.+2      	; 0x1852 <vfprintf+0x132>
    1850:	60 c0       	rjmp	.+192    	; 0x1912 <vfprintf+0x1f2>
    1852:	22 c0       	rjmp	.+68     	; 0x1898 <vfprintf+0x178>
    1854:	f8 01       	movw	r30, r16
    1856:	80 81       	ld	r24, Z
    1858:	89 83       	std	Y+1, r24	; 0x01
    185a:	0e 5f       	subi	r16, 0xFE	; 254
    185c:	1f 4f       	sbci	r17, 0xFF	; 255
    185e:	42 01       	movw	r8, r4
    1860:	71 e0       	ldi	r23, 0x01	; 1
    1862:	a7 2e       	mov	r10, r23
    1864:	b1 2c       	mov	r11, r1
    1866:	16 c0       	rjmp	.+44     	; 0x1894 <vfprintf+0x174>
    1868:	62 e0       	ldi	r22, 0x02	; 2
    186a:	66 2e       	mov	r6, r22
    186c:	71 2c       	mov	r7, r1
    186e:	60 0e       	add	r6, r16
    1870:	71 1e       	adc	r7, r17
    1872:	f8 01       	movw	r30, r16
    1874:	80 80       	ld	r8, Z
    1876:	91 80       	ldd	r9, Z+1	; 0x01
    1878:	26 ff       	sbrs	r18, 6
    187a:	03 c0       	rjmp	.+6      	; 0x1882 <vfprintf+0x162>
    187c:	6e 2d       	mov	r22, r14
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <vfprintf+0x166>
    1882:	6f ef       	ldi	r22, 0xFF	; 255
    1884:	7f ef       	ldi	r23, 0xFF	; 255
    1886:	c4 01       	movw	r24, r8
    1888:	2c 87       	std	Y+12, r18	; 0x0c
    188a:	0e 94 99 10 	call	0x2132	; 0x2132 <strnlen>
    188e:	5c 01       	movw	r10, r24
    1890:	83 01       	movw	r16, r6
    1892:	2c 85       	ldd	r18, Y+12	; 0x0c
    1894:	2f 77       	andi	r18, 0x7F	; 127
    1896:	17 c0       	rjmp	.+46     	; 0x18c6 <vfprintf+0x1a6>
    1898:	52 e0       	ldi	r21, 0x02	; 2
    189a:	65 2e       	mov	r6, r21
    189c:	71 2c       	mov	r7, r1
    189e:	60 0e       	add	r6, r16
    18a0:	71 1e       	adc	r7, r17
    18a2:	f8 01       	movw	r30, r16
    18a4:	80 80       	ld	r8, Z
    18a6:	91 80       	ldd	r9, Z+1	; 0x01
    18a8:	26 ff       	sbrs	r18, 6
    18aa:	03 c0       	rjmp	.+6      	; 0x18b2 <vfprintf+0x192>
    18ac:	6e 2d       	mov	r22, r14
    18ae:	70 e0       	ldi	r23, 0x00	; 0
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <vfprintf+0x196>
    18b2:	6f ef       	ldi	r22, 0xFF	; 255
    18b4:	7f ef       	ldi	r23, 0xFF	; 255
    18b6:	c4 01       	movw	r24, r8
    18b8:	2c 87       	std	Y+12, r18	; 0x0c
    18ba:	0e 94 85 10 	call	0x210a	; 0x210a <strnlen_P>
    18be:	5c 01       	movw	r10, r24
    18c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    18c2:	20 68       	ori	r18, 0x80	; 128
    18c4:	83 01       	movw	r16, r6
    18c6:	23 fd       	sbrc	r18, 3
    18c8:	20 c0       	rjmp	.+64     	; 0x190a <vfprintf+0x1ea>
    18ca:	08 c0       	rjmp	.+16     	; 0x18dc <vfprintf+0x1bc>
    18cc:	80 e2       	ldi	r24, 0x20	; 32
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	b6 01       	movw	r22, r12
    18d2:	2c 87       	std	Y+12, r18	; 0x0c
    18d4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <fputc>
    18d8:	fa 94       	dec	r15
    18da:	2c 85       	ldd	r18, Y+12	; 0x0c
    18dc:	8f 2d       	mov	r24, r15
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a8 16       	cp	r10, r24
    18e2:	b9 06       	cpc	r11, r25
    18e4:	98 f3       	brcs	.-26     	; 0x18cc <vfprintf+0x1ac>
    18e6:	11 c0       	rjmp	.+34     	; 0x190a <vfprintf+0x1ea>
    18e8:	f4 01       	movw	r30, r8
    18ea:	27 fd       	sbrc	r18, 7
    18ec:	85 91       	lpm	r24, Z+
    18ee:	27 ff       	sbrs	r18, 7
    18f0:	81 91       	ld	r24, Z+
    18f2:	4f 01       	movw	r8, r30
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	b6 01       	movw	r22, r12
    18f8:	2c 87       	std	Y+12, r18	; 0x0c
    18fa:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <fputc>
    18fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1900:	f1 10       	cpse	r15, r1
    1902:	fa 94       	dec	r15
    1904:	08 94       	sec
    1906:	a1 08       	sbc	r10, r1
    1908:	b1 08       	sbc	r11, r1
    190a:	a1 14       	cp	r10, r1
    190c:	b1 04       	cpc	r11, r1
    190e:	61 f7       	brne	.-40     	; 0x18e8 <vfprintf+0x1c8>
    1910:	f1 c0       	rjmp	.+482    	; 0x1af4 <vfprintf+0x3d4>
    1912:	84 36       	cpi	r24, 0x64	; 100
    1914:	11 f0       	breq	.+4      	; 0x191a <vfprintf+0x1fa>
    1916:	89 36       	cpi	r24, 0x69	; 105
    1918:	49 f5       	brne	.+82     	; 0x196c <vfprintf+0x24c>
    191a:	27 ff       	sbrs	r18, 7
    191c:	08 c0       	rjmp	.+16     	; 0x192e <vfprintf+0x20e>
    191e:	f8 01       	movw	r30, r16
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	0c 5f       	subi	r16, 0xFC	; 252
    192a:	1f 4f       	sbci	r17, 0xFF	; 255
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <vfprintf+0x220>
    192e:	f8 01       	movw	r30, r16
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	88 27       	eor	r24, r24
    1936:	77 fd       	sbrc	r23, 7
    1938:	80 95       	com	r24
    193a:	98 2f       	mov	r25, r24
    193c:	0e 5f       	subi	r16, 0xFE	; 254
    193e:	1f 4f       	sbci	r17, 0xFF	; 255
    1940:	4f e6       	ldi	r20, 0x6F	; 111
    1942:	b4 2e       	mov	r11, r20
    1944:	b2 22       	and	r11, r18
    1946:	97 ff       	sbrs	r25, 7
    1948:	09 c0       	rjmp	.+18     	; 0x195c <vfprintf+0x23c>
    194a:	90 95       	com	r25
    194c:	80 95       	com	r24
    194e:	70 95       	com	r23
    1950:	61 95       	neg	r22
    1952:	7f 4f       	sbci	r23, 0xFF	; 255
    1954:	8f 4f       	sbci	r24, 0xFF	; 255
    1956:	9f 4f       	sbci	r25, 0xFF	; 255
    1958:	f0 e8       	ldi	r31, 0x80	; 128
    195a:	bf 2a       	or	r11, r31
    195c:	a2 01       	movw	r20, r4
    195e:	2a e0       	ldi	r18, 0x0A	; 10
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	0e 94 bf 10 	call	0x217e	; 0x217e <__ultoa_invert>
    1966:	78 2e       	mov	r7, r24
    1968:	74 18       	sub	r7, r4
    196a:	45 c0       	rjmp	.+138    	; 0x19f6 <vfprintf+0x2d6>
    196c:	85 37       	cpi	r24, 0x75	; 117
    196e:	31 f4       	brne	.+12     	; 0x197c <vfprintf+0x25c>
    1970:	3f ee       	ldi	r19, 0xEF	; 239
    1972:	b3 2e       	mov	r11, r19
    1974:	b2 22       	and	r11, r18
    1976:	2a e0       	ldi	r18, 0x0A	; 10
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	25 c0       	rjmp	.+74     	; 0x19c6 <vfprintf+0x2a6>
    197c:	99 ef       	ldi	r25, 0xF9	; 249
    197e:	b9 2e       	mov	r11, r25
    1980:	b2 22       	and	r11, r18
    1982:	8f 36       	cpi	r24, 0x6F	; 111
    1984:	c1 f0       	breq	.+48     	; 0x19b6 <vfprintf+0x296>
    1986:	80 37       	cpi	r24, 0x70	; 112
    1988:	20 f4       	brcc	.+8      	; 0x1992 <vfprintf+0x272>
    198a:	88 35       	cpi	r24, 0x58	; 88
    198c:	09 f0       	breq	.+2      	; 0x1990 <vfprintf+0x270>
    198e:	b5 c0       	rjmp	.+362    	; 0x1afa <vfprintf+0x3da>
    1990:	0d c0       	rjmp	.+26     	; 0x19ac <vfprintf+0x28c>
    1992:	80 37       	cpi	r24, 0x70	; 112
    1994:	21 f0       	breq	.+8      	; 0x199e <vfprintf+0x27e>
    1996:	88 37       	cpi	r24, 0x78	; 120
    1998:	09 f0       	breq	.+2      	; 0x199c <vfprintf+0x27c>
    199a:	af c0       	rjmp	.+350    	; 0x1afa <vfprintf+0x3da>
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <vfprintf+0x282>
    199e:	20 e1       	ldi	r18, 0x10	; 16
    19a0:	b2 2a       	or	r11, r18
    19a2:	b4 fe       	sbrs	r11, 4
    19a4:	0b c0       	rjmp	.+22     	; 0x19bc <vfprintf+0x29c>
    19a6:	84 e0       	ldi	r24, 0x04	; 4
    19a8:	b8 2a       	or	r11, r24
    19aa:	08 c0       	rjmp	.+16     	; 0x19bc <vfprintf+0x29c>
    19ac:	b4 fe       	sbrs	r11, 4
    19ae:	09 c0       	rjmp	.+18     	; 0x19c2 <vfprintf+0x2a2>
    19b0:	e6 e0       	ldi	r30, 0x06	; 6
    19b2:	be 2a       	or	r11, r30
    19b4:	06 c0       	rjmp	.+12     	; 0x19c2 <vfprintf+0x2a2>
    19b6:	28 e0       	ldi	r18, 0x08	; 8
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	05 c0       	rjmp	.+10     	; 0x19c6 <vfprintf+0x2a6>
    19bc:	20 e1       	ldi	r18, 0x10	; 16
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <vfprintf+0x2a6>
    19c2:	20 e1       	ldi	r18, 0x10	; 16
    19c4:	32 e0       	ldi	r19, 0x02	; 2
    19c6:	b7 fe       	sbrs	r11, 7
    19c8:	08 c0       	rjmp	.+16     	; 0x19da <vfprintf+0x2ba>
    19ca:	f8 01       	movw	r30, r16
    19cc:	60 81       	ld	r22, Z
    19ce:	71 81       	ldd	r23, Z+1	; 0x01
    19d0:	82 81       	ldd	r24, Z+2	; 0x02
    19d2:	93 81       	ldd	r25, Z+3	; 0x03
    19d4:	0c 5f       	subi	r16, 0xFC	; 252
    19d6:	1f 4f       	sbci	r17, 0xFF	; 255
    19d8:	07 c0       	rjmp	.+14     	; 0x19e8 <vfprintf+0x2c8>
    19da:	f8 01       	movw	r30, r16
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	0e 5f       	subi	r16, 0xFE	; 254
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	a2 01       	movw	r20, r4
    19ea:	0e 94 bf 10 	call	0x217e	; 0x217e <__ultoa_invert>
    19ee:	78 2e       	mov	r7, r24
    19f0:	74 18       	sub	r7, r4
    19f2:	ff e7       	ldi	r31, 0x7F	; 127
    19f4:	bf 22       	and	r11, r31
    19f6:	b6 fe       	sbrs	r11, 6
    19f8:	0b c0       	rjmp	.+22     	; 0x1a10 <vfprintf+0x2f0>
    19fa:	2e ef       	ldi	r18, 0xFE	; 254
    19fc:	b2 22       	and	r11, r18
    19fe:	7e 14       	cp	r7, r14
    1a00:	38 f4       	brcc	.+14     	; 0x1a10 <vfprintf+0x2f0>
    1a02:	b4 fe       	sbrs	r11, 4
    1a04:	07 c0       	rjmp	.+14     	; 0x1a14 <vfprintf+0x2f4>
    1a06:	b2 fc       	sbrc	r11, 2
    1a08:	05 c0       	rjmp	.+10     	; 0x1a14 <vfprintf+0x2f4>
    1a0a:	8f ee       	ldi	r24, 0xEF	; 239
    1a0c:	b8 22       	and	r11, r24
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <vfprintf+0x2f4>
    1a10:	a7 2c       	mov	r10, r7
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <vfprintf+0x2f6>
    1a14:	ae 2c       	mov	r10, r14
    1a16:	8b 2d       	mov	r24, r11
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	b4 fe       	sbrs	r11, 4
    1a1c:	0d c0       	rjmp	.+26     	; 0x1a38 <vfprintf+0x318>
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e7 0d       	add	r30, r7
    1a22:	f1 1d       	adc	r31, r1
    1a24:	20 81       	ld	r18, Z
    1a26:	20 33       	cpi	r18, 0x30	; 48
    1a28:	19 f4       	brne	.+6      	; 0x1a30 <vfprintf+0x310>
    1a2a:	e9 ee       	ldi	r30, 0xE9	; 233
    1a2c:	be 22       	and	r11, r30
    1a2e:	09 c0       	rjmp	.+18     	; 0x1a42 <vfprintf+0x322>
    1a30:	a3 94       	inc	r10
    1a32:	b2 fe       	sbrs	r11, 2
    1a34:	06 c0       	rjmp	.+12     	; 0x1a42 <vfprintf+0x322>
    1a36:	04 c0       	rjmp	.+8      	; 0x1a40 <vfprintf+0x320>
    1a38:	86 78       	andi	r24, 0x86	; 134
    1a3a:	90 70       	andi	r25, 0x00	; 0
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	09 f0       	breq	.+2      	; 0x1a42 <vfprintf+0x322>
    1a40:	a3 94       	inc	r10
    1a42:	8b 2c       	mov	r8, r11
    1a44:	99 24       	eor	r9, r9
    1a46:	b3 fc       	sbrc	r11, 3
    1a48:	14 c0       	rjmp	.+40     	; 0x1a72 <vfprintf+0x352>
    1a4a:	b0 fe       	sbrs	r11, 0
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <vfprintf+0x34c>
    1a4e:	af 14       	cp	r10, r15
    1a50:	28 f4       	brcc	.+10     	; 0x1a5c <vfprintf+0x33c>
    1a52:	e7 2c       	mov	r14, r7
    1a54:	ef 0c       	add	r14, r15
    1a56:	ea 18       	sub	r14, r10
    1a58:	af 2c       	mov	r10, r15
    1a5a:	08 c0       	rjmp	.+16     	; 0x1a6c <vfprintf+0x34c>
    1a5c:	e7 2c       	mov	r14, r7
    1a5e:	06 c0       	rjmp	.+12     	; 0x1a6c <vfprintf+0x34c>
    1a60:	80 e2       	ldi	r24, 0x20	; 32
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	b6 01       	movw	r22, r12
    1a66:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <fputc>
    1a6a:	a3 94       	inc	r10
    1a6c:	af 14       	cp	r10, r15
    1a6e:	c0 f3       	brcs	.-16     	; 0x1a60 <vfprintf+0x340>
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <vfprintf+0x35a>
    1a72:	af 14       	cp	r10, r15
    1a74:	10 f4       	brcc	.+4      	; 0x1a7a <vfprintf+0x35a>
    1a76:	fa 18       	sub	r15, r10
    1a78:	01 c0       	rjmp	.+2      	; 0x1a7c <vfprintf+0x35c>
    1a7a:	ff 24       	eor	r15, r15
    1a7c:	84 fe       	sbrs	r8, 4
    1a7e:	0f c0       	rjmp	.+30     	; 0x1a9e <vfprintf+0x37e>
    1a80:	80 e3       	ldi	r24, 0x30	; 48
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	b6 01       	movw	r22, r12
    1a86:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <fputc>
    1a8a:	82 fe       	sbrs	r8, 2
    1a8c:	1f c0       	rjmp	.+62     	; 0x1acc <vfprintf+0x3ac>
    1a8e:	81 fe       	sbrs	r8, 1
    1a90:	03 c0       	rjmp	.+6      	; 0x1a98 <vfprintf+0x378>
    1a92:	88 e5       	ldi	r24, 0x58	; 88
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	10 c0       	rjmp	.+32     	; 0x1ab8 <vfprintf+0x398>
    1a98:	88 e7       	ldi	r24, 0x78	; 120
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0d c0       	rjmp	.+26     	; 0x1ab8 <vfprintf+0x398>
    1a9e:	c4 01       	movw	r24, r8
    1aa0:	86 78       	andi	r24, 0x86	; 134
    1aa2:	90 70       	andi	r25, 0x00	; 0
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	91 f0       	breq	.+36     	; 0x1acc <vfprintf+0x3ac>
    1aa8:	81 fc       	sbrc	r8, 1
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <vfprintf+0x390>
    1aac:	80 e2       	ldi	r24, 0x20	; 32
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <vfprintf+0x392>
    1ab0:	8b e2       	ldi	r24, 0x2B	; 43
    1ab2:	b7 fc       	sbrc	r11, 7
    1ab4:	8d e2       	ldi	r24, 0x2D	; 45
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	b6 01       	movw	r22, r12
    1aba:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <fputc>
    1abe:	06 c0       	rjmp	.+12     	; 0x1acc <vfprintf+0x3ac>
    1ac0:	80 e3       	ldi	r24, 0x30	; 48
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	b6 01       	movw	r22, r12
    1ac6:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <fputc>
    1aca:	ea 94       	dec	r14
    1acc:	7e 14       	cp	r7, r14
    1ace:	c0 f3       	brcs	.-16     	; 0x1ac0 <vfprintf+0x3a0>
    1ad0:	7a 94       	dec	r7
    1ad2:	f2 01       	movw	r30, r4
    1ad4:	e7 0d       	add	r30, r7
    1ad6:	f1 1d       	adc	r31, r1
    1ad8:	80 81       	ld	r24, Z
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	b6 01       	movw	r22, r12
    1ade:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <fputc>
    1ae2:	77 20       	and	r7, r7
    1ae4:	a9 f7       	brne	.-22     	; 0x1ad0 <vfprintf+0x3b0>
    1ae6:	06 c0       	rjmp	.+12     	; 0x1af4 <vfprintf+0x3d4>
    1ae8:	80 e2       	ldi	r24, 0x20	; 32
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	b6 01       	movw	r22, r12
    1aee:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <fputc>
    1af2:	fa 94       	dec	r15
    1af4:	ff 20       	and	r15, r15
    1af6:	c1 f7       	brne	.-16     	; 0x1ae8 <vfprintf+0x3c8>
    1af8:	37 ce       	rjmp	.-914    	; 0x1768 <vfprintf+0x48>
    1afa:	f6 01       	movw	r30, r12
    1afc:	26 81       	ldd	r18, Z+6	; 0x06
    1afe:	37 81       	ldd	r19, Z+7	; 0x07
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <vfprintf+0x3e6>
    1b02:	2f ef       	ldi	r18, 0xFF	; 255
    1b04:	3f ef       	ldi	r19, 0xFF	; 255
    1b06:	c9 01       	movw	r24, r18
    1b08:	2c 96       	adiw	r28, 0x0c	; 12
    1b0a:	cd bf       	out	0x3d, r28	; 61
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	1f 91       	pop	r17
    1b14:	0f 91       	pop	r16
    1b16:	ff 90       	pop	r15
    1b18:	ef 90       	pop	r14
    1b1a:	df 90       	pop	r13
    1b1c:	cf 90       	pop	r12
    1b1e:	bf 90       	pop	r11
    1b20:	af 90       	pop	r10
    1b22:	9f 90       	pop	r9
    1b24:	8f 90       	pop	r8
    1b26:	7f 90       	pop	r7
    1b28:	6f 90       	pop	r6
    1b2a:	5f 90       	pop	r5
    1b2c:	4f 90       	pop	r4
    1b2e:	3f 90       	pop	r3
    1b30:	2f 90       	pop	r2
    1b32:	08 95       	ret

00001b34 <putval>:
    1b34:	20 fd       	sbrc	r18, 0
    1b36:	09 c0       	rjmp	.+18     	; 0x1b4a <putval+0x16>
    1b38:	fc 01       	movw	r30, r24
    1b3a:	23 fd       	sbrc	r18, 3
    1b3c:	05 c0       	rjmp	.+10     	; 0x1b48 <putval+0x14>
    1b3e:	22 ff       	sbrs	r18, 2
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <putval+0x12>
    1b42:	73 83       	std	Z+3, r23	; 0x03
    1b44:	62 83       	std	Z+2, r22	; 0x02
    1b46:	51 83       	std	Z+1, r21	; 0x01
    1b48:	40 83       	st	Z, r20
    1b4a:	08 95       	ret

00001b4c <mulacc>:
    1b4c:	ef 92       	push	r14
    1b4e:	ff 92       	push	r15
    1b50:	0f 93       	push	r16
    1b52:	1f 93       	push	r17
    1b54:	44 fd       	sbrc	r20, 4
    1b56:	10 c0       	rjmp	.+32     	; 0x1b78 <mulacc+0x2c>
    1b58:	46 fd       	sbrc	r20, 6
    1b5a:	10 c0       	rjmp	.+32     	; 0x1b7c <mulacc+0x30>
    1b5c:	db 01       	movw	r26, r22
    1b5e:	fc 01       	movw	r30, r24
    1b60:	aa 0f       	add	r26, r26
    1b62:	bb 1f       	adc	r27, r27
    1b64:	ee 1f       	adc	r30, r30
    1b66:	ff 1f       	adc	r31, r31
    1b68:	10 94       	com	r1
    1b6a:	d1 f7       	brne	.-12     	; 0x1b60 <mulacc+0x14>
    1b6c:	6a 0f       	add	r22, r26
    1b6e:	7b 1f       	adc	r23, r27
    1b70:	8e 1f       	adc	r24, r30
    1b72:	9f 1f       	adc	r25, r31
    1b74:	31 e0       	ldi	r19, 0x01	; 1
    1b76:	03 c0       	rjmp	.+6      	; 0x1b7e <mulacc+0x32>
    1b78:	33 e0       	ldi	r19, 0x03	; 3
    1b7a:	01 c0       	rjmp	.+2      	; 0x1b7e <mulacc+0x32>
    1b7c:	34 e0       	ldi	r19, 0x04	; 4
    1b7e:	66 0f       	add	r22, r22
    1b80:	77 1f       	adc	r23, r23
    1b82:	88 1f       	adc	r24, r24
    1b84:	99 1f       	adc	r25, r25
    1b86:	31 50       	subi	r19, 0x01	; 1
    1b88:	d1 f7       	brne	.-12     	; 0x1b7e <mulacc+0x32>
    1b8a:	7b 01       	movw	r14, r22
    1b8c:	8c 01       	movw	r16, r24
    1b8e:	e2 0e       	add	r14, r18
    1b90:	f1 1c       	adc	r15, r1
    1b92:	01 1d       	adc	r16, r1
    1b94:	11 1d       	adc	r17, r1
    1b96:	a8 01       	movw	r20, r16
    1b98:	97 01       	movw	r18, r14
    1b9a:	b7 01       	movw	r22, r14
    1b9c:	ca 01       	movw	r24, r20
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	08 95       	ret

00001ba8 <skip_spaces>:
    1ba8:	ef 92       	push	r14
    1baa:	ff 92       	push	r15
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	8c 01       	movw	r16, r24
    1bb6:	c8 01       	movw	r24, r16
    1bb8:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
    1bbc:	ec 01       	movw	r28, r24
    1bbe:	97 fd       	sbrc	r25, 7
    1bc0:	08 c0       	rjmp	.+16     	; 0x1bd2 <skip_spaces+0x2a>
    1bc2:	0e 94 72 10 	call	0x20e4	; 0x20e4 <isspace>
    1bc6:	00 97       	sbiw	r24, 0x00	; 0
    1bc8:	b1 f7       	brne	.-20     	; 0x1bb6 <skip_spaces+0xe>
    1bca:	ce 01       	movw	r24, r28
    1bcc:	b8 01       	movw	r22, r16
    1bce:	0e 94 a4 10 	call	0x2148	; 0x2148 <ungetc>
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	08 95       	ret

00001be2 <conv_int>:
    1be2:	8f 92       	push	r8
    1be4:	9f 92       	push	r9
    1be6:	af 92       	push	r10
    1be8:	bf 92       	push	r11
    1bea:	df 92       	push	r13
    1bec:	ef 92       	push	r14
    1bee:	ff 92       	push	r15
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	0f 92       	push	r0
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	4c 01       	movw	r8, r24
    1c00:	d6 2e       	mov	r13, r22
    1c02:	5a 01       	movw	r10, r20
    1c04:	12 2f       	mov	r17, r18
    1c06:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
    1c0a:	8b 32       	cpi	r24, 0x2B	; 43
    1c0c:	19 f0       	breq	.+6      	; 0x1c14 <conv_int+0x32>
    1c0e:	8d 32       	cpi	r24, 0x2D	; 45
    1c10:	49 f4       	brne	.+18     	; 0x1c24 <conv_int+0x42>
    1c12:	10 68       	ori	r17, 0x80	; 128
    1c14:	da 94       	dec	r13
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <conv_int+0x38>
    1c18:	6c c0       	rjmp	.+216    	; 0x1cf2 <conv_int+0x110>
    1c1a:	c4 01       	movw	r24, r8
    1c1c:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
    1c20:	97 fd       	sbrc	r25, 7
    1c22:	67 c0       	rjmp	.+206    	; 0x1cf2 <conv_int+0x110>
    1c24:	31 2f       	mov	r19, r17
    1c26:	3d 7f       	andi	r19, 0xFD	; 253
    1c28:	23 2f       	mov	r18, r19
    1c2a:	20 73       	andi	r18, 0x30	; 48
    1c2c:	f1 f4       	brne	.+60     	; 0x1c6a <conv_int+0x88>
    1c2e:	80 33       	cpi	r24, 0x30	; 48
    1c30:	e1 f4       	brne	.+56     	; 0x1c6a <conv_int+0x88>
    1c32:	da 94       	dec	r13
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <conv_int+0x56>
    1c36:	48 c0       	rjmp	.+144    	; 0x1cc8 <conv_int+0xe6>
    1c38:	c4 01       	movw	r24, r8
    1c3a:	39 83       	std	Y+1, r19	; 0x01
    1c3c:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
    1c40:	39 81       	ldd	r19, Y+1	; 0x01
    1c42:	97 fd       	sbrc	r25, 7
    1c44:	41 c0       	rjmp	.+130    	; 0x1cc8 <conv_int+0xe6>
    1c46:	32 60       	ori	r19, 0x02	; 2
    1c48:	88 37       	cpi	r24, 0x78	; 120
    1c4a:	11 f0       	breq	.+4      	; 0x1c50 <conv_int+0x6e>
    1c4c:	88 35       	cpi	r24, 0x58	; 88
    1c4e:	59 f4       	brne	.+22     	; 0x1c66 <conv_int+0x84>
    1c50:	30 64       	ori	r19, 0x40	; 64
    1c52:	da 94       	dec	r13
    1c54:	c9 f1       	breq	.+114    	; 0x1cc8 <conv_int+0xe6>
    1c56:	c4 01       	movw	r24, r8
    1c58:	39 83       	std	Y+1, r19	; 0x01
    1c5a:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
    1c5e:	39 81       	ldd	r19, Y+1	; 0x01
    1c60:	97 ff       	sbrs	r25, 7
    1c62:	03 c0       	rjmp	.+6      	; 0x1c6a <conv_int+0x88>
    1c64:	31 c0       	rjmp	.+98     	; 0x1cc8 <conv_int+0xe6>
    1c66:	36 ff       	sbrs	r19, 6
    1c68:	30 61       	ori	r19, 0x10	; 16
    1c6a:	ee 24       	eor	r14, r14
    1c6c:	ff 24       	eor	r15, r15
    1c6e:	87 01       	movw	r16, r14
    1c70:	28 2f       	mov	r18, r24
    1c72:	20 53       	subi	r18, 0x30	; 48
    1c74:	28 30       	cpi	r18, 0x08	; 8
    1c76:	90 f0       	brcs	.+36     	; 0x1c9c <conv_int+0xba>
    1c78:	34 fd       	sbrc	r19, 4
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <conv_int+0xac>
    1c7c:	2a 30       	cpi	r18, 0x0A	; 10
    1c7e:	70 f0       	brcs	.+28     	; 0x1c9c <conv_int+0xba>
    1c80:	36 ff       	sbrs	r19, 6
    1c82:	05 c0       	rjmp	.+10     	; 0x1c8e <conv_int+0xac>
    1c84:	2f 7d       	andi	r18, 0xDF	; 223
    1c86:	42 2f       	mov	r20, r18
    1c88:	41 51       	subi	r20, 0x11	; 17
    1c8a:	46 30       	cpi	r20, 0x06	; 6
    1c8c:	30 f0       	brcs	.+12     	; 0x1c9a <conv_int+0xb8>
    1c8e:	b4 01       	movw	r22, r8
    1c90:	39 83       	std	Y+1, r19	; 0x01
    1c92:	0e 94 a4 10 	call	0x2148	; 0x2148 <ungetc>
    1c96:	39 81       	ldd	r19, Y+1	; 0x01
    1c98:	14 c0       	rjmp	.+40     	; 0x1cc2 <conv_int+0xe0>
    1c9a:	27 50       	subi	r18, 0x07	; 7
    1c9c:	c8 01       	movw	r24, r16
    1c9e:	b7 01       	movw	r22, r14
    1ca0:	43 2f       	mov	r20, r19
    1ca2:	39 83       	std	Y+1, r19	; 0x01
    1ca4:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <mulacc>
    1ca8:	7b 01       	movw	r14, r22
    1caa:	8c 01       	movw	r16, r24
    1cac:	39 81       	ldd	r19, Y+1	; 0x01
    1cae:	32 60       	ori	r19, 0x02	; 2
    1cb0:	da 94       	dec	r13
    1cb2:	69 f0       	breq	.+26     	; 0x1cce <conv_int+0xec>
    1cb4:	c4 01       	movw	r24, r8
    1cb6:	39 83       	std	Y+1, r19	; 0x01
    1cb8:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
    1cbc:	39 81       	ldd	r19, Y+1	; 0x01
    1cbe:	97 ff       	sbrs	r25, 7
    1cc0:	d7 cf       	rjmp	.-82     	; 0x1c70 <conv_int+0x8e>
    1cc2:	31 fd       	sbrc	r19, 1
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <conv_int+0xec>
    1cc6:	15 c0       	rjmp	.+42     	; 0x1cf2 <conv_int+0x110>
    1cc8:	ee 24       	eor	r14, r14
    1cca:	ff 24       	eor	r15, r15
    1ccc:	87 01       	movw	r16, r14
    1cce:	37 ff       	sbrs	r19, 7
    1cd0:	08 c0       	rjmp	.+16     	; 0x1ce2 <conv_int+0x100>
    1cd2:	10 95       	com	r17
    1cd4:	00 95       	com	r16
    1cd6:	f0 94       	com	r15
    1cd8:	e0 94       	com	r14
    1cda:	e1 1c       	adc	r14, r1
    1cdc:	f1 1c       	adc	r15, r1
    1cde:	01 1d       	adc	r16, r1
    1ce0:	11 1d       	adc	r17, r1
    1ce2:	c5 01       	movw	r24, r10
    1ce4:	b8 01       	movw	r22, r16
    1ce6:	a7 01       	movw	r20, r14
    1ce8:	23 2f       	mov	r18, r19
    1cea:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <putval>
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	01 c0       	rjmp	.+2      	; 0x1cf4 <conv_int+0x112>
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	0f 90       	pop	r0
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	1f 91       	pop	r17
    1cfc:	0f 91       	pop	r16
    1cfe:	ff 90       	pop	r15
    1d00:	ef 90       	pop	r14
    1d02:	df 90       	pop	r13
    1d04:	bf 90       	pop	r11
    1d06:	af 90       	pop	r10
    1d08:	9f 90       	pop	r9
    1d0a:	8f 90       	pop	r8
    1d0c:	08 95       	ret

00001d0e <conv_brk>:
    1d0e:	6f 92       	push	r6
    1d10:	7f 92       	push	r7
    1d12:	8f 92       	push	r8
    1d14:	9f 92       	push	r9
    1d16:	af 92       	push	r10
    1d18:	bf 92       	push	r11
    1d1a:	cf 92       	push	r12
    1d1c:	df 92       	push	r13
    1d1e:	ef 92       	push	r14
    1d20:	ff 92       	push	r15
    1d22:	0f 93       	push	r16
    1d24:	1f 93       	push	r17
    1d26:	df 93       	push	r29
    1d28:	cf 93       	push	r28
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	a1 97       	sbiw	r28, 0x21	; 33
    1d30:	cd bf       	out	0x3d, r28	; 61
    1d32:	de bf       	out	0x3e, r29	; 62
    1d34:	6c 01       	movw	r12, r24
    1d36:	8a 01       	movw	r16, r20
    1d38:	79 01       	movw	r14, r18
    1d3a:	9e 01       	movw	r18, r28
    1d3c:	2f 5f       	subi	r18, 0xFF	; 255
    1d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d40:	80 e2       	ldi	r24, 0x20	; 32
    1d42:	f9 01       	movw	r30, r18
    1d44:	11 92       	st	Z+, r1
    1d46:	8a 95       	dec	r24
    1d48:	e9 f7       	brne	.-6      	; 0x1d44 <conv_brk+0x36>
    1d4a:	f6 01       	movw	r30, r12
    1d4c:	83 80       	ldd	r8, Z+3	; 0x03
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	bb 24       	eor	r11, r11
    1d54:	99 24       	eor	r9, r9
    1d56:	70 e0       	ldi	r23, 0x00	; 0
    1d58:	a1 e0       	ldi	r26, 0x01	; 1
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	f7 01       	movw	r30, r14
    1d5e:	83 fc       	sbrc	r8, 3
    1d60:	a5 90       	lpm	r10, Z+
    1d62:	83 fe       	sbrs	r8, 3
    1d64:	a1 90       	ld	r10, Z+
    1d66:	7f 01       	movw	r14, r30
    1d68:	aa 20       	and	r10, r10
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <conv_brk+0x60>
    1d6c:	7f c0       	rjmp	.+254    	; 0x1e6c <conv_brk+0x15e>
    1d6e:	fa 2d       	mov	r31, r10
    1d70:	fe 35       	cpi	r31, 0x5E	; 94
    1d72:	11 f4       	brne	.+4      	; 0x1d78 <conv_brk+0x6a>
    1d74:	00 97       	sbiw	r24, 0x00	; 0
    1d76:	51 f1       	breq	.+84     	; 0x1dcc <conv_brk+0xbe>
    1d78:	47 2f       	mov	r20, r23
    1d7a:	50 e0       	ldi	r21, 0x00	; 0
    1d7c:	48 17       	cp	r20, r24
    1d7e:	59 07       	cpc	r21, r25
    1d80:	44 f4       	brge	.+16     	; 0x1d92 <conv_brk+0x84>
    1d82:	4a 2d       	mov	r20, r10
    1d84:	4d 35       	cpi	r20, 0x5D	; 93
    1d86:	51 f1       	breq	.+84     	; 0x1ddc <conv_brk+0xce>
    1d88:	4d 32       	cpi	r20, 0x2D	; 45
    1d8a:	19 f4       	brne	.+6      	; 0x1d92 <conv_brk+0x84>
    1d8c:	99 20       	and	r9, r9
    1d8e:	01 f1       	breq	.+64     	; 0x1dd0 <conv_brk+0xc2>
    1d90:	03 c0       	rjmp	.+6      	; 0x1d98 <conv_brk+0x8a>
    1d92:	99 20       	and	r9, r9
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <conv_brk+0x8a>
    1d96:	ba 2c       	mov	r11, r10
    1d98:	4a 2d       	mov	r20, r10
    1d9a:	46 95       	lsr	r20
    1d9c:	46 95       	lsr	r20
    1d9e:	46 95       	lsr	r20
    1da0:	f9 01       	movw	r30, r18
    1da2:	e4 0f       	add	r30, r20
    1da4:	f1 1d       	adc	r31, r1
    1da6:	4a 2d       	mov	r20, r10
    1da8:	47 70       	andi	r20, 0x07	; 7
    1daa:	3d 01       	movw	r6, r26
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <conv_brk+0xa4>
    1dae:	66 0c       	add	r6, r6
    1db0:	77 1c       	adc	r7, r7
    1db2:	4a 95       	dec	r20
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <conv_brk+0xa0>
    1db6:	90 80       	ld	r9, Z
    1db8:	96 28       	or	r9, r6
    1dba:	90 82       	st	Z, r9
    1dbc:	ab 14       	cp	r10, r11
    1dbe:	59 f0       	breq	.+22     	; 0x1dd6 <conv_brk+0xc8>
    1dc0:	ab 14       	cp	r10, r11
    1dc2:	10 f4       	brcc	.+4      	; 0x1dc8 <conv_brk+0xba>
    1dc4:	a3 94       	inc	r10
    1dc6:	e8 cf       	rjmp	.-48     	; 0x1d98 <conv_brk+0x8a>
    1dc8:	aa 94       	dec	r10
    1dca:	e6 cf       	rjmp	.-52     	; 0x1d98 <conv_brk+0x8a>
    1dcc:	71 e0       	ldi	r23, 0x01	; 1
    1dce:	04 c0       	rjmp	.+8      	; 0x1dd8 <conv_brk+0xca>
    1dd0:	99 24       	eor	r9, r9
    1dd2:	93 94       	inc	r9
    1dd4:	01 c0       	rjmp	.+2      	; 0x1dd8 <conv_brk+0xca>
    1dd6:	99 24       	eor	r9, r9
    1dd8:	01 96       	adiw	r24, 0x01	; 1
    1dda:	c0 cf       	rjmp	.-128    	; 0x1d5c <conv_brk+0x4e>
    1ddc:	99 20       	and	r9, r9
    1dde:	19 f0       	breq	.+6      	; 0x1de6 <conv_brk+0xd8>
    1de0:	8e 81       	ldd	r24, Y+6	; 0x06
    1de2:	80 62       	ori	r24, 0x20	; 32
    1de4:	8e 83       	std	Y+6, r24	; 0x06
    1de6:	77 23       	and	r23, r23
    1de8:	51 f0       	breq	.+20     	; 0x1dfe <conv_brk+0xf0>
    1dea:	ce 01       	movw	r24, r28
    1dec:	81 96       	adiw	r24, 0x21	; 33
    1dee:	fe 01       	movw	r30, r28
    1df0:	31 96       	adiw	r30, 0x01	; 1
    1df2:	20 81       	ld	r18, Z
    1df4:	20 95       	com	r18
    1df6:	21 93       	st	Z+, r18
    1df8:	e8 17       	cp	r30, r24
    1dfa:	f9 07       	cpc	r31, r25
    1dfc:	d1 f7       	brne	.-12     	; 0x1df2 <conv_brk+0xe4>
    1dfe:	bb 24       	eor	r11, r11
    1e00:	b3 94       	inc	r11
    1e02:	4e 01       	movw	r8, r28
    1e04:	08 94       	sec
    1e06:	81 1c       	adc	r8, r1
    1e08:	91 1c       	adc	r9, r1
    1e0a:	01 c0       	rjmp	.+2      	; 0x1e0e <conv_brk+0x100>
    1e0c:	bb 24       	eor	r11, r11
    1e0e:	c6 01       	movw	r24, r12
    1e10:	69 a3       	std	Y+33, r22	; 0x21
    1e12:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
    1e16:	69 a1       	ldd	r22, Y+33	; 0x21
    1e18:	97 fd       	sbrc	r25, 7
    1e1a:	20 c0       	rjmp	.+64     	; 0x1e5c <conv_brk+0x14e>
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	26 95       	lsr	r18
    1e20:	26 95       	lsr	r18
    1e22:	26 95       	lsr	r18
    1e24:	f4 01       	movw	r30, r8
    1e26:	e2 0f       	add	r30, r18
    1e28:	f1 1d       	adc	r31, r1
    1e2a:	20 81       	ld	r18, Z
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	ac 01       	movw	r20, r24
    1e30:	47 70       	andi	r20, 0x07	; 7
    1e32:	50 70       	andi	r21, 0x00	; 0
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <conv_brk+0x12c>
    1e36:	35 95       	asr	r19
    1e38:	27 95       	ror	r18
    1e3a:	4a 95       	dec	r20
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <conv_brk+0x128>
    1e3e:	20 fd       	sbrc	r18, 0
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <conv_brk+0x13c>
    1e42:	b6 01       	movw	r22, r12
    1e44:	0e 94 a4 10 	call	0x2148	; 0x2148 <ungetc>
    1e48:	09 c0       	rjmp	.+18     	; 0x1e5c <conv_brk+0x14e>
    1e4a:	01 15       	cp	r16, r1
    1e4c:	11 05       	cpc	r17, r1
    1e4e:	19 f0       	breq	.+6      	; 0x1e56 <conv_brk+0x148>
    1e50:	f8 01       	movw	r30, r16
    1e52:	81 93       	st	Z+, r24
    1e54:	8f 01       	movw	r16, r30
    1e56:	61 50       	subi	r22, 0x01	; 1
    1e58:	c9 f6       	brne	.-78     	; 0x1e0c <conv_brk+0xfe>
    1e5a:	02 c0       	rjmp	.+4      	; 0x1e60 <conv_brk+0x152>
    1e5c:	bb 20       	and	r11, r11
    1e5e:	31 f4       	brne	.+12     	; 0x1e6c <conv_brk+0x15e>
    1e60:	01 15       	cp	r16, r1
    1e62:	11 05       	cpc	r17, r1
    1e64:	29 f0       	breq	.+10     	; 0x1e70 <conv_brk+0x162>
    1e66:	f8 01       	movw	r30, r16
    1e68:	10 82       	st	Z, r1
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <conv_brk+0x162>
    1e6c:	ee 24       	eor	r14, r14
    1e6e:	ff 24       	eor	r15, r15
    1e70:	c7 01       	movw	r24, r14
    1e72:	a1 96       	adiw	r28, 0x21	; 33
    1e74:	cd bf       	out	0x3d, r28	; 61
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	cf 91       	pop	r28
    1e7a:	df 91       	pop	r29
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	ff 90       	pop	r15
    1e82:	ef 90       	pop	r14
    1e84:	df 90       	pop	r13
    1e86:	cf 90       	pop	r12
    1e88:	bf 90       	pop	r11
    1e8a:	af 90       	pop	r10
    1e8c:	9f 90       	pop	r9
    1e8e:	8f 90       	pop	r8
    1e90:	7f 90       	pop	r7
    1e92:	6f 90       	pop	r6
    1e94:	08 95       	ret

00001e96 <vfscanf>:
    1e96:	4f 92       	push	r4
    1e98:	5f 92       	push	r5
    1e9a:	6f 92       	push	r6
    1e9c:	7f 92       	push	r7
    1e9e:	9f 92       	push	r9
    1ea0:	af 92       	push	r10
    1ea2:	bf 92       	push	r11
    1ea4:	cf 92       	push	r12
    1ea6:	df 92       	push	r13
    1ea8:	ef 92       	push	r14
    1eaa:	ff 92       	push	r15
    1eac:	0f 93       	push	r16
    1eae:	1f 93       	push	r17
    1eb0:	df 93       	push	r29
    1eb2:	cf 93       	push	r28
    1eb4:	0f 92       	push	r0
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
    1eba:	7c 01       	movw	r14, r24
    1ebc:	6b 01       	movw	r12, r22
    1ebe:	3a 01       	movw	r6, r20
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	16 82       	std	Z+6, r1	; 0x06
    1ec4:	17 82       	std	Z+7, r1	; 0x07
    1ec6:	00 e0       	ldi	r16, 0x00	; 0
    1ec8:	e9 c0       	rjmp	.+466    	; 0x209c <vfscanf+0x206>
    1eca:	81 2f       	mov	r24, r17
    1ecc:	90 e0       	ldi	r25, 0x00	; 0
    1ece:	0e 94 72 10 	call	0x20e4	; 0x20e4 <isspace>
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	21 f0       	breq	.+8      	; 0x1ede <vfscanf+0x48>
    1ed6:	c7 01       	movw	r24, r14
    1ed8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <skip_spaces>
    1edc:	df c0       	rjmp	.+446    	; 0x209c <vfscanf+0x206>
    1ede:	15 32       	cpi	r17, 0x25	; 37
    1ee0:	41 f4       	brne	.+16     	; 0x1ef2 <vfscanf+0x5c>
    1ee2:	f6 01       	movw	r30, r12
    1ee4:	a3 fc       	sbrc	r10, 3
    1ee6:	35 91       	lpm	r19, Z+
    1ee8:	a3 fe       	sbrs	r10, 3
    1eea:	31 91       	ld	r19, Z+
    1eec:	6f 01       	movw	r12, r30
    1eee:	35 32       	cpi	r19, 0x25	; 37
    1ef0:	61 f4       	brne	.+24     	; 0x1f0a <vfscanf+0x74>
    1ef2:	c7 01       	movw	r24, r14
    1ef4:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
    1ef8:	97 fd       	sbrc	r25, 7
    1efa:	dc c0       	rjmp	.+440    	; 0x20b4 <vfscanf+0x21e>
    1efc:	18 17       	cp	r17, r24
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <vfscanf+0x6c>
    1f00:	cd c0       	rjmp	.+410    	; 0x209c <vfscanf+0x206>
    1f02:	b7 01       	movw	r22, r14
    1f04:	0e 94 a4 10 	call	0x2148	; 0x2148 <ungetc>
    1f08:	d7 c0       	rjmp	.+430    	; 0x20b8 <vfscanf+0x222>
    1f0a:	3a 32       	cpi	r19, 0x2A	; 42
    1f0c:	39 f4       	brne	.+14     	; 0x1f1c <vfscanf+0x86>
    1f0e:	a3 fc       	sbrc	r10, 3
    1f10:	35 91       	lpm	r19, Z+
    1f12:	a3 fe       	sbrs	r10, 3
    1f14:	31 91       	ld	r19, Z+
    1f16:	6f 01       	movw	r12, r30
    1f18:	11 e0       	ldi	r17, 0x01	; 1
    1f1a:	01 c0       	rjmp	.+2      	; 0x1f1e <vfscanf+0x88>
    1f1c:	10 e0       	ldi	r17, 0x00	; 0
    1f1e:	99 24       	eor	r9, r9
    1f20:	0f c0       	rjmp	.+30     	; 0x1f40 <vfscanf+0xaa>
    1f22:	12 60       	ori	r17, 0x02	; 2
    1f24:	69 2d       	mov	r22, r9
    1f26:	70 e0       	ldi	r23, 0x00	; 0
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	40 e2       	ldi	r20, 0x20	; 32
    1f2e:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <mulacc>
    1f32:	96 2e       	mov	r9, r22
    1f34:	f6 01       	movw	r30, r12
    1f36:	a3 fc       	sbrc	r10, 3
    1f38:	35 91       	lpm	r19, Z+
    1f3a:	a3 fe       	sbrs	r10, 3
    1f3c:	31 91       	ld	r19, Z+
    1f3e:	6f 01       	movw	r12, r30
    1f40:	23 2f       	mov	r18, r19
    1f42:	20 53       	subi	r18, 0x30	; 48
    1f44:	2a 30       	cpi	r18, 0x0A	; 10
    1f46:	68 f3       	brcs	.-38     	; 0x1f22 <vfscanf+0x8c>
    1f48:	11 ff       	sbrs	r17, 1
    1f4a:	03 c0       	rjmp	.+6      	; 0x1f52 <vfscanf+0xbc>
    1f4c:	99 20       	and	r9, r9
    1f4e:	19 f4       	brne	.+6      	; 0x1f56 <vfscanf+0xc0>
    1f50:	b3 c0       	rjmp	.+358    	; 0x20b8 <vfscanf+0x222>
    1f52:	99 24       	eor	r9, r9
    1f54:	9a 94       	dec	r9
    1f56:	38 36       	cpi	r19, 0x68	; 104
    1f58:	19 f0       	breq	.+6      	; 0x1f60 <vfscanf+0xca>
    1f5a:	3c 36       	cpi	r19, 0x6C	; 108
    1f5c:	89 f4       	brne	.+34     	; 0x1f80 <vfscanf+0xea>
    1f5e:	09 c0       	rjmp	.+18     	; 0x1f72 <vfscanf+0xdc>
    1f60:	f6 01       	movw	r30, r12
    1f62:	a3 fc       	sbrc	r10, 3
    1f64:	35 91       	lpm	r19, Z+
    1f66:	a3 fe       	sbrs	r10, 3
    1f68:	31 91       	ld	r19, Z+
    1f6a:	6f 01       	movw	r12, r30
    1f6c:	38 36       	cpi	r19, 0x68	; 104
    1f6e:	41 f4       	brne	.+16     	; 0x1f80 <vfscanf+0xea>
    1f70:	18 60       	ori	r17, 0x08	; 8
    1f72:	14 60       	ori	r17, 0x04	; 4
    1f74:	f6 01       	movw	r30, r12
    1f76:	a3 fc       	sbrc	r10, 3
    1f78:	35 91       	lpm	r19, Z+
    1f7a:	a3 fe       	sbrs	r10, 3
    1f7c:	31 91       	ld	r19, Z+
    1f7e:	6f 01       	movw	r12, r30
    1f80:	33 23       	and	r19, r19
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <vfscanf+0xf0>
    1f84:	99 c0       	rjmp	.+306    	; 0x20b8 <vfscanf+0x222>
    1f86:	88 e6       	ldi	r24, 0x68	; 104
    1f88:	94 e0       	ldi	r25, 0x04	; 4
    1f8a:	63 2f       	mov	r22, r19
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	39 83       	std	Y+1, r19	; 0x01
    1f90:	0e 94 7a 10 	call	0x20f4	; 0x20f4 <strchr_P>
    1f94:	39 81       	ldd	r19, Y+1	; 0x01
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <vfscanf+0x106>
    1f9a:	8e c0       	rjmp	.+284    	; 0x20b8 <vfscanf+0x222>
    1f9c:	81 2f       	mov	r24, r17
    1f9e:	10 fd       	sbrc	r17, 0
    1fa0:	08 c0       	rjmp	.+16     	; 0x1fb2 <vfscanf+0x11c>
    1fa2:	f3 01       	movw	r30, r6
    1fa4:	40 80       	ld	r4, Z
    1fa6:	51 80       	ldd	r5, Z+1	; 0x01
    1fa8:	42 e0       	ldi	r20, 0x02	; 2
    1faa:	50 e0       	ldi	r21, 0x00	; 0
    1fac:	64 0e       	add	r6, r20
    1fae:	75 1e       	adc	r7, r21
    1fb0:	02 c0       	rjmp	.+4      	; 0x1fb6 <vfscanf+0x120>
    1fb2:	44 24       	eor	r4, r4
    1fb4:	55 24       	eor	r5, r5
    1fb6:	3e 36       	cpi	r19, 0x6E	; 110
    1fb8:	51 f4       	brne	.+20     	; 0x1fce <vfscanf+0x138>
    1fba:	f7 01       	movw	r30, r14
    1fbc:	46 81       	ldd	r20, Z+6	; 0x06
    1fbe:	57 81       	ldd	r21, Z+7	; 0x07
    1fc0:	60 e0       	ldi	r22, 0x00	; 0
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	c2 01       	movw	r24, r4
    1fc6:	21 2f       	mov	r18, r17
    1fc8:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <putval>
    1fcc:	67 c0       	rjmp	.+206    	; 0x209c <vfscanf+0x206>
    1fce:	33 36       	cpi	r19, 0x63	; 99
    1fd0:	91 f4       	brne	.+36     	; 0x1ff6 <vfscanf+0x160>
    1fd2:	81 fd       	sbrc	r24, 1
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <vfscanf+0x144>
    1fd6:	99 24       	eor	r9, r9
    1fd8:	93 94       	inc	r9
    1fda:	c7 01       	movw	r24, r14
    1fdc:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
    1fe0:	97 fd       	sbrc	r25, 7
    1fe2:	68 c0       	rjmp	.+208    	; 0x20b4 <vfscanf+0x21e>
    1fe4:	41 14       	cp	r4, r1
    1fe6:	51 04       	cpc	r5, r1
    1fe8:	19 f0       	breq	.+6      	; 0x1ff0 <vfscanf+0x15a>
    1fea:	f2 01       	movw	r30, r4
    1fec:	81 93       	st	Z+, r24
    1fee:	2f 01       	movw	r4, r30
    1ff0:	9a 94       	dec	r9
    1ff2:	99 f7       	brne	.-26     	; 0x1fda <vfscanf+0x144>
    1ff4:	51 c0       	rjmp	.+162    	; 0x2098 <vfscanf+0x202>
    1ff6:	3b 35       	cpi	r19, 0x5B	; 91
    1ff8:	59 f4       	brne	.+22     	; 0x2010 <vfscanf+0x17a>
    1ffa:	c7 01       	movw	r24, r14
    1ffc:	69 2d       	mov	r22, r9
    1ffe:	a2 01       	movw	r20, r4
    2000:	96 01       	movw	r18, r12
    2002:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <conv_brk>
    2006:	6c 01       	movw	r12, r24
    2008:	00 97       	sbiw	r24, 0x00	; 0
    200a:	09 f0       	breq	.+2      	; 0x200e <vfscanf+0x178>
    200c:	45 c0       	rjmp	.+138    	; 0x2098 <vfscanf+0x202>
    200e:	3f c0       	rjmp	.+126    	; 0x208e <vfscanf+0x1f8>
    2010:	c7 01       	movw	r24, r14
    2012:	39 83       	std	Y+1, r19	; 0x01
    2014:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <skip_spaces>
    2018:	39 81       	ldd	r19, Y+1	; 0x01
    201a:	97 fd       	sbrc	r25, 7
    201c:	4b c0       	rjmp	.+150    	; 0x20b4 <vfscanf+0x21e>
    201e:	3f 36       	cpi	r19, 0x6F	; 111
    2020:	59 f1       	breq	.+86     	; 0x2078 <vfscanf+0x1e2>
    2022:	30 37       	cpi	r19, 0x70	; 112
    2024:	28 f4       	brcc	.+10     	; 0x2030 <vfscanf+0x19a>
    2026:	34 36       	cpi	r19, 0x64	; 100
    2028:	29 f1       	breq	.+74     	; 0x2074 <vfscanf+0x1de>
    202a:	39 36       	cpi	r19, 0x69	; 105
    202c:	39 f5       	brne	.+78     	; 0x207c <vfscanf+0x1e6>
    202e:	27 c0       	rjmp	.+78     	; 0x207e <vfscanf+0x1e8>
    2030:	33 37       	cpi	r19, 0x73	; 115
    2032:	19 f0       	breq	.+6      	; 0x203a <vfscanf+0x1a4>
    2034:	35 37       	cpi	r19, 0x75	; 117
    2036:	11 f5       	brne	.+68     	; 0x207c <vfscanf+0x1e6>
    2038:	1d c0       	rjmp	.+58     	; 0x2074 <vfscanf+0x1de>
    203a:	c7 01       	movw	r24, r14
    203c:	0e 94 5f 0a 	call	0x14be	; 0x14be <fgetc>
    2040:	5c 01       	movw	r10, r24
    2042:	97 fd       	sbrc	r25, 7
    2044:	11 c0       	rjmp	.+34     	; 0x2068 <vfscanf+0x1d2>
    2046:	0e 94 72 10 	call	0x20e4	; 0x20e4 <isspace>
    204a:	00 97       	sbiw	r24, 0x00	; 0
    204c:	29 f0       	breq	.+10     	; 0x2058 <vfscanf+0x1c2>
    204e:	c5 01       	movw	r24, r10
    2050:	b7 01       	movw	r22, r14
    2052:	0e 94 a4 10 	call	0x2148	; 0x2148 <ungetc>
    2056:	08 c0       	rjmp	.+16     	; 0x2068 <vfscanf+0x1d2>
    2058:	41 14       	cp	r4, r1
    205a:	51 04       	cpc	r5, r1
    205c:	19 f0       	breq	.+6      	; 0x2064 <vfscanf+0x1ce>
    205e:	f2 01       	movw	r30, r4
    2060:	a1 92       	st	Z+, r10
    2062:	2f 01       	movw	r4, r30
    2064:	9a 94       	dec	r9
    2066:	49 f7       	brne	.-46     	; 0x203a <vfscanf+0x1a4>
    2068:	41 14       	cp	r4, r1
    206a:	51 04       	cpc	r5, r1
    206c:	a9 f0       	breq	.+42     	; 0x2098 <vfscanf+0x202>
    206e:	f2 01       	movw	r30, r4
    2070:	10 82       	st	Z, r1
    2072:	12 c0       	rjmp	.+36     	; 0x2098 <vfscanf+0x202>
    2074:	10 62       	ori	r17, 0x20	; 32
    2076:	03 c0       	rjmp	.+6      	; 0x207e <vfscanf+0x1e8>
    2078:	10 61       	ori	r17, 0x10	; 16
    207a:	01 c0       	rjmp	.+2      	; 0x207e <vfscanf+0x1e8>
    207c:	10 64       	ori	r17, 0x40	; 64
    207e:	c7 01       	movw	r24, r14
    2080:	69 2d       	mov	r22, r9
    2082:	a2 01       	movw	r20, r4
    2084:	21 2f       	mov	r18, r17
    2086:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <conv_int>
    208a:	88 23       	and	r24, r24
    208c:	29 f4       	brne	.+10     	; 0x2098 <vfscanf+0x202>
    208e:	f7 01       	movw	r30, r14
    2090:	83 81       	ldd	r24, Z+3	; 0x03
    2092:	80 73       	andi	r24, 0x30	; 48
    2094:	79 f4       	brne	.+30     	; 0x20b4 <vfscanf+0x21e>
    2096:	10 c0       	rjmp	.+32     	; 0x20b8 <vfscanf+0x222>
    2098:	10 ff       	sbrs	r17, 0
    209a:	0f 5f       	subi	r16, 0xFF	; 255
    209c:	f7 01       	movw	r30, r14
    209e:	a3 80       	ldd	r10, Z+3	; 0x03
    20a0:	f6 01       	movw	r30, r12
    20a2:	a3 fc       	sbrc	r10, 3
    20a4:	15 91       	lpm	r17, Z+
    20a6:	a3 fe       	sbrs	r10, 3
    20a8:	11 91       	ld	r17, Z+
    20aa:	6f 01       	movw	r12, r30
    20ac:	11 23       	and	r17, r17
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <vfscanf+0x21c>
    20b0:	0c cf       	rjmp	.-488    	; 0x1eca <vfscanf+0x34>
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <vfscanf+0x222>
    20b4:	00 23       	and	r16, r16
    20b6:	11 f0       	breq	.+4      	; 0x20bc <vfscanf+0x226>
    20b8:	10 e0       	ldi	r17, 0x00	; 0
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <vfscanf+0x22a>
    20bc:	0f ef       	ldi	r16, 0xFF	; 255
    20be:	1f ef       	ldi	r17, 0xFF	; 255
    20c0:	c8 01       	movw	r24, r16
    20c2:	0f 90       	pop	r0
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	ff 90       	pop	r15
    20ce:	ef 90       	pop	r14
    20d0:	df 90       	pop	r13
    20d2:	cf 90       	pop	r12
    20d4:	bf 90       	pop	r11
    20d6:	af 90       	pop	r10
    20d8:	9f 90       	pop	r9
    20da:	7f 90       	pop	r7
    20dc:	6f 90       	pop	r6
    20de:	5f 90       	pop	r5
    20e0:	4f 90       	pop	r4
    20e2:	08 95       	ret

000020e4 <isspace>:
    20e4:	91 11       	cpse	r25, r1
    20e6:	a9 c0       	rjmp	.+338    	; 0x223a <__ctype_isfalse>
    20e8:	80 32       	cpi	r24, 0x20	; 32
    20ea:	19 f0       	breq	.+6      	; 0x20f2 <isspace+0xe>
    20ec:	89 50       	subi	r24, 0x09	; 9
    20ee:	85 50       	subi	r24, 0x05	; 5
    20f0:	d0 f7       	brcc	.-12     	; 0x20e6 <isspace+0x2>
    20f2:	08 95       	ret

000020f4 <strchr_P>:
    20f4:	fc 01       	movw	r30, r24
    20f6:	05 90       	lpm	r0, Z+
    20f8:	06 16       	cp	r0, r22
    20fa:	21 f0       	breq	.+8      	; 0x2104 <strchr_P+0x10>
    20fc:	00 20       	and	r0, r0
    20fe:	d9 f7       	brne	.-10     	; 0x20f6 <strchr_P+0x2>
    2100:	c0 01       	movw	r24, r0
    2102:	08 95       	ret
    2104:	31 97       	sbiw	r30, 0x01	; 1
    2106:	cf 01       	movw	r24, r30
    2108:	08 95       	ret

0000210a <strnlen_P>:
    210a:	fc 01       	movw	r30, r24
    210c:	05 90       	lpm	r0, Z+
    210e:	61 50       	subi	r22, 0x01	; 1
    2110:	70 40       	sbci	r23, 0x00	; 0
    2112:	01 10       	cpse	r0, r1
    2114:	d8 f7       	brcc	.-10     	; 0x210c <strnlen_P+0x2>
    2116:	80 95       	com	r24
    2118:	90 95       	com	r25
    211a:	8e 0f       	add	r24, r30
    211c:	9f 1f       	adc	r25, r31
    211e:	08 95       	ret

00002120 <memcpy>:
    2120:	fb 01       	movw	r30, r22
    2122:	dc 01       	movw	r26, r24
    2124:	02 c0       	rjmp	.+4      	; 0x212a <memcpy+0xa>
    2126:	01 90       	ld	r0, Z+
    2128:	0d 92       	st	X+, r0
    212a:	41 50       	subi	r20, 0x01	; 1
    212c:	50 40       	sbci	r21, 0x00	; 0
    212e:	d8 f7       	brcc	.-10     	; 0x2126 <memcpy+0x6>
    2130:	08 95       	ret

00002132 <strnlen>:
    2132:	fc 01       	movw	r30, r24
    2134:	61 50       	subi	r22, 0x01	; 1
    2136:	70 40       	sbci	r23, 0x00	; 0
    2138:	01 90       	ld	r0, Z+
    213a:	01 10       	cpse	r0, r1
    213c:	d8 f7       	brcc	.-10     	; 0x2134 <strnlen+0x2>
    213e:	80 95       	com	r24
    2140:	90 95       	com	r25
    2142:	8e 0f       	add	r24, r30
    2144:	9f 1f       	adc	r25, r31
    2146:	08 95       	ret

00002148 <ungetc>:
    2148:	fb 01       	movw	r30, r22
    214a:	23 81       	ldd	r18, Z+3	; 0x03
    214c:	20 ff       	sbrs	r18, 0
    214e:	13 c0       	rjmp	.+38     	; 0x2176 <ungetc+0x2e>
    2150:	26 fd       	sbrc	r18, 6
    2152:	11 c0       	rjmp	.+34     	; 0x2176 <ungetc+0x2e>
    2154:	3f ef       	ldi	r19, 0xFF	; 255
    2156:	8f 3f       	cpi	r24, 0xFF	; 255
    2158:	93 07       	cpc	r25, r19
    215a:	69 f0       	breq	.+26     	; 0x2176 <ungetc+0x2e>
    215c:	82 83       	std	Z+2, r24	; 0x02
    215e:	20 64       	ori	r18, 0x40	; 64
    2160:	2f 7d       	andi	r18, 0xDF	; 223
    2162:	23 83       	std	Z+3, r18	; 0x03
    2164:	26 81       	ldd	r18, Z+6	; 0x06
    2166:	37 81       	ldd	r19, Z+7	; 0x07
    2168:	21 50       	subi	r18, 0x01	; 1
    216a:	30 40       	sbci	r19, 0x00	; 0
    216c:	26 83       	std	Z+6, r18	; 0x06
    216e:	37 83       	std	Z+7, r19	; 0x07
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	02 c0       	rjmp	.+4      	; 0x217a <ungetc+0x32>
    2176:	2f ef       	ldi	r18, 0xFF	; 255
    2178:	3f ef       	ldi	r19, 0xFF	; 255
    217a:	c9 01       	movw	r24, r18
    217c:	08 95       	ret

0000217e <__ultoa_invert>:
    217e:	fa 01       	movw	r30, r20
    2180:	aa 27       	eor	r26, r26
    2182:	28 30       	cpi	r18, 0x08	; 8
    2184:	51 f1       	breq	.+84     	; 0x21da <__ultoa_invert+0x5c>
    2186:	20 31       	cpi	r18, 0x10	; 16
    2188:	81 f1       	breq	.+96     	; 0x21ea <__ultoa_invert+0x6c>
    218a:	e8 94       	clt
    218c:	6f 93       	push	r22
    218e:	6e 7f       	andi	r22, 0xFE	; 254
    2190:	6e 5f       	subi	r22, 0xFE	; 254
    2192:	7f 4f       	sbci	r23, 0xFF	; 255
    2194:	8f 4f       	sbci	r24, 0xFF	; 255
    2196:	9f 4f       	sbci	r25, 0xFF	; 255
    2198:	af 4f       	sbci	r26, 0xFF	; 255
    219a:	b1 e0       	ldi	r27, 0x01	; 1
    219c:	3e d0       	rcall	.+124    	; 0x221a <__ultoa_invert+0x9c>
    219e:	b4 e0       	ldi	r27, 0x04	; 4
    21a0:	3c d0       	rcall	.+120    	; 0x221a <__ultoa_invert+0x9c>
    21a2:	67 0f       	add	r22, r23
    21a4:	78 1f       	adc	r23, r24
    21a6:	89 1f       	adc	r24, r25
    21a8:	9a 1f       	adc	r25, r26
    21aa:	a1 1d       	adc	r26, r1
    21ac:	68 0f       	add	r22, r24
    21ae:	79 1f       	adc	r23, r25
    21b0:	8a 1f       	adc	r24, r26
    21b2:	91 1d       	adc	r25, r1
    21b4:	a1 1d       	adc	r26, r1
    21b6:	6a 0f       	add	r22, r26
    21b8:	71 1d       	adc	r23, r1
    21ba:	81 1d       	adc	r24, r1
    21bc:	91 1d       	adc	r25, r1
    21be:	a1 1d       	adc	r26, r1
    21c0:	20 d0       	rcall	.+64     	; 0x2202 <__ultoa_invert+0x84>
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <__ultoa_invert+0x48>
    21c4:	68 94       	set
    21c6:	3f 91       	pop	r19
    21c8:	2a e0       	ldi	r18, 0x0A	; 10
    21ca:	26 9f       	mul	r18, r22
    21cc:	11 24       	eor	r1, r1
    21ce:	30 19       	sub	r19, r0
    21d0:	30 5d       	subi	r19, 0xD0	; 208
    21d2:	31 93       	st	Z+, r19
    21d4:	de f6       	brtc	.-74     	; 0x218c <__ultoa_invert+0xe>
    21d6:	cf 01       	movw	r24, r30
    21d8:	08 95       	ret
    21da:	46 2f       	mov	r20, r22
    21dc:	47 70       	andi	r20, 0x07	; 7
    21de:	40 5d       	subi	r20, 0xD0	; 208
    21e0:	41 93       	st	Z+, r20
    21e2:	b3 e0       	ldi	r27, 0x03	; 3
    21e4:	0f d0       	rcall	.+30     	; 0x2204 <__ultoa_invert+0x86>
    21e6:	c9 f7       	brne	.-14     	; 0x21da <__ultoa_invert+0x5c>
    21e8:	f6 cf       	rjmp	.-20     	; 0x21d6 <__ultoa_invert+0x58>
    21ea:	46 2f       	mov	r20, r22
    21ec:	4f 70       	andi	r20, 0x0F	; 15
    21ee:	40 5d       	subi	r20, 0xD0	; 208
    21f0:	4a 33       	cpi	r20, 0x3A	; 58
    21f2:	18 f0       	brcs	.+6      	; 0x21fa <__ultoa_invert+0x7c>
    21f4:	49 5d       	subi	r20, 0xD9	; 217
    21f6:	31 fd       	sbrc	r19, 1
    21f8:	40 52       	subi	r20, 0x20	; 32
    21fa:	41 93       	st	Z+, r20
    21fc:	02 d0       	rcall	.+4      	; 0x2202 <__ultoa_invert+0x84>
    21fe:	a9 f7       	brne	.-22     	; 0x21ea <__ultoa_invert+0x6c>
    2200:	ea cf       	rjmp	.-44     	; 0x21d6 <__ultoa_invert+0x58>
    2202:	b4 e0       	ldi	r27, 0x04	; 4
    2204:	a6 95       	lsr	r26
    2206:	97 95       	ror	r25
    2208:	87 95       	ror	r24
    220a:	77 95       	ror	r23
    220c:	67 95       	ror	r22
    220e:	ba 95       	dec	r27
    2210:	c9 f7       	brne	.-14     	; 0x2204 <__ultoa_invert+0x86>
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	61 05       	cpc	r22, r1
    2216:	71 05       	cpc	r23, r1
    2218:	08 95       	ret
    221a:	9b 01       	movw	r18, r22
    221c:	ac 01       	movw	r20, r24
    221e:	0a 2e       	mov	r0, r26
    2220:	06 94       	lsr	r0
    2222:	57 95       	ror	r21
    2224:	47 95       	ror	r20
    2226:	37 95       	ror	r19
    2228:	27 95       	ror	r18
    222a:	ba 95       	dec	r27
    222c:	c9 f7       	brne	.-14     	; 0x2220 <__ultoa_invert+0xa2>
    222e:	62 0f       	add	r22, r18
    2230:	73 1f       	adc	r23, r19
    2232:	84 1f       	adc	r24, r20
    2234:	95 1f       	adc	r25, r21
    2236:	a0 1d       	adc	r26, r0
    2238:	08 95       	ret

0000223a <__ctype_isfalse>:
    223a:	99 27       	eor	r25, r25
    223c:	88 27       	eor	r24, r24

0000223e <__ctype_istrue>:
    223e:	08 95       	ret

00002240 <_exit>:
    2240:	f8 94       	cli

00002242 <__stop_program>:
    2242:	ff cf       	rjmp	.-2      	; 0x2242 <__stop_program>
