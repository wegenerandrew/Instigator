
Instigator2012.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a9c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00802000  00000a9c  00000b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080201e  0080201e  00000b4e  2**0
                  ALLOC
  3 .stab         00001680  00000000  00000000  00000b50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000618  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  000027e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000193  00000000  00000000  000028a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000018be  00000000  00000000  00002a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005d0  00000000  00000000  000042f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c5c  00000000  00000000  000048c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000190  00000000  00000000  00005528  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000991  00000000  00000000  000056b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000001f2  00000000  00000000  00006049  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__ctors_end>
   4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
   c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  10:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  14:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  18:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  1c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  20:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  24:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  28:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  2c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  30:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  34:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  38:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  3c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  40:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  44:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  48:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  4c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  50:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  54:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  58:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  5c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  60:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  64:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  68:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  6c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  70:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  74:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  78:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  7c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  80:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  84:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  8c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  90:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  98:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  9c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  c8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  f8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
  fc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 100:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 104:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 108:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 10c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 110:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 114:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 118:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 11c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 120:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 124:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 128:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 12c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 130:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 134:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 138:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 13c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 140:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 144:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 148:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 14c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 150:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 154:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 158:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 15c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 160:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 164:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 168:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 16c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 170:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 174:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 178:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 17c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 180:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 184:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 188:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 18c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 190:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 194:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 198:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 19c:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a0:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_104>
 1a4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1a8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ac:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1b8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1bc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1c8:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <__vector_114>
 1cc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1d8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1dc:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e4:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1e8:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1ec:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>
 1f0:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__bad_interrupt>

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec e9       	ldi	r30, 0x9C	; 156
 214:	fa e0       	ldi	r31, 0x0A	; 10
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	ae 31       	cpi	r26, 0x1E	; 30
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>

00000226 <__do_clear_bss>:
 226:	10 e2       	ldi	r17, 0x20	; 32
 228:	ae e1       	ldi	r26, 0x1E	; 30
 22a:	b0 e2       	ldi	r27, 0x20	; 32
 22c:	01 c0       	rjmp	.+2      	; 0x230 <.do_clear_bss_start>

0000022e <.do_clear_bss_loop>:
 22e:	1d 92       	st	X+, r1

00000230 <.do_clear_bss_start>:
 230:	af 31       	cpi	r26, 0x1F	; 31
 232:	b1 07       	cpc	r27, r17
 234:	e1 f7       	brne	.-8      	; 0x22e <.do_clear_bss_loop>
 236:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
 23a:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <_exit>

0000023e <__bad_interrupt>:
 23e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000242 <debug_init>:
#include "debug.h"
#include <avr/io.h>

static const int errorled_mask = _BV(1);

void debug_init() {
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	cd b7       	in	r28, 0x3d	; 61
 248:	de b7       	in	r29, 0x3e	; 62
	PORTR.DIRSET = errorled_mask;
 24a:	80 ee       	ldi	r24, 0xE0	; 224
 24c:	97 e0       	ldi	r25, 0x07	; 7
 24e:	20 91 00 20 	lds	r18, 0x2000
 252:	30 91 01 20 	lds	r19, 0x2001
 256:	fc 01       	movw	r30, r24
 258:	21 83       	std	Z+1, r18	; 0x01
	PORTR.OUTSET = errorled_mask;
 25a:	80 ee       	ldi	r24, 0xE0	; 224
 25c:	97 e0       	ldi	r25, 0x07	; 7
 25e:	20 91 00 20 	lds	r18, 0x2000
 262:	30 91 01 20 	lds	r19, 0x2001
 266:	fc 01       	movw	r30, r24
 268:	25 83       	std	Z+5, r18	; 0x05
}
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <debug_setErrorLED>:

void debug_setErrorLED() {
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	PORTR.OUTCLR = errorled_mask;
 278:	80 ee       	ldi	r24, 0xE0	; 224
 27a:	97 e0       	ldi	r25, 0x07	; 7
 27c:	20 91 00 20 	lds	r18, 0x2000
 280:	30 91 01 20 	lds	r19, 0x2001
 284:	fc 01       	movw	r30, r24
 286:	26 83       	std	Z+6, r18	; 0x06
 288:	cf 91       	pop	r28
 28a:	df 91       	pop	r29
 28c:	08 95       	ret

0000028e <estop_init>:

#define SIGINT0VECT PORTF_INT0_vect

static volatile bool estop = false;

void estop_init(){
 28e:	df 93       	push	r29
 290:	cf 93       	push	r28
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
	PORTF.DIRSET &=  0x0F;		 //Set pin 7 as input leave pwm pins alone
 296:	80 ea       	ldi	r24, 0xA0	; 160
 298:	96 e0       	ldi	r25, 0x06	; 6
 29a:	20 ea       	ldi	r18, 0xA0	; 160
 29c:	36 e0       	ldi	r19, 0x06	; 6
 29e:	f9 01       	movw	r30, r18
 2a0:	21 81       	ldd	r18, Z+1	; 0x01
 2a2:	2f 70       	andi	r18, 0x0F	; 15
 2a4:	fc 01       	movw	r30, r24
 2a6:	21 83       	std	Z+1, r18	; 0x01
	PORTF.INTCTRL	=TC_OVFINTLVL_HI_gc;		// EStop set to High Priority
 2a8:	80 ea       	ldi	r24, 0xA0	; 160
 2aa:	96 e0       	ldi	r25, 0x06	; 6
 2ac:	23 e0       	ldi	r18, 0x03	; 3
 2ae:	fc 01       	movw	r30, r24
 2b0:	21 87       	std	Z+9, r18	; 0x09
	PORTF.PIN7CTRL = PORT_ISC_FALLING_gc | PORT_OPC_PULLUP_gc;		//Set pin 7 to be pulled up and interupt to occur on the falling edge
 2b2:	80 ea       	ldi	r24, 0xA0	; 160
 2b4:	96 e0       	ldi	r25, 0x06	; 6
 2b6:	2a e1       	ldi	r18, 0x1A	; 26
 2b8:	fc 01       	movw	r30, r24
 2ba:	27 8b       	std	Z+23, r18	; 0x17
	PORTF.INT0MASK = 0x80;  //Set pin 7 in port F to be part of an interrupt
 2bc:	80 ea       	ldi	r24, 0xA0	; 160
 2be:	96 e0       	ldi	r25, 0x06	; 6
 2c0:	20 e8       	ldi	r18, 0x80	; 128
 2c2:	fc 01       	movw	r30, r24
 2c4:	22 87       	std	Z+10, r18	; 0x0a
}
 2c6:	cf 91       	pop	r28
 2c8:	df 91       	pop	r29
 2ca:	08 95       	ret

000002cc <estop_check>:

_Bool estop_check() {
 2cc:	df 93       	push	r29
 2ce:	cf 93       	push	r28
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
	return estop;
 2d4:	80 91 1e 20 	lds	r24, 0x201E
}
 2d8:	cf 91       	pop	r28
 2da:	df 91       	pop	r29
 2dc:	08 95       	ret

000002de <estop_killall>:

void estop_killall() {
 2de:	df 93       	push	r29
 2e0:	cf 93       	push	r28
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
	motor_estop();
 2e6:	0e 94 9f 03 	call	0x73e	; 0x73e <motor_estop>
	debug_setErrorLED();
 2ea:	0e 94 38 01 	call	0x270	; 0x270 <debug_setErrorLED>
}
 2ee:	cf 91       	pop	r28
 2f0:	df 91       	pop	r29
 2f2:	08 95       	ret

000002f4 <__vector_104>:

ISR(SIGINT0VECT){
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	00 90 38 00 	lds	r0, 0x0038
 300:	0f 92       	push	r0
 302:	00 90 39 00 	lds	r0, 0x0039
 306:	0f 92       	push	r0
 308:	00 90 3b 00 	lds	r0, 0x003B
 30c:	0f 92       	push	r0
 30e:	11 24       	eor	r1, r1
 310:	10 92 38 00 	sts	0x0038, r1
 314:	10 92 39 00 	sts	0x0039, r1
 318:	10 92 3b 00 	sts	0x003B, r1
 31c:	2f 93       	push	r18
 31e:	3f 93       	push	r19
 320:	4f 93       	push	r20
 322:	5f 93       	push	r21
 324:	6f 93       	push	r22
 326:	7f 93       	push	r23
 328:	8f 93       	push	r24
 32a:	9f 93       	push	r25
 32c:	af 93       	push	r26
 32e:	bf 93       	push	r27
 330:	ef 93       	push	r30
 332:	ff 93       	push	r31
 334:	df 93       	push	r29
 336:	cf 93       	push	r28
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
	estop = true;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	80 93 1e 20 	sts	0x201E, r24
	PORTF.INTFLAGS= 0x01; //Clear the flag by writing a one to it 
 342:	80 ea       	ldi	r24, 0xA0	; 160
 344:	96 e0       	ldi	r25, 0x06	; 6
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	fc 01       	movw	r30, r24
 34a:	24 87       	std	Z+12, r18	; 0x0c
	estop_killall();
 34c:	0e 94 6f 01 	call	0x2de	; 0x2de <estop_killall>
 350:	cf 91       	pop	r28
 352:	df 91       	pop	r29
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	00 92 3b 00 	sts	0x003B, r0
 372:	0f 90       	pop	r0
 374:	00 92 39 00 	sts	0x0039, r0
 378:	0f 90       	pop	r0
 37a:	00 92 38 00 	sts	0x0038, r0
 37e:	0f 90       	pop	r0
 380:	0f be       	out	0x3f, r0	; 63
 382:	0f 90       	pop	r0
 384:	1f 90       	pop	r1
 386:	18 95       	reti

00000388 <init>:
#include <avr/interrupt.h>
#include "motor.h"
#include "estop.h"
#include "debug.h"

void init(){
 388:	df 93       	push	r29
 38a:	cf 93       	push	r28
 38c:	cd b7       	in	r28, 0x3d	; 61
 38e:	de b7       	in	r29, 0x3e	; 62
	PMIC.CTRL = PMIC_HILVLEN_bm;	//Enable High level interrupts
 390:	80 ea       	ldi	r24, 0xA0	; 160
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	24 e0       	ldi	r18, 0x04	; 4
 396:	fc 01       	movw	r30, r24
 398:	22 83       	std	Z+2, r18	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	//Enable Medium level interrupts
 39a:	80 ea       	ldi	r24, 0xA0	; 160
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	20 ea       	ldi	r18, 0xA0	; 160
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	f9 01       	movw	r30, r18
 3a4:	22 81       	ldd	r18, Z+2	; 0x02
 3a6:	22 60       	ori	r18, 0x02	; 2
 3a8:	fc 01       	movw	r30, r24
 3aa:	22 83       	std	Z+2, r18	; 0x02
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	//Enable Low level interrupts
 3ac:	80 ea       	ldi	r24, 0xA0	; 160
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	20 ea       	ldi	r18, 0xA0	; 160
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	f9 01       	movw	r30, r18
 3b6:	22 81       	ldd	r18, Z+2	; 0x02
 3b8:	21 60       	ori	r18, 0x01	; 1
 3ba:	fc 01       	movw	r30, r24
 3bc:	22 83       	std	Z+2, r18	; 0x02
	
	sei();							//Clears global mask
 3be:	78 94       	sei
}
 3c0:	cf 91       	pop	r28
 3c2:	df 91       	pop	r29
 3c4:	08 95       	ret

000003c6 <init_all>:

void init_all() {
 3c6:	df 93       	push	r29
 3c8:	cf 93       	push	r28
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
	estop_init();
 3ce:	0e 94 47 01 	call	0x28e	; 0x28e <estop_init>
	debug_init();
 3d2:	0e 94 21 01 	call	0x242	; 0x242 <debug_init>
	motor_init();
 3d6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <motor_init>
 3da:	cf 91       	pop	r28
 3dc:	df 91       	pop	r29
 3de:	08 95       	ret

000003e0 <main>:
#include "init.h"
#include "estop.h"


int main(void)
{
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	df 93       	push	r29
 3e6:	cf 93       	push	r28
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
 3ec:	2e 97       	sbiw	r28, 0x0e	; 14
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	de bf       	out	0x3e, r29	; 62
	init();
 3f2:	0e 94 c4 01 	call	0x388	; 0x388 <init>
	init_all();
 3f6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <init_all>
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	aa e7       	ldi	r26, 0x7A	; 122
 400:	b4 e4       	ldi	r27, 0x44	; 68
 402:	89 83       	std	Y+1, r24	; 0x01
 404:	9a 83       	std	Y+2, r25	; 0x02
 406:	ab 83       	std	Y+3, r26	; 0x03
 408:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
 40a:	69 81       	ldd	r22, Y+1	; 0x01
 40c:	7a 81       	ldd	r23, Y+2	; 0x02
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	9c 81       	ldd	r25, Y+4	; 0x04
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	4a e7       	ldi	r20, 0x7A	; 122
 418:	53 e4       	ldi	r21, 0x43	; 67
 41a:	0e 94 c1 04 	call	0x982	; 0x982 <__mulsf3>
 41e:	dc 01       	movw	r26, r24
 420:	cb 01       	movw	r24, r22
 422:	8d 83       	std	Y+5, r24	; 0x05
 424:	9e 83       	std	Y+6, r25	; 0x06
 426:	af 83       	std	Y+7, r26	; 0x07
 428:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 42a:	11 e0       	ldi	r17, 0x01	; 1
 42c:	6d 81       	ldd	r22, Y+5	; 0x05
 42e:	7e 81       	ldd	r23, Y+6	; 0x06
 430:	8f 81       	ldd	r24, Y+7	; 0x07
 432:	98 85       	ldd	r25, Y+8	; 0x08
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	40 e8       	ldi	r20, 0x80	; 128
 43a:	5f e3       	ldi	r21, 0x3F	; 63
 43c:	0e 94 40 04 	call	0x880	; 0x880 <__cmpsf2>
 440:	88 23       	and	r24, r24
 442:	0c f0       	brlt	.+2      	; 0x446 <main+0x66>
 444:	10 e0       	ldi	r17, 0x00	; 0
 446:	11 23       	and	r17, r17
 448:	29 f0       	breq	.+10     	; 0x454 <main+0x74>
		__ticks = 1;
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	89 87       	std	Y+9, r24	; 0x09
 450:	9a 87       	std	Y+10, r25	; 0x0a
 452:	46 c0       	rjmp	.+140    	; 0x4e0 <main+0x100>
	else if (__tmp > 65535)
 454:	11 e0       	ldi	r17, 0x01	; 1
 456:	6d 81       	ldd	r22, Y+5	; 0x05
 458:	7e 81       	ldd	r23, Y+6	; 0x06
 45a:	8f 81       	ldd	r24, Y+7	; 0x07
 45c:	98 85       	ldd	r25, Y+8	; 0x08
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	3f ef       	ldi	r19, 0xFF	; 255
 462:	4f e7       	ldi	r20, 0x7F	; 127
 464:	57 e4       	ldi	r21, 0x47	; 71
 466:	0e 94 bd 04 	call	0x97a	; 0x97a <__gesf2>
 46a:	18 16       	cp	r1, r24
 46c:	0c f0       	brlt	.+2      	; 0x470 <main+0x90>
 46e:	10 e0       	ldi	r17, 0x00	; 0
 470:	11 23       	and	r17, r17
 472:	61 f1       	breq	.+88     	; 0x4cc <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 474:	69 81       	ldd	r22, Y+1	; 0x01
 476:	7a 81       	ldd	r23, Y+2	; 0x02
 478:	8b 81       	ldd	r24, Y+3	; 0x03
 47a:	9c 81       	ldd	r25, Y+4	; 0x04
 47c:	20 e0       	ldi	r18, 0x00	; 0
 47e:	30 e0       	ldi	r19, 0x00	; 0
 480:	40 e2       	ldi	r20, 0x20	; 32
 482:	51 e4       	ldi	r21, 0x41	; 65
 484:	0e 94 c1 04 	call	0x982	; 0x982 <__mulsf3>
 488:	dc 01       	movw	r26, r24
 48a:	cb 01       	movw	r24, r22
 48c:	bc 01       	movw	r22, r24
 48e:	cd 01       	movw	r24, r26
 490:	0e 94 44 04 	call	0x888	; 0x888 <__fixunssfsi>
 494:	dc 01       	movw	r26, r24
 496:	cb 01       	movw	r24, r22
 498:	89 87       	std	Y+9, r24	; 0x09
 49a:	9a 87       	std	Y+10, r25	; 0x0a
 49c:	12 c0       	rjmp	.+36     	; 0x4c2 <main+0xe2>
 49e:	89 e1       	ldi	r24, 0x19	; 25
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	8b 87       	std	Y+11, r24	; 0x0b
 4a4:	9c 87       	std	Y+12, r25	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 4a6:	8b 85       	ldd	r24, Y+11	; 0x0b
 4a8:	9c 85       	ldd	r25, Y+12	; 0x0c
 4aa:	8c 01       	movw	r16, r24
 4ac:	c8 01       	movw	r24, r16
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <main+0xce>
 4b2:	8c 01       	movw	r16, r24
 4b4:	0b 87       	std	Y+11, r16	; 0x0b
 4b6:	1c 87       	std	Y+12, r17	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4b8:	89 85       	ldd	r24, Y+9	; 0x09
 4ba:	9a 85       	ldd	r25, Y+10	; 0x0a
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	89 87       	std	Y+9, r24	; 0x09
 4c0:	9a 87       	std	Y+10, r25	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4c2:	89 85       	ldd	r24, Y+9	; 0x09
 4c4:	9a 85       	ldd	r25, Y+10	; 0x0a
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	51 f7       	brne	.-44     	; 0x49e <main+0xbe>
 4ca:	17 c0       	rjmp	.+46     	; 0x4fa <main+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4cc:	6d 81       	ldd	r22, Y+5	; 0x05
 4ce:	7e 81       	ldd	r23, Y+6	; 0x06
 4d0:	8f 81       	ldd	r24, Y+7	; 0x07
 4d2:	98 85       	ldd	r25, Y+8	; 0x08
 4d4:	0e 94 44 04 	call	0x888	; 0x888 <__fixunssfsi>
 4d8:	dc 01       	movw	r26, r24
 4da:	cb 01       	movw	r24, r22
 4dc:	89 87       	std	Y+9, r24	; 0x09
 4de:	9a 87       	std	Y+10, r25	; 0x0a
 4e0:	89 85       	ldd	r24, Y+9	; 0x09
 4e2:	9a 85       	ldd	r25, Y+10	; 0x0a
 4e4:	8d 87       	std	Y+13, r24	; 0x0d
 4e6:	9e 87       	std	Y+14, r25	; 0x0e
 4e8:	8d 85       	ldd	r24, Y+13	; 0x0d
 4ea:	9e 85       	ldd	r25, Y+14	; 0x0e
 4ec:	8c 01       	movw	r16, r24
 4ee:	c8 01       	movw	r24, r16
 4f0:	01 97       	sbiw	r24, 0x01	; 1
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <main+0x110>
 4f4:	8c 01       	movw	r16, r24
 4f6:	0d 87       	std	Y+13, r16	; 0x0d
 4f8:	1e 87       	std	Y+14, r17	; 0x0e
	_delay_ms(1000);
    while(1)
    {
    }
 4fa:	ff cf       	rjmp	.-2      	; 0x4fa <main+0x11a>

000004fc <motor_init>:



static const uint8_t port[4] = {2, 3, 1, 0}; // LRDF

void motor_init() {
 4fc:	df 93       	push	r29
 4fe:	cf 93       	push	r28
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
	PORTK.DIRSET = ctrlpins_mask;
 504:	80 e2       	ldi	r24, 0x20	; 32
 506:	97 e0       	ldi	r25, 0x07	; 7
 508:	20 91 12 20 	lds	r18, 0x2012
 50c:	30 91 13 20 	lds	r19, 0x2013
 510:	fc 01       	movw	r30, r24
 512:	21 83       	std	Z+1, r18	; 0x01
	PORTF.DIRSET = PWMpins_mask;
 514:	80 ea       	ldi	r24, 0xA0	; 160
 516:	96 e0       	ldi	r25, 0x06	; 6
 518:	20 91 14 20 	lds	r18, 0x2014
 51c:	30 91 15 20 	lds	r19, 0x2015
 520:	fc 01       	movw	r30, r24
 522:	21 83       	std	Z+1, r18	; 0x01

	TCF0.CTRLA = TC_CLKSEL_DIV1_gc; // no divider means timer runs at 32Mhz
 524:	80 e0       	ldi	r24, 0x00	; 0
 526:	9b e0       	ldi	r25, 0x0B	; 11
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18
	TCF0.CTRLB = TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm | TC_WGMODE_SS_gc; // enable all capture compares, single slope PWM
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	9b e0       	ldi	r25, 0x0B	; 11
 532:	23 ef       	ldi	r18, 0xF3	; 243
 534:	fc 01       	movw	r30, r24
 536:	21 83       	std	Z+1, r18	; 0x01
	TCF0.PER = 1023; // 32Mhz / ~1024 = 31.25 khz PWM freq
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	9b e0       	ldi	r25, 0x0B	; 11
 53c:	2f ef       	ldi	r18, 0xFF	; 255
 53e:	33 e0       	ldi	r19, 0x03	; 3
 540:	fc 01       	movw	r30, r24
 542:	26 a3       	std	Z+38, r18	; 0x26
 544:	37 a3       	std	Z+39, r19	; 0x27

	//motor_setPWM(MOTOR_FAN, motor_maxPWM);
	motor_setPWM(MOTOR_RIGHT, 512);
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	72 e0       	ldi	r23, 0x02	; 2
 54c:	0e 94 b0 02 	call	0x560	; 0x560 <motor_setPWM>
	motor_setPWM(MOTOR_LEFT, 512);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	72 e0       	ldi	r23, 0x02	; 2
 556:	0e 94 b0 02 	call	0x560	; 0x560 <motor_setPWM>
}
 55a:	cf 91       	pop	r28
 55c:	df 91       	pop	r29
 55e:	08 95       	ret

00000560 <motor_setPWM>:

void motor_setPWM(uint8_t mot, int16_t PWM) {
 560:	df 93       	push	r29
 562:	cf 93       	push	r28
 564:	cd b7       	in	r28, 0x3d	; 61
 566:	de b7       	in	r29, 0x3e	; 62
 568:	25 97       	sbiw	r28, 0x05	; 5
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	de bf       	out	0x3e, r29	; 62
 56e:	8b 83       	std	Y+3, r24	; 0x03
 570:	6c 83       	std	Y+4, r22	; 0x04
 572:	7d 83       	std	Y+5, r23	; 0x05
	uint8_t in1pin_mask = _BV(2*port[mot]);
 574:	8b 81       	ldd	r24, Y+3	; 0x03
 576:	88 2f       	mov	r24, r24
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	8a 5e       	subi	r24, 0xEA	; 234
 57c:	9f 4d       	sbci	r25, 0xDF	; 223
 57e:	fc 01       	movw	r30, r24
 580:	80 81       	ld	r24, Z
 582:	88 2f       	mov	r24, r24
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	9c 01       	movw	r18, r24
 588:	22 0f       	add	r18, r18
 58a:	33 1f       	adc	r19, r19
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 2e       	mov	r0, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <motor_setPWM+0x38>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	0a 94       	dec	r0
 59a:	e2 f7       	brpl	.-8      	; 0x594 <motor_setPWM+0x34>
 59c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t in2pin_mask = in1pin_mask << 1;
 59e:	89 81       	ldd	r24, Y+1	; 0x01
 5a0:	88 0f       	add	r24, r24
 5a2:	8a 83       	std	Y+2, r24	; 0x02
	


	if (PWM == 0) {
 5a4:	8c 81       	ldd	r24, Y+4	; 0x04
 5a6:	9d 81       	ldd	r25, Y+5	; 0x05
 5a8:	00 97       	sbiw	r24, 0x00	; 0
 5aa:	c1 f4       	brne	.+48     	; 0x5dc <motor_setPWM+0x7c>
		PORTK.OUTCLR = in1pin_mask | in2pin_mask;
 5ac:	80 e2       	ldi	r24, 0x20	; 32
 5ae:	97 e0       	ldi	r25, 0x07	; 7
 5b0:	39 81       	ldd	r19, Y+1	; 0x01
 5b2:	2a 81       	ldd	r18, Y+2	; 0x02
 5b4:	23 2b       	or	r18, r19
 5b6:	fc 01       	movw	r30, r24
 5b8:	26 83       	std	Z+6, r18	; 0x06
		(&TCF0.CCABUF)[port[mot]] = 0;
 5ba:	8b 81       	ldd	r24, Y+3	; 0x03
 5bc:	88 2f       	mov	r24, r24
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	8a 5e       	subi	r24, 0xEA	; 234
 5c2:	9f 4d       	sbci	r25, 0xDF	; 223
 5c4:	fc 01       	movw	r30, r24
 5c6:	80 81       	ld	r24, Z
 5c8:	88 2f       	mov	r24, r24
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	88 5c       	subi	r24, 0xC8	; 200
 5d2:	94 4f       	sbci	r25, 0xF4	; 244
 5d4:	fc 01       	movw	r30, r24
 5d6:	10 82       	st	Z, r1
 5d8:	11 82       	std	Z+1, r1	; 0x01
 5da:	41 c0       	rjmp	.+130    	; 0x65e <motor_setPWM+0xfe>
	} else if (PWM > 0) {
 5dc:	8c 81       	ldd	r24, Y+4	; 0x04
 5de:	9d 81       	ldd	r25, Y+5	; 0x05
 5e0:	18 16       	cp	r1, r24
 5e2:	19 06       	cpc	r1, r25
 5e4:	ec f4       	brge	.+58     	; 0x620 <motor_setPWM+0xc0>
		PORTK.OUTCLR = in2pin_mask;
 5e6:	80 e2       	ldi	r24, 0x20	; 32
 5e8:	97 e0       	ldi	r25, 0x07	; 7
 5ea:	2a 81       	ldd	r18, Y+2	; 0x02
 5ec:	fc 01       	movw	r30, r24
 5ee:	26 83       	std	Z+6, r18	; 0x06
		PORTK.OUTSET = in1pin_mask;
 5f0:	80 e2       	ldi	r24, 0x20	; 32
 5f2:	97 e0       	ldi	r25, 0x07	; 7
 5f4:	29 81       	ldd	r18, Y+1	; 0x01
 5f6:	fc 01       	movw	r30, r24
 5f8:	25 83       	std	Z+5, r18	; 0x05
		(&TCF0.CCABUF)[port[mot]] = PWM;
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	88 2f       	mov	r24, r24
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	8a 5e       	subi	r24, 0xEA	; 234
 602:	9f 4d       	sbci	r25, 0xDF	; 223
 604:	fc 01       	movw	r30, r24
 606:	80 81       	ld	r24, Z
 608:	88 2f       	mov	r24, r24
 60a:	90 e0       	ldi	r25, 0x00	; 0
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	88 5c       	subi	r24, 0xC8	; 200
 612:	94 4f       	sbci	r25, 0xF4	; 244
 614:	2c 81       	ldd	r18, Y+4	; 0x04
 616:	3d 81       	ldd	r19, Y+5	; 0x05
 618:	fc 01       	movw	r30, r24
 61a:	20 83       	st	Z, r18
 61c:	31 83       	std	Z+1, r19	; 0x01
 61e:	1f c0       	rjmp	.+62     	; 0x65e <motor_setPWM+0xfe>
	} else {
		PORTK.OUTCLR = in1pin_mask;
 620:	80 e2       	ldi	r24, 0x20	; 32
 622:	97 e0       	ldi	r25, 0x07	; 7
 624:	29 81       	ldd	r18, Y+1	; 0x01
 626:	fc 01       	movw	r30, r24
 628:	26 83       	std	Z+6, r18	; 0x06
		PORTK.OUTSET = in2pin_mask;
 62a:	80 e2       	ldi	r24, 0x20	; 32
 62c:	97 e0       	ldi	r25, 0x07	; 7
 62e:	2a 81       	ldd	r18, Y+2	; 0x02
 630:	fc 01       	movw	r30, r24
 632:	25 83       	std	Z+5, r18	; 0x05
		(&TCF0.CCABUF)[port[mot]] = -PWM;
 634:	8b 81       	ldd	r24, Y+3	; 0x03
 636:	88 2f       	mov	r24, r24
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	8a 5e       	subi	r24, 0xEA	; 234
 63c:	9f 4d       	sbci	r25, 0xDF	; 223
 63e:	fc 01       	movw	r30, r24
 640:	80 81       	ld	r24, Z
 642:	88 2f       	mov	r24, r24
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	88 0f       	add	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	88 5c       	subi	r24, 0xC8	; 200
 64c:	94 4f       	sbci	r25, 0xF4	; 244
 64e:	2c 81       	ldd	r18, Y+4	; 0x04
 650:	3d 81       	ldd	r19, Y+5	; 0x05
 652:	30 95       	com	r19
 654:	21 95       	neg	r18
 656:	3f 4f       	sbci	r19, 0xFF	; 255
 658:	fc 01       	movw	r30, r24
 65a:	20 83       	st	Z, r18
 65c:	31 83       	std	Z+1, r19	; 0x01
	}
}
 65e:	25 96       	adiw	r28, 0x05	; 5
 660:	cd bf       	out	0x3d, r28	; 61
 662:	de bf       	out	0x3e, r29	; 62
 664:	cf 91       	pop	r28
 666:	df 91       	pop	r29
 668:	08 95       	ret

0000066a <motor_allOff>:

void motor_allOff() {
 66a:	df 93       	push	r29
 66c:	cf 93       	push	r28
 66e:	0f 92       	push	r0
 670:	0f 92       	push	r0
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
	for (int i=0; i<motor_count; i++) {
 676:	19 82       	std	Y+1, r1	; 0x01
 678:	1a 82       	std	Y+2, r1	; 0x02
 67a:	0e c0       	rjmp	.+28     	; 0x698 <motor_allOff+0x2e>
		(&TCF0.CCABUF)[i] = 0;
 67c:	89 81       	ldd	r24, Y+1	; 0x01
 67e:	9a 81       	ldd	r25, Y+2	; 0x02
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	88 5c       	subi	r24, 0xC8	; 200
 686:	94 4f       	sbci	r25, 0xF4	; 244
 688:	fc 01       	movw	r30, r24
 68a:	10 82       	st	Z, r1
 68c:	11 82       	std	Z+1, r1	; 0x01
		(&TCF0.CCABUF)[port[mot]] = -PWM;
	}
}

void motor_allOff() {
	for (int i=0; i<motor_count; i++) {
 68e:	89 81       	ldd	r24, Y+1	; 0x01
 690:	9a 81       	ldd	r25, Y+2	; 0x02
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	89 83       	std	Y+1, r24	; 0x01
 696:	9a 83       	std	Y+2, r25	; 0x02
 698:	80 91 0e 20 	lds	r24, 0x200E
 69c:	90 91 0f 20 	lds	r25, 0x200F
 6a0:	29 81       	ldd	r18, Y+1	; 0x01
 6a2:	3a 81       	ldd	r19, Y+2	; 0x02
 6a4:	28 17       	cp	r18, r24
 6a6:	39 07       	cpc	r19, r25
 6a8:	4c f3       	brlt	.-46     	; 0x67c <motor_allOff+0x12>
		(&TCF0.CCABUF)[i] = 0;
	}
}
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	cf 91       	pop	r28
 6b0:	df 91       	pop	r29
 6b2:	08 95       	ret

000006b4 <motor_getPWM>:

int16_t motor_getPWM(uint8_t mot) {
 6b4:	df 93       	push	r29
 6b6:	cf 93       	push	r28
 6b8:	00 d0       	rcall	.+0      	; 0x6ba <motor_getPWM+0x6>
 6ba:	0f 92       	push	r0
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
 6c0:	8c 83       	std	Y+4, r24	; 0x04
	int16_t PWM = (&TCF0.CCA)[port[mot]]; // CCx registers are also adjacent
 6c2:	8c 81       	ldd	r24, Y+4	; 0x04
 6c4:	88 2f       	mov	r24, r24
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	8a 5e       	subi	r24, 0xEA	; 234
 6ca:	9f 4d       	sbci	r25, 0xDF	; 223
 6cc:	fc 01       	movw	r30, r24
 6ce:	80 81       	ld	r24, Z
 6d0:	88 2f       	mov	r24, r24
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	88 5d       	subi	r24, 0xD8	; 216
 6da:	94 4f       	sbci	r25, 0xF4	; 244
 6dc:	fc 01       	movw	r30, r24
 6de:	80 81       	ld	r24, Z
 6e0:	91 81       	ldd	r25, Z+1	; 0x01
 6e2:	89 83       	std	Y+1, r24	; 0x01
 6e4:	9a 83       	std	Y+2, r25	; 0x02

	uint8_t in1pin_mask = _BV(2*port[mot]);
 6e6:	8c 81       	ldd	r24, Y+4	; 0x04
 6e8:	88 2f       	mov	r24, r24
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	8a 5e       	subi	r24, 0xEA	; 234
 6ee:	9f 4d       	sbci	r25, 0xDF	; 223
 6f0:	fc 01       	movw	r30, r24
 6f2:	80 81       	ld	r24, Z
 6f4:	88 2f       	mov	r24, r24
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	9c 01       	movw	r18, r24
 6fa:	22 0f       	add	r18, r18
 6fc:	33 1f       	adc	r19, r19
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 2e       	mov	r0, r18
 704:	02 c0       	rjmp	.+4      	; 0x70a <motor_getPWM+0x56>
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	0a 94       	dec	r0
 70c:	e2 f7       	brpl	.-8      	; 0x706 <motor_getPWM+0x52>
 70e:	8b 83       	std	Y+3, r24	; 0x03
	if (!(PORTK.IN & in1pin_mask))
 710:	80 e2       	ldi	r24, 0x20	; 32
 712:	97 e0       	ldi	r25, 0x07	; 7
 714:	fc 01       	movw	r30, r24
 716:	90 85       	ldd	r25, Z+8	; 0x08
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	89 23       	and	r24, r25
 71c:	88 23       	and	r24, r24
 71e:	39 f4       	brne	.+14     	; 0x72e <motor_getPWM+0x7a>
		PWM = -PWM;
 720:	89 81       	ldd	r24, Y+1	; 0x01
 722:	9a 81       	ldd	r25, Y+2	; 0x02
 724:	90 95       	com	r25
 726:	81 95       	neg	r24
 728:	9f 4f       	sbci	r25, 0xFF	; 255
 72a:	89 83       	std	Y+1, r24	; 0x01
 72c:	9a 83       	std	Y+2, r25	; 0x02

	return PWM;
 72e:	89 81       	ldd	r24, Y+1	; 0x01
 730:	9a 81       	ldd	r25, Y+2	; 0x02
}
 732:	24 96       	adiw	r28, 0x04	; 4
 734:	cd bf       	out	0x3d, r28	; 61
 736:	de bf       	out	0x3e, r29	; 62
 738:	cf 91       	pop	r28
 73a:	df 91       	pop	r29
 73c:	08 95       	ret

0000073e <motor_estop>:

void motor_estop() {
 73e:	df 93       	push	r29
 740:	cf 93       	push	r28
 742:	cd b7       	in	r28, 0x3d	; 61
 744:	de b7       	in	r29, 0x3e	; 62
	motor_setPWM(MOTOR_RIGHT, 0);
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	60 e0       	ldi	r22, 0x00	; 0
 74a:	70 e0       	ldi	r23, 0x00	; 0
 74c:	0e 94 b0 02 	call	0x560	; 0x560 <motor_setPWM>
	motor_setPWM(MOTOR_LEFT, 0);
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	70 e0       	ldi	r23, 0x00	; 0
 756:	0e 94 b0 02 	call	0x560	; 0x560 <motor_setPWM>
}
 75a:	cf 91       	pop	r28
 75c:	df 91       	pop	r29
 75e:	08 95       	ret

00000760 <motor_tick>:

void motor_tick() {
 760:	df 93       	push	r29
 762:	cf 93       	push	r28
 764:	cd b7       	in	r28, 0x3d	; 61
 766:	de b7       	in	r29, 0x3e	; 62
	if (estop_check()) {	// If we have an ESTOP
 768:	0e 94 66 01 	call	0x2cc	; 0x2cc <estop_check>
 76c:	00 97       	sbiw	r24, 0x00	; 0
 76e:	59 f0       	breq	.+22     	; 0x786 <motor_tick+0x26>
		motor_setPWM(MOTOR_RIGHT, 0);
 770:	81 e0       	ldi	r24, 0x01	; 1
 772:	60 e0       	ldi	r22, 0x00	; 0
 774:	70 e0       	ldi	r23, 0x00	; 0
 776:	0e 94 b0 02 	call	0x560	; 0x560 <motor_setPWM>
		motor_setPWM(MOTOR_LEFT, 0);
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	0e 94 b0 02 	call	0x560	; 0x560 <motor_setPWM>
 784:	0a c0       	rjmp	.+20     	; 0x79a <motor_tick+0x3a>
	} else {				// Normal Operations
		motor_setPWM(MOTOR_LEFT, 500);
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	64 ef       	ldi	r22, 0xF4	; 244
 78a:	71 e0       	ldi	r23, 0x01	; 1
 78c:	0e 94 b0 02 	call	0x560	; 0x560 <motor_setPWM>
		motor_setPWM(MOTOR_RIGHT, 500);
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	64 ef       	ldi	r22, 0xF4	; 244
 794:	71 e0       	ldi	r23, 0x01	; 1
 796:	0e 94 b0 02 	call	0x560	; 0x560 <motor_setPWM>
	}
 79a:	cf 91       	pop	r28
 79c:	df 91       	pop	r29
 79e:	08 95       	ret

000007a0 <tick_init>:
#include "estop.h"
#include <avr/interrupt.h>

#define TIMOVFVEC TCF1_OVF_vect

void tick_init() {
 7a0:	df 93       	push	r29
 7a2:	cf 93       	push	r28
 7a4:	cd b7       	in	r28, 0x3d	; 61
 7a6:	de b7       	in	r29, 0x3e	; 62
	TCF1.CTRLA = TC_CLKSEL_DIV8_gc;	// 32 MHz clock / 8 = 4 MHz timer
 7a8:	80 e4       	ldi	r24, 0x40	; 64
 7aa:	9b e0       	ldi	r25, 0x0B	; 11
 7ac:	24 e0       	ldi	r18, 0x04	; 4
 7ae:	fc 01       	movw	r30, r24
 7b0:	20 83       	st	Z, r18
	TCF1.PER = TICK_TIMMAX;			// TICK_TIMHZ / (TICK_TIMHZ / TICK_HZ) = TICK_HZ timer
 7b2:	80 e4       	ldi	r24, 0x40	; 64
 7b4:	9b e0       	ldi	r25, 0x0B	; 11
 7b6:	20 e2       	ldi	r18, 0x20	; 32
 7b8:	3e e4       	ldi	r19, 0x4E	; 78
 7ba:	fc 01       	movw	r30, r24
 7bc:	26 a3       	std	Z+38, r18	; 0x26
 7be:	37 a3       	std	Z+39, r19	; 0x27
	tick_resume();
 7c0:	87 ee       	ldi	r24, 0xE7	; 231
 7c2:	93 e0       	ldi	r25, 0x03	; 3
 7c4:	fc 01       	movw	r30, r24
 7c6:	19 95       	eicall
}
 7c8:	cf 91       	pop	r28
 7ca:	df 91       	pop	r29
 7cc:	08 95       	ret

000007ce <tick_resume>:

void tick_resume() {
 7ce:	df 93       	push	r29
 7d0:	cf 93       	push	r28
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
	TCF1.INTCTRLA = TC_OVFINTLVL_LO_gc; // overflow interrupt enabled at low priority, for running the ticks
 7d6:	80 e4       	ldi	r24, 0x40	; 64
 7d8:	9b e0       	ldi	r25, 0x0B	; 11
 7da:	21 e0       	ldi	r18, 0x01	; 1
 7dc:	fc 01       	movw	r30, r24
 7de:	26 83       	std	Z+6, r18	; 0x06
}
 7e0:	cf 91       	pop	r28
 7e2:	df 91       	pop	r29
 7e4:	08 95       	ret

000007e6 <tick_suspend>:

void tick_suspend() {
 7e6:	df 93       	push	r29
 7e8:	cf 93       	push	r28
 7ea:	cd b7       	in	r28, 0x3d	; 61
 7ec:	de b7       	in	r29, 0x3e	; 62
	TCF1.INTCTRLA = 0;
 7ee:	80 e4       	ldi	r24, 0x40	; 64
 7f0:	9b e0       	ldi	r25, 0x0B	; 11
 7f2:	fc 01       	movw	r30, r24
 7f4:	16 82       	std	Z+6, r1	; 0x06
}
 7f6:	cf 91       	pop	r28
 7f8:	df 91       	pop	r29
 7fa:	08 95       	ret

000007fc <__vector_114>:

ISR(TIMOVFVEC) {
 7fc:	1f 92       	push	r1
 7fe:	0f 92       	push	r0
 800:	0f b6       	in	r0, 0x3f	; 63
 802:	0f 92       	push	r0
 804:	00 90 38 00 	lds	r0, 0x0038
 808:	0f 92       	push	r0
 80a:	00 90 39 00 	lds	r0, 0x0039
 80e:	0f 92       	push	r0
 810:	00 90 3b 00 	lds	r0, 0x003B
 814:	0f 92       	push	r0
 816:	11 24       	eor	r1, r1
 818:	10 92 38 00 	sts	0x0038, r1
 81c:	10 92 39 00 	sts	0x0039, r1
 820:	10 92 3b 00 	sts	0x003B, r1
 824:	2f 93       	push	r18
 826:	3f 93       	push	r19
 828:	4f 93       	push	r20
 82a:	5f 93       	push	r21
 82c:	6f 93       	push	r22
 82e:	7f 93       	push	r23
 830:	8f 93       	push	r24
 832:	9f 93       	push	r25
 834:	af 93       	push	r26
 836:	bf 93       	push	r27
 838:	ef 93       	push	r30
 83a:	ff 93       	push	r31
 83c:	df 93       	push	r29
 83e:	cf 93       	push	r28
 840:	cd b7       	in	r28, 0x3d	; 61
 842:	de b7       	in	r29, 0x3e	; 62
	motor_tick();
 844:	0e 94 b0 03 	call	0x760	; 0x760 <motor_tick>
	
 848:	cf 91       	pop	r28
 84a:	df 91       	pop	r29
 84c:	ff 91       	pop	r31
 84e:	ef 91       	pop	r30
 850:	bf 91       	pop	r27
 852:	af 91       	pop	r26
 854:	9f 91       	pop	r25
 856:	8f 91       	pop	r24
 858:	7f 91       	pop	r23
 85a:	6f 91       	pop	r22
 85c:	5f 91       	pop	r21
 85e:	4f 91       	pop	r20
 860:	3f 91       	pop	r19
 862:	2f 91       	pop	r18
 864:	0f 90       	pop	r0
 866:	00 92 3b 00 	sts	0x003B, r0
 86a:	0f 90       	pop	r0
 86c:	00 92 39 00 	sts	0x0039, r0
 870:	0f 90       	pop	r0
 872:	00 92 38 00 	sts	0x0038, r0
 876:	0f 90       	pop	r0
 878:	0f be       	out	0x3f, r0	; 63
 87a:	0f 90       	pop	r0
 87c:	1f 90       	pop	r1
 87e:	18 95       	reti

00000880 <__cmpsf2>:
 880:	2f d0       	rcall	.+94     	; 0x8e0 <__fp_cmp>
 882:	08 f4       	brcc	.+2      	; 0x886 <__cmpsf2+0x6>
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	08 95       	ret

00000888 <__fixunssfsi>:
 888:	57 d0       	rcall	.+174    	; 0x938 <__fp_splitA>
 88a:	88 f0       	brcs	.+34     	; 0x8ae <__fixunssfsi+0x26>
 88c:	9f 57       	subi	r25, 0x7F	; 127
 88e:	90 f0       	brcs	.+36     	; 0x8b4 <__fixunssfsi+0x2c>
 890:	b9 2f       	mov	r27, r25
 892:	99 27       	eor	r25, r25
 894:	b7 51       	subi	r27, 0x17	; 23
 896:	a0 f0       	brcs	.+40     	; 0x8c0 <__fixunssfsi+0x38>
 898:	d1 f0       	breq	.+52     	; 0x8ce <__fixunssfsi+0x46>
 89a:	66 0f       	add	r22, r22
 89c:	77 1f       	adc	r23, r23
 89e:	88 1f       	adc	r24, r24
 8a0:	99 1f       	adc	r25, r25
 8a2:	1a f0       	brmi	.+6      	; 0x8aa <__fixunssfsi+0x22>
 8a4:	ba 95       	dec	r27
 8a6:	c9 f7       	brne	.-14     	; 0x89a <__fixunssfsi+0x12>
 8a8:	12 c0       	rjmp	.+36     	; 0x8ce <__fixunssfsi+0x46>
 8aa:	b1 30       	cpi	r27, 0x01	; 1
 8ac:	81 f0       	breq	.+32     	; 0x8ce <__fixunssfsi+0x46>
 8ae:	5e d0       	rcall	.+188    	; 0x96c <__fp_zero>
 8b0:	b1 e0       	ldi	r27, 0x01	; 1
 8b2:	08 95       	ret
 8b4:	5b c0       	rjmp	.+182    	; 0x96c <__fp_zero>
 8b6:	67 2f       	mov	r22, r23
 8b8:	78 2f       	mov	r23, r24
 8ba:	88 27       	eor	r24, r24
 8bc:	b8 5f       	subi	r27, 0xF8	; 248
 8be:	39 f0       	breq	.+14     	; 0x8ce <__fixunssfsi+0x46>
 8c0:	b9 3f       	cpi	r27, 0xF9	; 249
 8c2:	cc f3       	brlt	.-14     	; 0x8b6 <__fixunssfsi+0x2e>
 8c4:	86 95       	lsr	r24
 8c6:	77 95       	ror	r23
 8c8:	67 95       	ror	r22
 8ca:	b3 95       	inc	r27
 8cc:	d9 f7       	brne	.-10     	; 0x8c4 <__fixunssfsi+0x3c>
 8ce:	3e f4       	brtc	.+14     	; 0x8de <__fixunssfsi+0x56>
 8d0:	90 95       	com	r25
 8d2:	80 95       	com	r24
 8d4:	70 95       	com	r23
 8d6:	61 95       	neg	r22
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	8f 4f       	sbci	r24, 0xFF	; 255
 8dc:	9f 4f       	sbci	r25, 0xFF	; 255
 8de:	08 95       	ret

000008e0 <__fp_cmp>:
 8e0:	99 0f       	add	r25, r25
 8e2:	00 08       	sbc	r0, r0
 8e4:	55 0f       	add	r21, r21
 8e6:	aa 0b       	sbc	r26, r26
 8e8:	e0 e8       	ldi	r30, 0x80	; 128
 8ea:	fe ef       	ldi	r31, 0xFE	; 254
 8ec:	16 16       	cp	r1, r22
 8ee:	17 06       	cpc	r1, r23
 8f0:	e8 07       	cpc	r30, r24
 8f2:	f9 07       	cpc	r31, r25
 8f4:	c0 f0       	brcs	.+48     	; 0x926 <__fp_cmp+0x46>
 8f6:	12 16       	cp	r1, r18
 8f8:	13 06       	cpc	r1, r19
 8fa:	e4 07       	cpc	r30, r20
 8fc:	f5 07       	cpc	r31, r21
 8fe:	98 f0       	brcs	.+38     	; 0x926 <__fp_cmp+0x46>
 900:	62 1b       	sub	r22, r18
 902:	73 0b       	sbc	r23, r19
 904:	84 0b       	sbc	r24, r20
 906:	95 0b       	sbc	r25, r21
 908:	39 f4       	brne	.+14     	; 0x918 <__fp_cmp+0x38>
 90a:	0a 26       	eor	r0, r26
 90c:	61 f0       	breq	.+24     	; 0x926 <__fp_cmp+0x46>
 90e:	23 2b       	or	r18, r19
 910:	24 2b       	or	r18, r20
 912:	25 2b       	or	r18, r21
 914:	21 f4       	brne	.+8      	; 0x91e <__fp_cmp+0x3e>
 916:	08 95       	ret
 918:	0a 26       	eor	r0, r26
 91a:	09 f4       	brne	.+2      	; 0x91e <__fp_cmp+0x3e>
 91c:	a1 40       	sbci	r26, 0x01	; 1
 91e:	a6 95       	lsr	r26
 920:	8f ef       	ldi	r24, 0xFF	; 255
 922:	81 1d       	adc	r24, r1
 924:	81 1d       	adc	r24, r1
 926:	08 95       	ret

00000928 <__fp_split3>:
 928:	57 fd       	sbrc	r21, 7
 92a:	90 58       	subi	r25, 0x80	; 128
 92c:	44 0f       	add	r20, r20
 92e:	55 1f       	adc	r21, r21
 930:	59 f0       	breq	.+22     	; 0x948 <__fp_splitA+0x10>
 932:	5f 3f       	cpi	r21, 0xFF	; 255
 934:	71 f0       	breq	.+28     	; 0x952 <__fp_splitA+0x1a>
 936:	47 95       	ror	r20

00000938 <__fp_splitA>:
 938:	88 0f       	add	r24, r24
 93a:	97 fb       	bst	r25, 7
 93c:	99 1f       	adc	r25, r25
 93e:	61 f0       	breq	.+24     	; 0x958 <__fp_splitA+0x20>
 940:	9f 3f       	cpi	r25, 0xFF	; 255
 942:	79 f0       	breq	.+30     	; 0x962 <__fp_splitA+0x2a>
 944:	87 95       	ror	r24
 946:	08 95       	ret
 948:	12 16       	cp	r1, r18
 94a:	13 06       	cpc	r1, r19
 94c:	14 06       	cpc	r1, r20
 94e:	55 1f       	adc	r21, r21
 950:	f2 cf       	rjmp	.-28     	; 0x936 <__fp_split3+0xe>
 952:	46 95       	lsr	r20
 954:	f1 df       	rcall	.-30     	; 0x938 <__fp_splitA>
 956:	08 c0       	rjmp	.+16     	; 0x968 <__fp_splitA+0x30>
 958:	16 16       	cp	r1, r22
 95a:	17 06       	cpc	r1, r23
 95c:	18 06       	cpc	r1, r24
 95e:	99 1f       	adc	r25, r25
 960:	f1 cf       	rjmp	.-30     	; 0x944 <__fp_splitA+0xc>
 962:	86 95       	lsr	r24
 964:	71 05       	cpc	r23, r1
 966:	61 05       	cpc	r22, r1
 968:	08 94       	sec
 96a:	08 95       	ret

0000096c <__fp_zero>:
 96c:	e8 94       	clt

0000096e <__fp_szero>:
 96e:	bb 27       	eor	r27, r27
 970:	66 27       	eor	r22, r22
 972:	77 27       	eor	r23, r23
 974:	cb 01       	movw	r24, r22
 976:	97 f9       	bld	r25, 7
 978:	08 95       	ret

0000097a <__gesf2>:
 97a:	b2 df       	rcall	.-156    	; 0x8e0 <__fp_cmp>
 97c:	08 f4       	brcc	.+2      	; 0x980 <__gesf2+0x6>
 97e:	8f ef       	ldi	r24, 0xFF	; 255
 980:	08 95       	ret

00000982 <__mulsf3>:
 982:	0b d0       	rcall	.+22     	; 0x99a <__mulsf3x>
 984:	78 c0       	rjmp	.+240    	; 0xa76 <__fp_round>
 986:	69 d0       	rcall	.+210    	; 0xa5a <__fp_pscA>
 988:	28 f0       	brcs	.+10     	; 0x994 <__mulsf3+0x12>
 98a:	6e d0       	rcall	.+220    	; 0xa68 <__fp_pscB>
 98c:	18 f0       	brcs	.+6      	; 0x994 <__mulsf3+0x12>
 98e:	95 23       	and	r25, r21
 990:	09 f0       	breq	.+2      	; 0x994 <__mulsf3+0x12>
 992:	5a c0       	rjmp	.+180    	; 0xa48 <__fp_inf>
 994:	5f c0       	rjmp	.+190    	; 0xa54 <__fp_nan>
 996:	11 24       	eor	r1, r1
 998:	ea cf       	rjmp	.-44     	; 0x96e <__fp_szero>

0000099a <__mulsf3x>:
 99a:	c6 df       	rcall	.-116    	; 0x928 <__fp_split3>
 99c:	a0 f3       	brcs	.-24     	; 0x986 <__mulsf3+0x4>

0000099e <__mulsf3_pse>:
 99e:	95 9f       	mul	r25, r21
 9a0:	d1 f3       	breq	.-12     	; 0x996 <__mulsf3+0x14>
 9a2:	95 0f       	add	r25, r21
 9a4:	50 e0       	ldi	r21, 0x00	; 0
 9a6:	55 1f       	adc	r21, r21
 9a8:	62 9f       	mul	r22, r18
 9aa:	f0 01       	movw	r30, r0
 9ac:	72 9f       	mul	r23, r18
 9ae:	bb 27       	eor	r27, r27
 9b0:	f0 0d       	add	r31, r0
 9b2:	b1 1d       	adc	r27, r1
 9b4:	63 9f       	mul	r22, r19
 9b6:	aa 27       	eor	r26, r26
 9b8:	f0 0d       	add	r31, r0
 9ba:	b1 1d       	adc	r27, r1
 9bc:	aa 1f       	adc	r26, r26
 9be:	64 9f       	mul	r22, r20
 9c0:	66 27       	eor	r22, r22
 9c2:	b0 0d       	add	r27, r0
 9c4:	a1 1d       	adc	r26, r1
 9c6:	66 1f       	adc	r22, r22
 9c8:	82 9f       	mul	r24, r18
 9ca:	22 27       	eor	r18, r18
 9cc:	b0 0d       	add	r27, r0
 9ce:	a1 1d       	adc	r26, r1
 9d0:	62 1f       	adc	r22, r18
 9d2:	73 9f       	mul	r23, r19
 9d4:	b0 0d       	add	r27, r0
 9d6:	a1 1d       	adc	r26, r1
 9d8:	62 1f       	adc	r22, r18
 9da:	83 9f       	mul	r24, r19
 9dc:	a0 0d       	add	r26, r0
 9de:	61 1d       	adc	r22, r1
 9e0:	22 1f       	adc	r18, r18
 9e2:	74 9f       	mul	r23, r20
 9e4:	33 27       	eor	r19, r19
 9e6:	a0 0d       	add	r26, r0
 9e8:	61 1d       	adc	r22, r1
 9ea:	23 1f       	adc	r18, r19
 9ec:	84 9f       	mul	r24, r20
 9ee:	60 0d       	add	r22, r0
 9f0:	21 1d       	adc	r18, r1
 9f2:	82 2f       	mov	r24, r18
 9f4:	76 2f       	mov	r23, r22
 9f6:	6a 2f       	mov	r22, r26
 9f8:	11 24       	eor	r1, r1
 9fa:	9f 57       	subi	r25, 0x7F	; 127
 9fc:	50 40       	sbci	r21, 0x00	; 0
 9fe:	8a f0       	brmi	.+34     	; 0xa22 <__mulsf3_pse+0x84>
 a00:	e1 f0       	breq	.+56     	; 0xa3a <__mulsf3_pse+0x9c>
 a02:	88 23       	and	r24, r24
 a04:	4a f0       	brmi	.+18     	; 0xa18 <__mulsf3_pse+0x7a>
 a06:	ee 0f       	add	r30, r30
 a08:	ff 1f       	adc	r31, r31
 a0a:	bb 1f       	adc	r27, r27
 a0c:	66 1f       	adc	r22, r22
 a0e:	77 1f       	adc	r23, r23
 a10:	88 1f       	adc	r24, r24
 a12:	91 50       	subi	r25, 0x01	; 1
 a14:	50 40       	sbci	r21, 0x00	; 0
 a16:	a9 f7       	brne	.-22     	; 0xa02 <__mulsf3_pse+0x64>
 a18:	9e 3f       	cpi	r25, 0xFE	; 254
 a1a:	51 05       	cpc	r21, r1
 a1c:	70 f0       	brcs	.+28     	; 0xa3a <__mulsf3_pse+0x9c>
 a1e:	14 c0       	rjmp	.+40     	; 0xa48 <__fp_inf>
 a20:	a6 cf       	rjmp	.-180    	; 0x96e <__fp_szero>
 a22:	5f 3f       	cpi	r21, 0xFF	; 255
 a24:	ec f3       	brlt	.-6      	; 0xa20 <__mulsf3_pse+0x82>
 a26:	98 3e       	cpi	r25, 0xE8	; 232
 a28:	dc f3       	brlt	.-10     	; 0xa20 <__mulsf3_pse+0x82>
 a2a:	86 95       	lsr	r24
 a2c:	77 95       	ror	r23
 a2e:	67 95       	ror	r22
 a30:	b7 95       	ror	r27
 a32:	f7 95       	ror	r31
 a34:	e7 95       	ror	r30
 a36:	9f 5f       	subi	r25, 0xFF	; 255
 a38:	c1 f7       	brne	.-16     	; 0xa2a <__mulsf3_pse+0x8c>
 a3a:	fe 2b       	or	r31, r30
 a3c:	88 0f       	add	r24, r24
 a3e:	91 1d       	adc	r25, r1
 a40:	96 95       	lsr	r25
 a42:	87 95       	ror	r24
 a44:	97 f9       	bld	r25, 7
 a46:	08 95       	ret

00000a48 <__fp_inf>:
 a48:	97 f9       	bld	r25, 7
 a4a:	9f 67       	ori	r25, 0x7F	; 127
 a4c:	80 e8       	ldi	r24, 0x80	; 128
 a4e:	70 e0       	ldi	r23, 0x00	; 0
 a50:	60 e0       	ldi	r22, 0x00	; 0
 a52:	08 95       	ret

00000a54 <__fp_nan>:
 a54:	9f ef       	ldi	r25, 0xFF	; 255
 a56:	80 ec       	ldi	r24, 0xC0	; 192
 a58:	08 95       	ret

00000a5a <__fp_pscA>:
 a5a:	00 24       	eor	r0, r0
 a5c:	0a 94       	dec	r0
 a5e:	16 16       	cp	r1, r22
 a60:	17 06       	cpc	r1, r23
 a62:	18 06       	cpc	r1, r24
 a64:	09 06       	cpc	r0, r25
 a66:	08 95       	ret

00000a68 <__fp_pscB>:
 a68:	00 24       	eor	r0, r0
 a6a:	0a 94       	dec	r0
 a6c:	12 16       	cp	r1, r18
 a6e:	13 06       	cpc	r1, r19
 a70:	14 06       	cpc	r1, r20
 a72:	05 06       	cpc	r0, r21
 a74:	08 95       	ret

00000a76 <__fp_round>:
 a76:	09 2e       	mov	r0, r25
 a78:	03 94       	inc	r0
 a7a:	00 0c       	add	r0, r0
 a7c:	11 f4       	brne	.+4      	; 0xa82 <__fp_round+0xc>
 a7e:	88 23       	and	r24, r24
 a80:	52 f0       	brmi	.+20     	; 0xa96 <__fp_round+0x20>
 a82:	bb 0f       	add	r27, r27
 a84:	40 f4       	brcc	.+16     	; 0xa96 <__fp_round+0x20>
 a86:	bf 2b       	or	r27, r31
 a88:	11 f4       	brne	.+4      	; 0xa8e <__fp_round+0x18>
 a8a:	60 ff       	sbrs	r22, 0
 a8c:	04 c0       	rjmp	.+8      	; 0xa96 <__fp_round+0x20>
 a8e:	6f 5f       	subi	r22, 0xFF	; 255
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	08 95       	ret

00000a98 <_exit>:
 a98:	f8 94       	cli

00000a9a <__stop_program>:
 a9a:	ff cf       	rjmp	.-2      	; 0xa9a <__stop_program>
